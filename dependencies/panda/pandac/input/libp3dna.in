1641927178
3 3
8 libp3dna 4 q0PI 16 panda3d.toontown 
358
364 12 get_dna_path 0 1 0 12 get_dna_path 0 1 361 0
51
ConfigVariableSearchPath const &get_dna_path(void);

365 29 upcast_to_TypedReferenceCount 0 12 722 39 DNAGroup::upcast_to_TypedReferenceCount 0 1 14 43
upcast from DNAGroup to TypedReferenceCount
67
TypedReferenceCount *DNAGroup::upcast_to_TypedReferenceCount(void);

366 20 downcast_to_DNAGroup 0 12 723 41 TypedReferenceCount::downcast_to_DNAGroup 0 0 45
downcast from TypedReferenceCount to DNAGroup
58
DNAGroup *TypedReferenceCount::downcast_to_DNAGroup(void);

367 17 upcast_to_Namable 0 12 722 27 DNAGroup::upcast_to_Namable 0 1 15 31
upcast from DNAGroup to Namable
43
Namable *DNAGroup::upcast_to_Namable(void);

368 20 downcast_to_DNAGroup 0 12 724 29 Namable::downcast_to_DNAGroup 0 0 33
downcast from Namable to DNAGroup
46
DNAGroup *Namable::downcast_to_DNAGroup(void);

369 8 DNAGroup 0 4 722 18 DNAGroup::DNAGroup 0 2 1 2 440
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::CopyConstructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
100
DNAGroup::DNAGroup(std::string const &initial_name = "");
DNAGroup::DNAGroup(DNAGroup const &group);

370 8 traverse 0 6 722 18 DNAGroup::traverse 0 1 3 214
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::traverse
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
90
virtual NodePath DNAGroup::traverse(NodePath &parent, DNAStorage *store, int editing = 0);

371 18 top_level_traverse 0 4 722 28 DNAGroup::top_level_traverse 0 1 4 272
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::top_level_traverse
//       Access: Public
//  Description: The top level traverse does some special things
////////////////////////////////////////////////////////////////////
92
NodePath DNAGroup::top_level_traverse(NodePath &parent, DNAStorage *store, int editing = 0);

372 3 add 0 4 722 13 DNAGroup::add 0 1 5 248
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::add
//       Access: Public
//  Description: add a DNAGroup to this vector of nodes
////////////////////////////////////////////////////////////////////
48
void DNAGroup::add(PointerTo< DNAGroup > group);

373 6 remove 0 4 722 16 DNAGroup::remove 0 1 6 446
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::remove
//       Access: Public
//  Description: Remove a group from this vector. Note, this is
//               not really meant for heavy use, since we are using
//               an STL vector which erases in linear time.
//               Should be ok, since removal will be rare.
////////////////////////////////////////////////////////////////////
51
void DNAGroup::remove(PointerTo< DNAGroup > group);

374 2 at 0 4 722 12 DNAGroup::at 0 1 7 243
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::at
//       Access: Public
//  Description: Return the nth group in the vector
////////////////////////////////////////////////////////////////////
54
inline PointerTo< DNAGroup > DNAGroup::at(uint index);

375 7 current 0 4 722 17 DNAGroup::current 0 1 8 238
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::current
//       Access: Public
//  Description: return the current group
////////////////////////////////////////////////////////////////////
53
inline PointerTo< DNAGroup > DNAGroup::current(void);

376 16 get_num_children 0 4 722 26 DNAGroup::get_num_children 0 1 9 259
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::get_num_children
//       Access: Public
//  Description: how many groups do we have under us?
////////////////////////////////////////////////////////////////////
44
inline int DNAGroup::get_num_children(void);

377 10 get_parent 0 4 722 20 DNAGroup::get_parent 0 1 10 240
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::get_parent
//       Access: Public
//  Description: Return the parent group
////////////////////////////////////////////////////////////////////
62
inline PointerTo< DNAGroup > DNAGroup::get_parent(void) const;

378 5 write 0 6 722 15 DNAGroup::write 0 1 11 255
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::write
//       Access: Public
//  Description: Writes the group and all children to output
////////////////////////////////////////////////////////////////////
95
virtual void DNAGroup::write(std::ostream &out, DNAStorage *store, int indent_level = 0) const;

379 2 ls 0 4 722 12 DNAGroup::ls 0 1 12 266
////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::ls
//       Access: Public
//  Description: Writes the group and all children to cout (for debugging)
////////////////////////////////////////////////////////////////////
30
void DNAGroup::ls(void) const;

380 14 get_class_type 0 4 722 24 DNAGroup::get_class_type 0 1 13 0
49
static TypeHandle DNAGroup::get_class_type(void);

381 9 ~DNAGroup 0 4 722 19 DNAGroup::~DNAGroup 0 0 0
26
DNAGroup::~DNAGroup(void);

382 12 DNASuitPoint 0 4 725 26 DNASuitPoint::DNASuitPoint 0 2 16 17 221
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPoint::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
175
DNASuitPoint::DNASuitPoint(int index, DNASuitPoint::DNASuitPointType type, LPoint3f pos, int lb_index = -1);
inline DNASuitPoint::DNASuitPoint(DNASuitPoint const &) = default;

383 9 set_index 0 4 725 23 DNASuitPoint::set_index 0 1 18 0
47
inline void DNASuitPoint::set_index(int index);

384 9 get_index 0 4 725 23 DNASuitPoint::get_index 0 1 19 0
47
inline int DNASuitPoint::get_index(void) const;

385 14 set_point_type 0 4 725 28 DNASuitPoint::set_point_type 0 1 20 0
78
inline void DNASuitPoint::set_point_type(DNASuitPoint::DNASuitPointType type);

386 14 get_point_type 0 4 725 28 DNASuitPoint::get_point_type 0 1 21 0
79
inline DNASuitPoint::DNASuitPointType DNASuitPoint::get_point_type(void) const;

387 7 set_pos 0 4 725 21 DNASuitPoint::set_pos 0 1 22 0
48
inline void DNASuitPoint::set_pos(LPoint3f pos);

388 7 get_pos 0 4 725 21 DNASuitPoint::get_pos 0 1 23 0
50
inline LPoint3f DNASuitPoint::get_pos(void) const;

389 12 set_graph_id 0 4 725 26 DNASuitPoint::set_graph_id 0 1 24 0
53
inline void DNASuitPoint::set_graph_id(int graph_id);

390 12 get_graph_id 0 4 725 26 DNASuitPoint::get_graph_id 0 1 25 0
50
inline int DNASuitPoint::get_graph_id(void) const;

391 27 set_landmark_building_index 0 4 725 41 DNASuitPoint::set_landmark_building_index 0 1 26 0
68
inline void DNASuitPoint::set_landmark_building_index(int lb_index);

392 27 get_landmark_building_index 0 4 725 41 DNASuitPoint::get_landmark_building_index 0 1 27 0
65
inline int DNASuitPoint::get_landmark_building_index(void) const;

393 11 is_terminal 0 4 725 25 DNASuitPoint::is_terminal 0 1 28 541
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPoint::is_terminal
//       Access: Published
//  Description: Returns true if this point is the sort of point you
//               find at the beginning or end of a suit path (like a
//               FRONT_DOOR_POINT or SIDE_DOOR_POINT), or false if it
//               is something you're more likely to find in the middle
//               of a suit path (like a STREET_POINT).
////////////////////////////////////////////////////////////////////
50
inline bool DNASuitPoint::is_terminal(void) const;

394 6 output 0 4 725 20 DNASuitPoint::output 0 1 29 256
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPoint::output
//       Access: Public
//  Description: Output all the properties to the stream
////////////////////////////////////////////////////////////////////
51
void DNASuitPoint::output(std::ostream &out) const;

395 5 write 0 6 725 19 DNASuitPoint::write 0 1 30 256
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPoint::write
//       Access: Public
//  Description: write the suit point back out to the dna
////////////////////////////////////////////////////////////////////
80
virtual void DNASuitPoint::write(std::ostream &out, int indent_level = 0) const;

396 14 get_class_type 0 4 725 28 DNASuitPoint::get_class_type 0 1 31 0
53
static TypeHandle DNASuitPoint::get_class_type(void);

397 13 ~DNASuitPoint 0 4 725 27 DNASuitPoint::~DNASuitPoint 0 0 0
34
DNASuitPoint::~DNASuitPoint(void);

398 11 DNASuitEdge 0 4 727 24 DNASuitEdge::DNASuitEdge 0 2 32 33 220
////////////////////////////////////////////////////////////////////
//     Function: DNASuitEdge::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
186
DNASuitEdge::DNASuitEdge(PointerTo< DNASuitPoint > start_point, PointerTo< DNASuitPoint > end_point, std::string zone_id);
inline DNASuitEdge::DNASuitEdge(DNASuitEdge const &) = default;

399 11 operator == 0 4 727 24 DNASuitEdge::operator == 0 1 34 0
69
inline bool DNASuitEdge::operator ==(DNASuitEdge const &other) const;

400 15 get_start_point 0 4 727 28 DNASuitEdge::get_start_point 0 1 35 0
74
inline PointerTo< DNASuitPoint > DNASuitEdge::get_start_point(void) const;

401 13 get_end_point 0 4 727 26 DNASuitEdge::get_end_point 0 1 36 0
72
inline PointerTo< DNASuitPoint > DNASuitEdge::get_end_point(void) const;

402 11 get_zone_id 0 4 727 24 DNASuitEdge::get_zone_id 0 1 37 0
56
inline std::string DNASuitEdge::get_zone_id(void) const;

403 11 set_zone_id 0 4 727 24 DNASuitEdge::set_zone_id 0 1 38 0
58
inline void DNASuitEdge::set_zone_id(std::string zone_id);

404 6 output 0 4 727 19 DNASuitEdge::output 0 1 39 253
////////////////////////////////////////////////////////////////////
//     Function: DNASuitEdge::output
//       Access: Public
//  Description: Outputs all the properties to ostream
////////////////////////////////////////////////////////////////////
50
void DNASuitEdge::output(std::ostream &out) const;

405 5 write 0 6 727 18 DNASuitEdge::write 0 1 40 245
////////////////////////////////////////////////////////////////////
//     Function: DNASuitEdge::write
//       Access: Public
//  Description: Writes the edge and properties
////////////////////////////////////////////////////////////////////
98
virtual void DNASuitEdge::write(std::ostream &out, DNAStorage *store, int indent_level = 0) const;

406 14 get_class_type 0 4 727 27 DNASuitEdge::get_class_type 0 1 41 0
52
static TypeHandle DNASuitEdge::get_class_type(void);

407 12 ~DNASuitEdge 0 4 727 25 DNASuitEdge::~DNASuitEdge 0 0 0
32
DNASuitEdge::~DNASuitEdge(void);

408 13 DNABattleCell 0 4 728 28 DNABattleCell::DNABattleCell 0 2 42 43 222
////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
140
DNABattleCell::DNABattleCell(float width, float height, LPoint3f pos);
inline DNABattleCell::DNABattleCell(DNABattleCell const &) = default;

409 16 set_width_height 0 4 728 31 DNABattleCell::set_width_height 0 1 44 68
////////////////////////////////////////////////////////////////////
71
inline void DNABattleCell::set_width_height(float width, float height);

410 9 get_width 0 4 728 24 DNABattleCell::get_width 0 1 45 220
////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::get_width
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline float DNABattleCell::get_width(void) const;

411 10 get_height 0 4 728 25 DNABattleCell::get_height 0 1 46 221
////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::get_height
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline float DNABattleCell::get_height(void) const;

412 7 set_pos 0 4 728 22 DNABattleCell::set_pos 0 1 47 0
49
inline void DNABattleCell::set_pos(LPoint3f pos);

413 7 get_pos 0 4 728 22 DNABattleCell::get_pos 0 1 48 0
51
inline LPoint3f DNABattleCell::get_pos(void) const;

414 6 output 0 4 728 21 DNABattleCell::output 0 1 49 254
////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::output
//       Access: Public
//  Description: Writes the cell properties to output
////////////////////////////////////////////////////////////////////
52
void DNABattleCell::output(std::ostream &out) const;

415 8 traverse 0 6 728 23 DNABattleCell::traverse 0 1 50 219
////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::traverse
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
95
virtual NodePath DNABattleCell::traverse(NodePath &parent, DNAStorage *store, int editing = 0);

416 5 write 0 6 728 20 DNABattleCell::write 0 1 51 260
////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::write
//       Access: Public
//  Description: Writes the group and all children to output
////////////////////////////////////////////////////////////////////
100
virtual void DNABattleCell::write(std::ostream &out, DNAStorage *store, int indent_level = 0) const;

417 14 get_class_type 0 4 728 29 DNABattleCell::get_class_type 0 1 52 0
54
static TypeHandle DNABattleCell::get_class_type(void);

418 14 ~DNABattleCell 0 4 728 29 DNABattleCell::~DNABattleCell 0 0 0
36
DNABattleCell::~DNABattleCell(void);

419 11 DNAVisGroup 0 4 729 24 DNAVisGroup::DNAVisGroup 0 2 53 54 446
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::CopyConstructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
115
DNAVisGroup::DNAVisGroup(std::string const &initial_name = "");
DNAVisGroup::DNAVisGroup(DNAVisGroup const &group);

420 11 add_visible 0 4 729 24 DNAVisGroup::add_visible 0 1 55 262
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::add_visible
//       Access: Public
//  Description: Add a vis group name to this group's list
////////////////////////////////////////////////////////////////////
65
void DNAVisGroup::add_visible(std::string const &vis_group_name);

421 14 remove_visible 0 4 729 27 DNAVisGroup::remove_visible 0 1 56 270
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::remove_vis_group
//       Access: Public
//  Description: Remove a vis group name to this group's list
////////////////////////////////////////////////////////////////////
67
int DNAVisGroup::remove_visible(std::string const &vis_group_name);

422 16 get_num_visibles 0 4 729 29 DNAVisGroup::get_num_visibles 0 1 57 266
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_num_visibles
//       Access: Public
//  Description: Ask how many visibles this vis group has
////////////////////////////////////////////////////////////////////
46
int DNAVisGroup::get_num_visibles(void) const;

423 16 get_visible_name 0 4 729 29 DNAVisGroup::get_visible_name 0 1 58 267
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_visible_name
//       Access: Public
//  Description: Return the string name of the ith visible
////////////////////////////////////////////////////////////////////
56
std::string DNAVisGroup::get_visible_name(uint i) const;

424 13 add_suit_edge 0 4 729 26 DNAVisGroup::add_suit_edge 0 1 59 327
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::add_suit_edge
//       Access: Public
//  Description: Adds a suit edge to this vis group
//               This is only stored here so we can write it back out
////////////////////////////////////////////////////////////////////
63
void DNAVisGroup::add_suit_edge(PointerTo< DNASuitEdge > edge);

425 16 remove_suit_edge 0 4 729 29 DNAVisGroup::remove_suit_edge 0 1 60 247
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::remove_suit_edge
//       Access: Public
//  Description: Remove this suit edge
////////////////////////////////////////////////////////////////////
65
int DNAVisGroup::remove_suit_edge(PointerTo< DNASuitEdge > edge);

426 18 get_num_suit_edges 0 4 729 31 DNAVisGroup::get_num_suit_edges 0 1 61 265
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_num_suit_edges
//       Access: Public
//  Description: Ask how many edges this vis group has
////////////////////////////////////////////////////////////////////
48
int DNAVisGroup::get_num_suit_edges(void) const;

427 13 get_suit_edge 0 4 729 26 DNAVisGroup::get_suit_edge 0 1 62 256
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_suit_edge
//       Access: Public
//  Description: Return the ith edge in the vector
////////////////////////////////////////////////////////////////////
66
PointerTo< DNASuitEdge > DNAVisGroup::get_suit_edge(uint i) const;

428 15 add_battle_cell 0 4 729 28 DNAVisGroup::add_battle_cell 0 1 63 331
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::add_battle_cell
//       Access: Public
//  Description: Adds a battle_cell to this vis group
//               This is only stored here so we can write it back out
////////////////////////////////////////////////////////////////////
67
void DNAVisGroup::add_battle_cell(PointerTo< DNABattleCell > cell);

429 18 remove_battle_cell 0 4 729 31 DNAVisGroup::remove_battle_cell 0 1 64 251
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::remove_battle_cell
//       Access: Public
//  Description: Remove this battle cell
////////////////////////////////////////////////////////////////////
69
int DNAVisGroup::remove_battle_cell(PointerTo< DNABattleCell > cell);

430 20 get_num_battle_cells 0 4 729 33 DNAVisGroup::get_num_battle_cells 0 1 65 267
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_num_battle_cells
//       Access: Public
//  Description: Ask how many cells this vis group has
////////////////////////////////////////////////////////////////////
50
int DNAVisGroup::get_num_battle_cells(void) const;

431 15 get_battle_cell 0 4 729 28 DNAVisGroup::get_battle_cell 0 1 66 258
////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_battle_cell
//       Access: Public
//  Description: Return the ith cell in the vector
////////////////////////////////////////////////////////////////////
70
PointerTo< DNABattleCell > DNAVisGroup::get_battle_cell(uint i) const;

432 14 get_class_type 0 4 729 27 DNAVisGroup::get_class_type 0 1 67 0
52
static TypeHandle DNAVisGroup::get_class_type(void);

433 12 ~DNAVisGroup 0 4 729 25 DNAVisGroup::~DNAVisGroup 0 0 0
32
DNAVisGroup::~DNAVisGroup(void);

434 11 DNASuitPath 0 4 730 24 DNASuitPath::DNASuitPath 0 3 68 69 70 754
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::Constructor
//       Access: Public
//  Description: Accepts an integer which indicates the expected
//               length of the path.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
DNASuitPath::DNASuitPath(void);
DNASuitPath::DNASuitPath(int reserve_length);
DNASuitPath::DNASuitPath(DNASuitPath const &path);

435 14 get_num_points 0 4 730 27 DNASuitPath::get_num_points 0 1 71 318
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::get_num_points
//       Access: Public
//  Description: How many points are along this path, including the
//               starting and ending points
////////////////////////////////////////////////////////////////////
51
inline int DNASuitPath::get_num_points(void) const;

436 4 copy 0 4 730 17 DNASuitPath::copy 0 1 72 213
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::copy
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
void DNASuitPath::copy(DNASuitPath const &path);

437 15 get_point_index 0 4 730 28 DNASuitPath::get_point_index 0 1 73 387
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::get_point_index
//       Access: Public
//  Description: Returns the point index at location i. This index
//               can then be looked up in the dna storage to ask
//               properties of the actual point
////////////////////////////////////////////////////////////////////
53
inline int DNASuitPath::get_point_index(int i) const;

438 6 output 0 4 730 19 DNASuitPath::output 0 1 74 246
////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::output
//       Access: Public
//  Description: Output the path to the ostream
////////////////////////////////////////////////////////////////////
50
void DNASuitPath::output(std::ostream &out) const;

439 14 get_class_type 0 4 730 27 DNASuitPath::get_class_type 0 1 75 0
52
static TypeHandle DNASuitPath::get_class_type(void);

440 12 ~DNASuitPath 0 4 730 25 DNASuitPath::~DNASuitPath 0 0 0
32
DNASuitPath::~DNASuitPath(void);

441 6 PosHpr 0 4 731 14 PosHpr::PosHpr 0 2 76 77 0
134
PosHpr::PosHpr(LPoint3f const &pos = LPoint3f(0), LPoint3f const &hpr = LPoint3f(0));
inline PosHpr::PosHpr(PosHpr const &) = default;

442 7 get_pos 0 4 731 15 PosHpr::get_pos 0 1 78 0
44
LPoint3f const &PosHpr::get_pos(void) const;

443 7 get_hpr 0 4 731 15 PosHpr::get_hpr 0 1 79 0
44
LPoint3f const &PosHpr::get_hpr(void) const;

444 7 ~PosHpr 0 4 731 15 PosHpr::~PosHpr 0 0 0
22
PosHpr::~PosHpr(void);

445 10 DNAStorage 0 4 732 22 DNAStorage::DNAStorage 0 2 80 81 207
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
90
DNAStorage::DNAStorage(void);
inline DNAStorage::DNAStorage(DNAStorage const &) = default;

446 18 print_node_storage 0 4 732 30 DNAStorage::print_node_storage 0 1 82 268
// Storage functions

////////////////////////////////////////////////////////////////////
//     Function: print_node_storage
//       Access: Public
//  Description: Print out the key/pointer pairs
////////////////////////////////////////////////////////////////////
48
void DNAStorage::print_node_storage(void) const;

447 21 print_texture_storage 0 4 732 33 DNAStorage::print_texture_storage 0 1 83 249
////////////////////////////////////////////////////////////////////
//     Function: print_texture_storage
//       Access: Public
//  Description: Print out the key/pointer pairs
////////////////////////////////////////////////////////////////////
51
void DNAStorage::print_texture_storage(void) const;

448 18 print_font_storage 0 4 732 30 DNAStorage::print_font_storage 0 1 84 246
////////////////////////////////////////////////////////////////////
//     Function: print_font_storage
//       Access: Public
//  Description: Print out the key/pointer pairs
////////////////////////////////////////////////////////////////////
48
void DNAStorage::print_font_storage(void) const;

449 24 print_suit_point_storage 0 4 732 36 DNAStorage::print_suit_point_storage 0 1 85 252
////////////////////////////////////////////////////////////////////
//     Function: print_suit_point_storage
//       Access: Public
//  Description: Print out the key/pointer pairs
////////////////////////////////////////////////////////////////////
54
void DNAStorage::print_suit_point_storage(void) const;

450 25 print_battle_cell_storage 0 4 732 37 DNAStorage::print_battle_cell_storage 0 1 86 248
////////////////////////////////////////////////////////////////////
//     Function: print_battle_cell_storage
//       Access: Public
//  Description: Print out the battle cells
////////////////////////////////////////////////////////////////////
55
void DNAStorage::print_battle_cell_storage(void) const;

451 13 store_texture 0 4 732 25 DNAStorage::store_texture 0 1 87 252
////////////////////////////////////////////////////////////////////
//     Function: store_texture
//       Access: Public
//  Description: Store a texture pointer in the texture map
////////////////////////////////////////////////////////////////////
93
void DNAStorage::store_texture(std::string const &code_string, PointerTo< Texture > texture);

452 10 store_font 0 4 732 22 DNAStorage::store_font 0 1 88 243
////////////////////////////////////////////////////////////////////
//     Function: store_font
//       Access: Public
//  Description: Store a font pointer in the font map
////////////////////////////////////////////////////////////////////
88
void DNAStorage::store_font(std::string const &code_string, PointerTo< TextFont > font);

453 10 store_node 0 4 732 22 DNAStorage::store_node 0 1 89 243
////////////////////////////////////////////////////////////////////
//     Function: store_node
//       Access: Public
//  Description: Store a node pointer in the node map
////////////////////////////////////////////////////////////////////
121
inline void DNAStorage::store_node(std::string const &code_string, NodePath node, std::string const &code_category = "");

454 15 store_hood_node 0 4 732 27 DNAStorage::store_hood_node 0 1 90 292
////////////////////////////////////////////////////////////////////
//     Function: store_hood_node
//       Access: Public
//  Description: Store a neighborhood specific node pointer in the
//               hood node map
////////////////////////////////////////////////////////////////////
126
inline void DNAStorage::store_hood_node(std::string const &code_string, NodePath node, std::string const &code_category = "");

455 16 store_place_node 0 4 732 28 DNAStorage::store_place_node 0 1 91 294
////////////////////////////////////////////////////////////////////
//     Function: store_place_node
//       Access: Public
//  Description: Store a neighborhood specific node pointer in the
//               place node map
////////////////////////////////////////////////////////////////////
127
inline void DNAStorage::store_place_node(std::string const &code_string, NodePath node, std::string const &code_category = "");

456 16 store_suit_point 0 4 732 28 DNAStorage::store_suit_point 0 2 92 93 638
////////////////////////////////////////////////////////////////////
//     Function: store_suit_point
//       Access: Public
//  Description: Store a point in the suit point map. If that pos
//               already exists, return the existing point, otherwise
//               create a new point and store that.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: store_suit_point
//       Access: Public
//  Description: Store a suit point in the suit point map
////////////////////////////////////////////////////////////////////
168
PointerTo< DNASuitPoint > DNAStorage::store_suit_point(DNASuitPoint::DNASuitPointType type, LPoint3f pos);
int DNAStorage::store_suit_point(PointerTo< DNASuitPoint > );

457 28 get_highest_suit_point_index 0 4 732 40 DNAStorage::get_highest_suit_point_index 0 1 94 0
51
int DNAStorage::get_highest_suit_point_index(void);

458 17 remove_suit_point 0 4 732 29 DNAStorage::remove_suit_point 0 1 95 320
////////////////////////////////////////////////////////////////////
//     Function: remove_suit_point
//       Access: Public
//  Description: Remove a suit point from the suit point map
//               Returns the number of points removed (0 or 1)
////////////////////////////////////////////////////////////////////
62
int DNAStorage::remove_suit_point(PointerTo< DNASuitPoint > );

459 18 store_block_number 0 4 732 30 DNAStorage::store_block_number 0 1 96 237
////////////////////////////////////////////////////////////////////
//     Function: store_block_number
//       Access: Public
//  Description: Store a block and zone
////////////////////////////////////////////////////////////////////
90
void DNAStorage::store_block_number(std::string const &block, std::string const &zone_id);

460 24 store_block_door_pos_hpr 0 4 732 36 DNAStorage::store_block_door_pos_hpr 0 1 97 243
////////////////////////////////////////////////////////////////////
//     Function: store_block_door_pos_hpr
//       Access: Public
//  Description: Store a block and zone
////////////////////////////////////////////////////////////////////
110
void DNAStorage::store_block_door_pos_hpr(std::string const &block, LPoint3f const &pos, LPoint3f const &hpr);

461 26 store_block_sign_transform 0 4 732 38 DNAStorage::store_block_sign_transform 0 1 98 245
////////////////////////////////////////////////////////////////////
//     Function: store_block_sign_transform
//       Access: Public
//  Description: Store a block and zone
////////////////////////////////////////////////////////////////////
92
void DNAStorage::store_block_sign_transform(std::string const &block, LMatrix4f const &mat);

462 17 store_block_title 0 4 732 29 DNAStorage::store_block_title 0 1 99 236
////////////////////////////////////////////////////////////////////
//     Function: store_block_title
//       Access: Public
//  Description: Store a block and zone
////////////////////////////////////////////////////////////////////
87
void DNAStorage::store_block_title(std::string const &block, std::string const &title);

463 19 store_block_article 0 4 732 31 DNAStorage::store_block_article 0 1 100 238
////////////////////////////////////////////////////////////////////
//     Function: store_block_article
//       Access: Public
//  Description: Store a block and zone
////////////////////////////////////////////////////////////////////
91
void DNAStorage::store_block_article(std::string const &block, std::string const &article);

464 17 store_battle_cell 0 4 732 29 DNAStorage::store_battle_cell 0 1 101 259
////////////////////////////////////////////////////////////////////
//     Function: store_battle_cell
//       Access: Public
//  Description: Store a battle cell in the battle cell vector
////////////////////////////////////////////////////////////////////
64
void DNAStorage::store_battle_cell(PointerTo< DNABattleCell > );

465 18 remove_battle_cell 0 4 732 30 DNAStorage::remove_battle_cell 0 1 102 263
////////////////////////////////////////////////////////////////////
//     Function: remove_battle_cell
//       Access: Public
//  Description: Remove a battle cell from the battle cell vector
////////////////////////////////////////////////////////////////////
64
int DNAStorage::remove_battle_cell(PointerTo< DNABattleCell > );

466 15 store_suit_edge 0 4 732 27 DNAStorage::store_suit_edge 0 2 103 104 716
////////////////////////////////////////////////////////////////////
//     Function: store_suit_edge
//       Access: Public
//  Description: Store a suit edge represented by the start and end
//               indexes in the suit start point map. These indexes
//               better be stored in the suit_point_vector already
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: store_suit_edge
//       Access: Public
//  Description: Store a suit edge in the suit start point map,
//               listed under the index of the start point
////////////////////////////////////////////////////////////////////
187
PointerTo< DNASuitEdge > DNAStorage::store_suit_edge(int start_index, int end_index, std::string zone_id);
PointerTo< DNASuitEdge > DNAStorage::store_suit_edge(PointerTo< DNASuitEdge > );

467 16 remove_suit_edge 0 4 732 28 DNAStorage::remove_suit_edge 0 1 105 245
////////////////////////////////////////////////////////////////////
//     Function: remove_suit_edge
//       Access: Public
//  Description: Removes a suit edge from the map
////////////////////////////////////////////////////////////////////
60
int DNAStorage::remove_suit_edge(PointerTo< DNASuitEdge > );

468 25 delete_unused_suit_points 0 4 732 37 DNAStorage::delete_unused_suit_points 0 1 106 463
////////////////////////////////////////////////////////////////////
//     Function: delete_unused_suit_points
//       Access: Public
//  Description: Runs through the list of suit points deleting
//               any points that are not on any edges.
//               This is computationally expensive, but it is only run
//               when we save the dna in the editor, not at run time.
////////////////////////////////////////////////////////////////////
48
int DNAStorage::delete_unused_suit_points(void);

469 26 fix_coincident_suit_points 0 4 732 38 DNAStorage::fix_coincident_suit_points 0 1 107 393
////////////////////////////////////////////////////////////////////
//     Function: fix_coincident_suit_points
//       Access: Public
//  Description: Runs through the list of suit points fixing
//               any points that are coincident by deleting the
//               duplicates and patching up the effected edges
////////////////////////////////////////////////////////////////////
49
int DNAStorage::fix_coincident_suit_points(void);

470 11 reset_nodes 0 4 732 23 DNAStorage::reset_nodes 0 1 108 314
// Reset functions

////////////////////////////////////////////////////////////////////
//     Function: reset_nodes
//       Access: Public
//  Description: clear out the map of shared nodes
//               so the ref counter will delete them
////////////////////////////////////////////////////////////////////
42
inline void DNAStorage::reset_nodes(void);

471 14 reset_textures 0 4 732 26 DNAStorage::reset_textures 0 1 109 300
////////////////////////////////////////////////////////////////////
//     Function: reset_textures
//       Access: Public
//  Description: clear out the map of shared textures
//               so the ref counter will delete them
////////////////////////////////////////////////////////////////////
45
inline void DNAStorage::reset_textures(void);

472 10 reset_hood 0 4 732 22 DNAStorage::reset_hood 0 1 110 549
// Reset everything associated with this hood

////////////////////////////////////////////////////////////////////
//     Function: reset_hood
//       Access: Public
//  Description: clear out everything associated with the current hood
//               this is called in Python whenever we leave a hood. It
//               is easier to add things here than to have to keep
//               updating the showcode.
//               Reseting the hood also resets the place nodes.
////////////////////////////////////////////////////////////////////
41
inline void DNAStorage::reset_hood(void);

473 16 reset_hood_nodes 0 4 732 28 DNAStorage::reset_hood_nodes 0 1 111 353
// These all get called by reset hood

////////////////////////////////////////////////////////////////////
//     Function: reset_hood_nodes
//       Access: Public
//  Description: clear out the map of neighborhood specific nodes
//               so the ref counter will delete them
////////////////////////////////////////////////////////////////////
47
inline void DNAStorage::reset_hood_nodes(void);

474 17 reset_place_nodes 0 4 732 29 DNAStorage::reset_place_nodes 0 1 112 314
////////////////////////////////////////////////////////////////////
//     Function: reset_place_nodes
//       Access: Public
//  Description: clear out the map of town and sz specific nodes
//               so the ref counter will delete them
////////////////////////////////////////////////////////////////////
48
inline void DNAStorage::reset_place_nodes(void);

475 17 reset_suit_points 0 4 732 29 DNAStorage::reset_suit_points 0 1 113 256
////////////////////////////////////////////////////////////////////
//     Function: reset_suit_points
//       Access: Public
//  Description: clear out all maps relating to suit points
////////////////////////////////////////////////////////////////////
48
inline void DNAStorage::reset_suit_points(void);

476 18 reset_battle_cells 0 4 732 30 DNAStorage::reset_battle_cells 0 1 114 241
////////////////////////////////////////////////////////////////////
//     Function: reset_battle_cells
//       Access: Public
//  Description: clear out all battle cells
////////////////////////////////////////////////////////////////////
49
inline void DNAStorage::reset_battle_cells(void);

477 19 reset_block_numbers 0 4 732 31 DNAStorage::reset_block_numbers 0 1 115 232
////////////////////////////////////////////////////////////////////
//     Function: reset_block_number
//       Access: Public
//  Description: clear out the map
////////////////////////////////////////////////////////////////////
50
inline void DNAStorage::reset_block_numbers(void);

478 25 reset_block_door_pos_hprs 0 4 732 37 DNAStorage::reset_block_door_pos_hprs 0 1 116 238
////////////////////////////////////////////////////////////////////
//     Function: reset_block_door_pos_hpr
//       Access: Public
//  Description: clear out the map
////////////////////////////////////////////////////////////////////
56
inline void DNAStorage::reset_block_door_pos_hprs(void);

479 27 reset_block_sign_transforms 0 4 732 39 DNAStorage::reset_block_sign_transforms 0 1 117 240
////////////////////////////////////////////////////////////////////
//     Function: reset_block_sign_transform
//       Access: Public
//  Description: clear out the map
////////////////////////////////////////////////////////////////////
58
inline void DNAStorage::reset_block_sign_transforms(void);

480 17 reset_block_title 0 4 732 29 DNAStorage::reset_block_title 0 1 118 231
////////////////////////////////////////////////////////////////////
//     Function: reset_block_title
//       Access: Public
//  Description: clear out the map
////////////////////////////////////////////////////////////////////
48
inline void DNAStorage::reset_block_title(void);

481 19 reset_block_article 0 4 732 31 DNAStorage::reset_block_article 0 1 119 233
////////////////////////////////////////////////////////////////////
//     Function: reset_block_article
//       Access: Public
//  Description: clear out the map
////////////////////////////////////////////////////////////////////
50
inline void DNAStorage::reset_block_article(void);

482 12 find_texture 0 4 732 24 DNAStorage::find_texture 0 1 120 322
// Searching functions

////////////////////////////////////////////////////////////////////
//     Function: find_texture
//       Access: Public
//  Description: A convenient interface if you only know the codes
//               by name, not by number
////////////////////////////////////////////////////////////////////
83
PointerTo< Texture > DNAStorage::find_texture(std::string const &dna_string) const;

483 9 find_node 0 4 732 21 DNAStorage::find_node 0 1 121 295
////////////////////////////////////////////////////////////////////
//     Function: find_node
//       Access: Public
//  Description: A convenient interface if you only know the codes
//               by name, not by number
////////////////////////////////////////////////////////////////////
68
NodePath DNAStorage::find_node(std::string const &dna_string) const;

484 9 find_font 0 4 732 21 DNAStorage::find_font 0 1 122 295
////////////////////////////////////////////////////////////////////
//     Function: find_node
//       Access: Public
//  Description: A convenient interface if you only know the codes
//               by name, not by number
////////////////////////////////////////////////////////////////////
81
PointerTo< TextFont > DNAStorage::find_font(std::string const &dna_string) const;

485 21 get_num_catalog_codes 0 4 732 33 DNAStorage::get_num_catalog_codes 0 1 123 339
// Catalog functions

////////////////////////////////////////////////////////////////////
//     Function: get_num_catalog_codes
//       Access: Public
//  Description: Return the number of entries in this catalog
//               Return -1 if the catalog is not found
////////////////////////////////////////////////////////////////////
79
int DNAStorage::get_num_catalog_codes(std::string const &catalog_string) const;

486 16 get_catalog_code 0 4 732 28 DNAStorage::get_catalog_code 0 1 124 322
////////////////////////////////////////////////////////////////////
//     Function: get_catalog_code
//       Access: Public
//  Description: Return the number of entries in this catalog
//               Return empty string if the catalog is not found
////////////////////////////////////////////////////////////////////
89
std::string DNAStorage::get_catalog_code(std::string const &catalog_string, int i) const;

487 20 store_catalog_string 0 4 732 32 DNAStorage::store_catalog_string 0 1 125 229
////////////////////////////////////////////////////////////////////
//     Function: store_catalog_string
//       Access: Public
//  Description: Add a string
////////////////////////////////////////////////////////////////////
104
void DNAStorage::store_catalog_string(std::string const &catalog_string, std::string const &dna_string);

488 13 print_catalog 0 4 732 25 DNAStorage::print_catalog 0 1 126 227
////////////////////////////////////////////////////////////////////
//     Function: print_catalog
//       Access: Public
//  Description: print the catalog
////////////////////////////////////////////////////////////////////
43
void DNAStorage::print_catalog(void) const;

489 14 store_DNAGroup 0 4 732 26 DNAStorage::store_DNAGroup 0 1 127 275
// DNAGroup functions

////////////////////////////////////////////////////////////////////
//     Function: store_DNAGroup
//       Access: Public
//  Description: store a DNAGroup at the node path pointer
////////////////////////////////////////////////////////////////////
81
void DNAStorage::store_DNAGroup(PointerTo< PandaNode > , PointerTo< DNAGroup > );

490 15 remove_DNAGroup 0 4 732 27 DNAStorage::remove_DNAGroup 0 2 128 129 761
////////////////////////////////////////////////////////////////////
//     Function: remove_DNAGroup
//       Access: Public
//  Description: remove the DNAGroup pointed to by rr from the map
//               It also removes all children of the dnaGroup.
//               Returns the total number of DNAGroups removed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: remove_DNAGroup
//       Access: Public
//  Description: remove the DNAGroup from the map
//               It also removes all children of the dnaGroup.
//               Returns the total number of DNAGroups removed.
////////////////////////////////////////////////////////////////////
114
int DNAStorage::remove_DNAGroup(PointerTo< PandaNode > );
int DNAStorage::remove_DNAGroup(PointerTo< DNAGroup > );

491 13 find_DNAGroup 0 4 732 25 DNAStorage::find_DNAGroup 0 1 130 250
////////////////////////////////////////////////////////////////////
//     Function: find_DNAGroup
//       Access: Public
//  Description: find a DNAGroup at the node path pointer
////////////////////////////////////////////////////////////////////
79
PointerTo< DNAGroup > DNAStorage::find_DNAGroup(PointerTo< PandaNode > ) const;

492 14 find_PandaNode 0 4 732 26 DNAStorage::find_PandaNode 0 1 131 243
////////////////////////////////////////////////////////////////////
//     Function: find_PandaNode
//       Access: Public
//  Description: find a PandaNode at the DNAGroup
////////////////////////////////////////////////////////////////////
80
PointerTo< PandaNode > DNAStorage::find_PandaNode(PointerTo< DNAGroup > ) const;

493 26 get_zone_from_block_number 0 4 732 38 DNAStorage::get_zone_from_block_number 0 1 132 249
// Block number functions

////////////////////////////////////////////////////////////////////
//     Function: get_zone_from_block_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
67
int DNAStorage::get_zone_from_block_number(int block_number) const;

494 19 get_block_number_at 0 4 732 31 DNAStorage::get_block_number_at 0 1 133 232
////////////////////////////////////////////////////////////////////
//     Function: get_block_number_at
//       Access: Public
//  Description: Get key at index
////////////////////////////////////////////////////////////////////
54
int DNAStorage::get_block_number_at(uint index) const;

495 21 get_num_block_numbers 0 4 732 33 DNAStorage::get_num_block_numbers 0 1 134 243
////////////////////////////////////////////////////////////////////
//     Function: get_num_block_number
//       Access: Public
//  Description: Ask how many block numbers
////////////////////////////////////////////////////////////////////
50
int DNAStorage::get_num_block_numbers(void) const;

496 34 get_door_pos_hpr_from_block_number 0 4 732 46 DNAStorage::get_door_pos_hpr_from_block_number 0 1 135 263
// Block door pos hpr functions

////////////////////////////////////////////////////////////////////
//     Function: get_door_pos_hpr_from_block_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
85
PosHpr const &DNAStorage::get_door_pos_hpr_from_block_number(int block_number) const;

497 25 get_door_pos_hpr_block_at 0 4 732 37 DNAStorage::get_door_pos_hpr_block_at 0 1 136 238
////////////////////////////////////////////////////////////////////
//     Function: get_door_pos_hpr_block_at
//       Access: Public
//  Description: Get key at index
////////////////////////////////////////////////////////////////////
60
int DNAStorage::get_door_pos_hpr_block_at(uint index) const;

498 27 get_num_block_door_pos_hprs 0 4 732 39 DNAStorage::get_num_block_door_pos_hprs 0 1 137 250
////////////////////////////////////////////////////////////////////
//     Function: get_num_block_door_pos_hprs
//       Access: Public
//  Description: Ask how many block numbers
////////////////////////////////////////////////////////////////////
56
int DNAStorage::get_num_block_door_pos_hprs(void) const;

499 36 get_sign_transform_from_block_number 0 4 732 48 DNAStorage::get_sign_transform_from_block_number 0 1 138 265
// Block sign pos hpr functions

////////////////////////////////////////////////////////////////////
//     Function: get_sign_transform_from_block_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
90
LMatrix4f const &DNAStorage::get_sign_transform_from_block_number(int block_number) const;

500 27 get_sign_transform_block_at 0 4 732 39 DNAStorage::get_sign_transform_block_at 0 1 139 240
////////////////////////////////////////////////////////////////////
//     Function: get_sign_transform_block_at
//       Access: Public
//  Description: Get key at index
////////////////////////////////////////////////////////////////////
62
int DNAStorage::get_sign_transform_block_at(uint index) const;

501 29 get_num_block_sign_transforms 0 4 732 41 DNAStorage::get_num_block_sign_transforms 0 1 140 252
////////////////////////////////////////////////////////////////////
//     Function: get_num_block_sign_transforms
//       Access: Public
//  Description: Ask how many block numbers
////////////////////////////////////////////////////////////////////
58
int DNAStorage::get_num_block_sign_transforms(void) const;

502 15 reset_DNAGroups 0 4 732 27 DNAStorage::reset_DNAGroups 0 1 141 242
////////////////////////////////////////////////////////////////////
//     Function: reset_DNAGroups
//       Access: Public
//  Description: clear out the map of DNAGroups
////////////////////////////////////////////////////////////////////
46
inline void DNAStorage::reset_DNAGroups(void);

503 27 get_title_from_block_number 0 4 732 39 DNAStorage::get_title_from_block_number 0 1 142 249
// Block title functions

////////////////////////////////////////////////////////////////////
//     Function: get_title_from_block_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
76
std::string DNAStorage::get_title_from_block_number(int block_number) const;

504 18 get_title_block_at 0 4 732 30 DNAStorage::get_title_block_at 0 1 143 231
////////////////////////////////////////////////////////////////////
//     Function: get_title_block_at
//       Access: Public
//  Description: Get key at index
////////////////////////////////////////////////////////////////////
53
int DNAStorage::get_title_block_at(uint index) const;

505 20 get_num_block_titles 0 4 732 32 DNAStorage::get_num_block_titles 0 1 144 243
////////////////////////////////////////////////////////////////////
//     Function: get_num_block_titles
//       Access: Public
//  Description: Ask how many block numbers
////////////////////////////////////////////////////////////////////
49
int DNAStorage::get_num_block_titles(void) const;

506 29 get_article_from_block_number 0 4 732 41 DNAStorage::get_article_from_block_number 0 1 145 253
// Block article functions

////////////////////////////////////////////////////////////////////
//     Function: get_article_from_block_number
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
78
std::string DNAStorage::get_article_from_block_number(int block_number) const;

507 25 store_block_building_type 0 4 732 37 DNAStorage::store_block_building_type 0 1 146 278
// Block building type functions

////////////////////////////////////////////////////////////////////
//     Function: store_block_building_type
//       Access: Public
//  Description: Store a block and zone
////////////////////////////////////////////////////////////////////
94
void DNAStorage::store_block_building_type(std::string const &block, std::string const &type);

508 23 get_block_building_type 0 4 732 35 DNAStorage::get_block_building_type 0 1 147 219
////////////////////////////////////////////////////////////////////
//     Function: get_block_building_type
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
72
std::string DNAStorage::get_block_building_type(int block_number) const;

509 17 store_DNAVisGroup 0 4 732 29 DNAStorage::store_DNAVisGroup 0 1 148 281
// VisGroup functions

////////////////////////////////////////////////////////////////////
//     Function: store_DNAVisGroup
//       Access: Public
//  Description: store a DNAVisGroup at the node path pointer
////////////////////////////////////////////////////////////////////
94
inline void DNAStorage::store_DNAVisGroup(PointerTo< PandaNode > , PointerTo< DNAVisGroup > );

510 18 remove_DNAVisGroup 0 4 732 30 DNAStorage::remove_DNAVisGroup 0 1 149 267
////////////////////////////////////////////////////////////////////
//     Function: remove_DNAVisGroup
//       Access: Public
//  Description: remove the DNAVisGroup pointed to by rr from the map
////////////////////////////////////////////////////////////////////
67
inline int DNAStorage::remove_DNAVisGroup(PointerTo< PandaNode > );

511 16 find_DNAVisGroup 0 4 732 28 DNAStorage::find_DNAVisGroup 0 1 150 256
////////////////////////////////////////////////////////////////////
//     Function: find_DNAVisGroup
//       Access: Public
//  Description: find a DNAVisGroup at the node path pointer
////////////////////////////////////////////////////////////////////
85
PointerTo< DNAVisGroup > DNAStorage::find_DNAVisGroup(PointerTo< PandaNode > ) const;

512 18 reset_DNAVisGroups 0 4 732 30 DNAStorage::reset_DNAVisGroups 0 1 151 248
////////////////////////////////////////////////////////////////////
//     Function: reset_DNAVisGroups
//       Access: Public
//  Description: clear out the map of DNAVisGroups
////////////////////////////////////////////////////////////////////
49
inline void DNAStorage::reset_DNAVisGroups(void);

513 20 get_num_DNAVisGroups 0 4 732 32 DNAStorage::get_num_DNAVisGroups 0 1 152 267
////////////////////////////////////////////////////////////////////
//     Function: get_num_DNAVisGroups
//       Access: Public
//  Description: Ask how many vis groups this dna store knows about
////////////////////////////////////////////////////////////////////
56
inline int DNAStorage::get_num_DNAVisGroups(void) const;

514 15 get_DNAVisGroup 0 4 732 27 DNAStorage::get_DNAVisGroup 0 1 153 251
////////////////////////////////////////////////////////////////////
//     Function: get_DNAVisGroup
//       Access: Public
//  Description: Return the ith vis group in our storage
////////////////////////////////////////////////////////////////////
67
PointerTo< DNAVisGroup > DNAStorage::get_DNAVisGroup(uint i) const;

515 31 get_num_visibles_in_DNAVisGroup 0 4 732 43 DNAStorage::get_num_visibles_in_DNAVisGroup 0 1 154 276
////////////////////////////////////////////////////////////////////
//     Function: get_num_visibles_in_DNAVisGroup
//       Access: Public
//  Description: Ask how many visibles there are in this visgroup
////////////////////////////////////////////////////////////////////
62
int DNAStorage::get_num_visibles_in_DNAVisGroup(uint i) const;

516 20 get_DNAVisGroup_name 0 4 732 32 DNAStorage::get_DNAVisGroup_name 0 1 155 267
////////////////////////////////////////////////////////////////////
//     Function: get_DNAVisGroup_name
//       Access: Public
//  Description: Ask for the name of the nth DNAVisGroup in the map
////////////////////////////////////////////////////////////////////
59
std::string DNAStorage::get_DNAVisGroup_name(uint i) const;

517 16 get_visible_name 0 4 732 28 DNAStorage::get_visible_name 0 1 156 271
////////////////////////////////////////////////////////////////////
//     Function: get_visible_name
//       Access: Public
//  Description: Ask for the name of the nth visible in the nth DNAVisGroup
////////////////////////////////////////////////////////////////////
88
std::string DNAStorage::get_visible_name(uint visgroup_index, uint visible_index) const;

518 19 store_DNAVisGroupAI 0 4 732 31 DNAStorage::store_DNAVisGroupAI 0 1 157 381
// For the AI, he does not traverse but still needs vis groups

////////////////////////////////////////////////////////////////////
//     Function: store_DNAVisGroupAI
//       Access: Public
//  Description: store a DNAVisGroup in a vector so the AI can
//               retrieve it without traversing the DNA
////////////////////////////////////////////////////////////////////
64
void DNAStorage::store_DNAVisGroupAI(PointerTo< DNAVisGroup > );

519 22 get_num_DNAVisGroupsAI 0 4 732 34 DNAStorage::get_num_DNAVisGroupsAI 0 1 158 269
////////////////////////////////////////////////////////////////////
//     Function: get_num_DNAVisGroupsAI
//       Access: Public
//  Description: Ask how many vis groups this dna store knows about
////////////////////////////////////////////////////////////////////
58
inline int DNAStorage::get_num_DNAVisGroupsAI(void) const;

520 17 get_DNAVisGroupAI 0 4 732 29 DNAStorage::get_DNAVisGroupAI 0 1 159 253
////////////////////////////////////////////////////////////////////
//     Function: get_DNAVisGroupAI
//       Access: Public
//  Description: Return the ith vis group in our storage
////////////////////////////////////////////////////////////////////
76
inline PointerTo< DNAVisGroup > DNAStorage::get_DNAVisGroupAI(uint i) const;

521 20 reset_DNAVisGroupsAI 0 4 732 32 DNAStorage::reset_DNAVisGroupsAI 0 1 160 253
////////////////////////////////////////////////////////////////////
//     Function: reset_DNAVisGroupsAI
//       Access: Public
//  Description: clear out the vector of DNAVisGroups
////////////////////////////////////////////////////////////////////
51
inline void DNAStorage::reset_DNAVisGroupsAI(void);

522 18 get_num_PandaNodes 0 4 732 30 DNAStorage::get_num_PandaNodes 0 1 161 284
// Node relation functions

////////////////////////////////////////////////////////////////////
//     Function: get_num_PandaNodes
//       Access: Public
//  Description: how many node paths do we have in our map
////////////////////////////////////////////////////////////////////
54
inline int DNAStorage::get_num_PandaNodes(void) const;

523 16 get_PandaNode_at 0 4 732 28 DNAStorage::get_PandaNode_at 0 1 162 236
////////////////////////////////////////////////////////////////////
//     Function: get_PandaNode_at
//       Access: Public
//  Description: return the ith NodePath
////////////////////////////////////////////////////////////////////
66
PointerTo< PandaNode > DNAStorage::get_PandaNode_at(uint i) const;

524 16 print_PandaNodes 0 4 732 28 DNAStorage::print_PandaNodes 0 1 163 0
46
void DNAStorage::print_PandaNodes(void) const;

525 18 get_suit_edge_zone 0 4 732 30 DNAStorage::get_suit_edge_zone 0 1 164 346
// Suit point functions

////////////////////////////////////////////////////////////////////
//     Function: get_suit_edge_zone
//       Access: Public
//  Description: Ask for the zone that this edge is in
//               Returns -1 if there is no edge between these points
////////////////////////////////////////////////////////////////////
81
std::string DNAStorage::get_suit_edge_zone(int start_index, int end_index) const;

526 25 get_suit_edge_travel_time 0 4 732 37 DNAStorage::get_suit_edge_travel_time 0 1 165 449
////////////////////////////////////////////////////////////////////
//     Function: get_suit_travel_time
//       Access: Public
//  Description: Ask how long in seconds it will take a suit to walk
//               from the start point to the end point if he is
//               walking this constant rate in units/second
//               If there is not connection, return -1.0
////////////////////////////////////////////////////////////////////
94
float DNAStorage::get_suit_edge_travel_time(int start_index, int end_index, float rate) const;

527 19 get_num_suit_points 0 4 732 31 DNAStorage::get_num_suit_points 0 1 166 256
////////////////////////////////////////////////////////////////////
//     Function: get_num_suit_points
//       Access: Public
//  Description: How many suit points are in the map now?
////////////////////////////////////////////////////////////////////
55
inline int DNAStorage::get_num_suit_points(void) const;

528 23 get_suit_point_at_index 0 4 732 35 DNAStorage::get_suit_point_at_index 0 1 167 273
////////////////////////////////////////////////////////////////////
//     Function: get_suit_point_at_index
//       Access: Private
//  Description: Convient way to return the point at index internally
////////////////////////////////////////////////////////////////////
86
inline PointerTo< DNASuitPoint > DNAStorage::get_suit_point_at_index(int index) const;

529 25 get_suit_point_with_index 0 4 732 37 DNAStorage::get_suit_point_with_index 0 1 168 275
////////////////////////////////////////////////////////////////////
//     Function: get_suit_point_with_index
//       Access: Private
//  Description: Convient way to return the point at index internally
////////////////////////////////////////////////////////////////////
88
inline PointerTo< DNASuitPoint > DNAStorage::get_suit_point_with_index(int index) const;

530 13 get_suit_path 0 4 732 25 DNAStorage::get_suit_path 0 1 169 708
////////////////////////////////////////////////////////////////////
//     Function: get_suit_path
//       Access: Public
//  Description: Find a valid path from start to end for a suit to
//               walk on given all the points and edges that are
//               loaded in the current branch
//               To make this easy, the SuitStartPointMap is organized
//               as a map of points to edge lists that that point starts
//               {
//                 start_point1 { edge1 edge2 edge3 }
//                 start_point2 { edge4 edge5 }
//                 start_point3 { edge6 edge7 edge8 }
//               }
////////////////////////////////////////////////////////////////////
153
PointerTo< DNASuitPath > DNAStorage::get_suit_path(DNASuitPoint const *start_point, DNASuitPoint const *end_point, int min_length, int max_length) const;

531 19 get_adjacent_points 0 4 732 31 DNAStorage::get_adjacent_points 0 1 170 432
////////////////////////////////////////////////////////////////////
//     Function: get_adjacent_points
//       Access: Public
//  Description: Returns all of the points adjacent to the indicated
//               point.  The result is returned as a DNASuitPath, even
//               though it's not actually a path; it's just a set of
//               points.
////////////////////////////////////////////////////////////////////
102
PointerTo< DNASuitPath > DNAStorage::get_adjacent_points(PointerTo< DNASuitPoint > start_point) const;

532 19 discover_continuity 0 4 732 31 DNAStorage::discover_continuity 0 1 171 725
////////////////////////////////////////////////////////////////////
//     Function: discover_continuity
//       Access: Public
//  Description: This should be called once the DNA file has been read
//               and the set of suit points is complete.  It walks
//               through the points and discovers which points are
//               connected to each other and which are not.  Each
//               group of suit points that can be reached from each
//               other are assigned a unique graph_id number, which
//               has no other meaning.  The return value is the number
//               of disconnected graphs we have.
////////////////////////////////////////////////////////////////////
42
int DNAStorage::discover_continuity(void);

533 9 get_block 0 4 732 21 DNAStorage::get_block 0 1 172 279
////////////////////////////////////////////////////////////////////
//     Function: get_block
//       Access: Public
//  Description: Get the block number as a string from the building
//               name.
////////////////////////////////////////////////////////////////////
65
std::string DNAStorage::get_block(std::string const &name) const;

534 5 fixup 0 4 732 17 DNAStorage::fixup 0 1 173 302
////////////////////////////////////////////////////////////////////
//     Function: fixup
//       Access: Public
//  Description: Do any processing here before we write the file
//               to cleanup or fixup the dna storage
////////////////////////////////////////////////////////////////////
29
void DNAStorage::fixup(void);

535 5 write 0 4 732 17 DNAStorage::write 0 1 174 315
////////////////////////////////////////////////////////////////////
//     Function: write
//       Access: Public
//  Description: Write out to the dna file whatever the storage
//               feels it needs to. For instance, the suit points.
////////////////////////////////////////////////////////////////////
66
void DNAStorage::write(std::ostream &out, int indent_level) const;

536 11 ~DNAStorage 0 4 732 23 DNAStorage::~DNAStorage 0 0 0
30
DNAStorage::~DNAStorage(void);

537 7 DNANode 0 4 733 16 DNANode::DNANode 0 2 175 176 438
////////////////////////////////////////////////////////////////////
//     Function: DNANode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNANode::CopyConstructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
89
DNANode::DNANode(std::string const &initial_name);
DNANode::DNANode(DNANode const &node);

538 7 set_pos 0 4 733 16 DNANode::set_pos 0 1 177 0
52
inline void DNANode::set_pos(LVecBase3f const &pos);

539 7 get_pos 0 4 733 16 DNANode::get_pos 0 1 178 0
47
inline LVecBase3f DNANode::get_pos(void) const;

540 7 set_hpr 0 4 733 16 DNANode::set_hpr 0 1 179 0
52
inline void DNANode::set_hpr(LVecBase3f const &hpr);

541 7 get_hpr 0 4 733 16 DNANode::get_hpr 0 1 180 0
47
inline LVecBase3f DNANode::get_hpr(void) const;

542 9 set_scale 0 4 733 18 DNANode::set_scale 0 1 181 0
56
inline void DNANode::set_scale(LVecBase3f const &scale);

543 9 get_scale 0 4 733 18 DNANode::get_scale 0 1 182 0
49
inline LVecBase3f DNANode::get_scale(void) const;

544 14 get_class_type 0 4 733 23 DNANode::get_class_type 0 1 183 0
48
static TypeHandle DNANode::get_class_type(void);

545 8 ~DNANode 0 4 733 17 DNANode::~DNANode 0 0 0
24
DNANode::~DNANode(void);

546 7 DNAWall 0 4 734 16 DNAWall::DNAWall 0 2 184 185 439
////////////////////////////////////////////////////////////////////
//     Function: DNAWall::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAWall::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
94
DNAWall::DNAWall(std::string const &initial_name = "");
DNAWall::DNAWall(DNAWall const &wall);

547 8 set_code 0 4 734 17 DNAWall::set_code 0 1 186 213
////////////////////////////////////////////////////////////////////
//     Function: DNAWall::set_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void DNAWall::set_code(std::string code);

548 8 get_code 0 4 734 17 DNAWall::get_code 0 1 187 213
////////////////////////////////////////////////////////////////////
//     Function: DNAWall::get_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline std::string DNAWall::get_code(void) const;

549 10 set_height 0 4 734 19 DNAWall::set_height 0 1 188 215
////////////////////////////////////////////////////////////////////
//     Function: DNAWall::set_height
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void DNAWall::set_height(float height);

550 10 get_height 0 4 734 19 DNAWall::get_height 0 1 189 215
////////////////////////////////////////////////////////////////////
//     Function: DNAWall::get_height
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float DNAWall::get_height(void) const;

551 9 set_color 0 4 734 18 DNAWall::set_color 0 1 190 214
////////////////////////////////////////////////////////////////////
//     Function: DNAWall::set_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void DNAWall::set_color(LColorf const &color);

552 9 get_color 0 4 734 18 DNAWall::get_color 0 1 191 214
////////////////////////////////////////////////////////////////////
//     Function: DNAWall::get_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline LColorf DNAWall::get_color(void) const;

553 14 get_class_type 0 4 734 23 DNAWall::get_class_type 0 1 192 0
48
static TypeHandle DNAWall::get_class_type(void);

554 8 ~DNAWall 0 4 734 17 DNAWall::~DNAWall 0 0 0
24
DNAWall::~DNAWall(void);

555 15 DNAFlatBuilding 0 4 735 32 DNAFlatBuilding::DNAFlatBuilding 0 2 193 194 455
////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
138
DNAFlatBuilding::DNAFlatBuilding(std::string const &initial_name = "");
DNAFlatBuilding::DNAFlatBuilding(DNAFlatBuilding const &building);

556 9 set_width 0 4 735 26 DNAFlatBuilding::set_width 0 1 195 222
////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::set_width
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void DNAFlatBuilding::set_width(float width);

557 9 get_width 0 4 735 26 DNAFlatBuilding::get_width 0 1 196 222
////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::get_width
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline float DNAFlatBuilding::get_width(void) const;

558 23 get_current_wall_height 0 4 735 40 DNAFlatBuilding::get_current_wall_height 0 1 197 236
////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::get_current_wall_height
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float DNAFlatBuilding::get_current_wall_height(void);

559 14 get_class_type 0 4 735 31 DNAFlatBuilding::get_class_type 0 1 198 0
56
static TypeHandle DNAFlatBuilding::get_class_type(void);

560 16 ~DNAFlatBuilding 0 4 735 33 DNAFlatBuilding::~DNAFlatBuilding 0 0 0
40
DNAFlatBuilding::~DNAFlatBuilding(void);

561 19 DNALandmarkBuilding 0 4 736 40 DNALandmarkBuilding::DNALandmarkBuilding 0 2 199 200 463
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
158
DNALandmarkBuilding::DNALandmarkBuilding(std::string const &initial_name = "");
DNALandmarkBuilding::DNALandmarkBuilding(DNALandmarkBuilding const &building);

562 9 set_title 0 4 736 30 DNALandmarkBuilding::set_title 0 1 201 226
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_title
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline void DNALandmarkBuilding::set_title(std::string const &title);

563 9 get_title 0 4 736 30 DNALandmarkBuilding::get_title 0 1 202 226
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_title
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline std::string DNALandmarkBuilding::get_title(void) const;

564 11 set_article 0 4 736 32 DNALandmarkBuilding::set_article 0 1 203 228
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_article
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void DNALandmarkBuilding::set_article(std::string const &article);

565 11 get_article 0 4 736 32 DNALandmarkBuilding::get_article 0 1 204 228
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_article
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
64
inline std::string DNALandmarkBuilding::get_article(void) const;

566 8 set_code 0 4 736 29 DNALandmarkBuilding::set_code 0 1 205 225
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void DNALandmarkBuilding::set_code(std::string code);

567 8 get_code 0 4 736 29 DNALandmarkBuilding::get_code 0 1 206 225
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline std::string DNALandmarkBuilding::get_code(void) const;

568 14 set_wall_color 0 4 736 35 DNALandmarkBuilding::set_wall_color 0 1 207 231
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_wall_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
70
inline void DNALandmarkBuilding::set_wall_color(LColorf const &color);

569 14 get_wall_color 0 4 736 35 DNALandmarkBuilding::get_wall_color 0 1 208 231
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_wall_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LColorf DNALandmarkBuilding::get_wall_color(void) const;

570 17 set_building_type 0 4 736 38 DNALandmarkBuilding::set_building_type 0 1 209 269
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_building_type
//       Access: Public
//  Description: Set the flag for Toon Headquarters
////////////////////////////////////////////////////////////////////
76
inline void DNALandmarkBuilding::set_building_type(std::string const &type);

571 17 get_building_type 0 4 736 38 DNALandmarkBuilding::get_building_type 0 1 210 267
////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_building_type
//       Access: Public
//  Description: Is this a Headquarters building?
////////////////////////////////////////////////////////////////////
70
inline std::string DNALandmarkBuilding::get_building_type(void) const;

572 14 get_class_type 0 4 736 35 DNALandmarkBuilding::get_class_type 0 1 211 0
60
static TypeHandle DNALandmarkBuilding::get_class_type(void);

573 20 ~DNALandmarkBuilding 0 4 736 41 DNALandmarkBuilding::~DNALandmarkBuilding 0 0 0
48
DNALandmarkBuilding::~DNALandmarkBuilding(void);

574 15 DNAAnimBuilding 0 4 737 32 DNAAnimBuilding::DNAAnimBuilding 0 2 212 213 455
////////////////////////////////////////////////////////////////////
//     Function: DNAAnimBuilding::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAAnimBuilding::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
143
DNAAnimBuilding::DNAAnimBuilding(std::string const &initial_name = "");
DNAAnimBuilding::DNAAnimBuilding(DNAAnimBuilding const &anim_building);

575 8 set_anim 0 4 737 25 DNAAnimBuilding::set_anim 0 1 214 221
////////////////////////////////////////////////////////////////////
//     Function: DNAAnimBuilding::set_anim
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void DNAAnimBuilding::set_anim(std::string anim);

576 8 get_anim 0 4 737 25 DNAAnimBuilding::get_anim 0 1 215 221
////////////////////////////////////////////////////////////////////
//     Function: DNAAnimBuilding::get_anim
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline std::string DNAAnimBuilding::get_anim(void) const;

577 14 get_class_type 0 4 737 31 DNAAnimBuilding::get_class_type 0 1 216 0
56
static TypeHandle DNAAnimBuilding::get_class_type(void);

578 16 ~DNAAnimBuilding 0 4 737 33 DNAAnimBuilding::~DNAAnimBuilding 0 0 0
40
DNAAnimBuilding::~DNAAnimBuilding(void);

579 7 DNAProp 0 4 738 16 DNAProp::DNAProp 0 2 217 218 439
////////////////////////////////////////////////////////////////////
//     Function: DNAProp::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAProp::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
94
DNAProp::DNAProp(std::string const &initial_name = "");
DNAProp::DNAProp(DNAProp const &prop);

580 8 set_code 0 4 738 17 DNAProp::set_code 0 1 219 213
////////////////////////////////////////////////////////////////////
//     Function: DNAProp::set_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void DNAProp::set_code(std::string code);

581 8 get_code 0 4 738 17 DNAProp::get_code 0 1 220 213
////////////////////////////////////////////////////////////////////
//     Function: DNAProp::get_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline std::string DNAProp::get_code(void) const;

582 9 set_color 0 4 738 18 DNAProp::set_color 0 1 221 214
////////////////////////////////////////////////////////////////////
//     Function: DNAProp::set_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void DNAProp::set_color(LColorf const &color);

583 9 get_color 0 4 738 18 DNAProp::get_color 0 1 222 214
////////////////////////////////////////////////////////////////////
//     Function: DNAProp::get_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline LColorf DNAProp::get_color(void) const;

584 14 get_class_type 0 4 738 23 DNAProp::get_class_type 0 1 223 0
48
static TypeHandle DNAProp::get_class_type(void);

585 8 ~DNAProp 0 4 738 17 DNAProp::~DNAProp 0 0 0
24
DNAProp::~DNAProp(void);

586 11 DNAAnimProp 0 4 739 24 DNAAnimProp::DNAAnimProp 0 2 224 225 447
////////////////////////////////////////////////////////////////////
//     Function: DNAAnimProp::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAAnimProp::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
DNAAnimProp::DNAAnimProp(std::string const &initial_name = "");
DNAAnimProp::DNAAnimProp(DNAAnimProp const &anim_prop);

587 8 set_anim 0 4 739 21 DNAAnimProp::set_anim 0 1 226 217
////////////////////////////////////////////////////////////////////
//     Function: DNAAnimProp::set_anim
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void DNAAnimProp::set_anim(std::string anim);

588 8 get_anim 0 4 739 21 DNAAnimProp::get_anim 0 1 227 217
////////////////////////////////////////////////////////////////////
//     Function: DNAAnimProp::get_anim
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline std::string DNAAnimProp::get_anim(void) const;

589 14 get_class_type 0 4 739 27 DNAAnimProp::get_class_type 0 1 228 0
52
static TypeHandle DNAAnimProp::get_class_type(void);

590 12 ~DNAAnimProp 0 4 739 25 DNAAnimProp::~DNAAnimProp 0 0 0
32
DNAAnimProp::~DNAAnimProp(void);

591 10 DNACornice 0 4 740 22 DNACornice::DNACornice 0 2 229 230 445
////////////////////////////////////////////////////////////////////
//     Function: DNACornice::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNACornice::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
112
DNACornice::DNACornice(std::string const &initial_name = "");
DNACornice::DNACornice(DNACornice const &cornice);

592 8 set_code 0 4 740 20 DNACornice::set_code 0 1 231 216
////////////////////////////////////////////////////////////////////
//     Function: DNACornice::set_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
void DNACornice::set_code(std::string code);

593 8 get_code 0 4 740 20 DNACornice::get_code 0 1 232 216
////////////////////////////////////////////////////////////////////
//     Function: DNACornice::get_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
std::string DNACornice::get_code(void) const;

594 9 set_color 0 4 740 21 DNACornice::set_color 0 1 233 217
////////////////////////////////////////////////////////////////////
//     Function: DNACornice::set_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
void DNACornice::set_color(LColorf const &color);

595 9 get_color 0 4 740 21 DNACornice::get_color 0 1 234 217
////////////////////////////////////////////////////////////////////
//     Function: DNACornice::get_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
LColorf DNACornice::get_color(void) const;

596 14 get_class_type 0 4 740 26 DNACornice::get_class_type 0 1 235 0
51
static TypeHandle DNACornice::get_class_type(void);

597 11 ~DNACornice 0 4 740 23 DNACornice::~DNACornice 0 0 0
30
DNACornice::~DNACornice(void);

598 7 DNAData 0 4 741 16 DNAData::DNAData 0 2 236 237 439
////////////////////////////////////////////////////////////////////
//     Function: DNAData::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAData::Copy constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
108
inline DNAData::DNAData(std::string const &initial_name = "");
inline DNAData::DNAData(DNAData const &copy);

599 10 operator = 0 4 741 19 DNAData::operator = 0 1 238 229
////////////////////////////////////////////////////////////////////
//     Function: DNAData::Copy assignment operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void DNAData::operator =(DNAData const &copy);

600 4 read 0 4 741 13 DNAData::read 0 4 239 240 241 242 1581
//               error is the output stream to which to write error
//               messages.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the DNA data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAData::read
//       Access: Public
//  Description: Parses the DNA syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid DNA file, false if there were some
//               errors, in which case the data may be partially read.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAData::read
//       Access: Public
//  Description: Parses the DNA syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid DNA file, false if there were some
//               errors, in which case the data may be partially read.
////////////////////////////////////////////////////////////////////
195
bool DNAData::read(Filename filename);
bool DNAData::read(Filename filename, std::ostream &error);
bool DNAData::read(std::istream &in);
bool DNAData::read(std::istream &in, std::ostream &error);

601 20 resolve_dna_filename 0 4 741 29 DNAData::resolve_dna_filename 0 1 243 528
////////////////////////////////////////////////////////////////////
//     Function: DnaData::resolve_dna_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the dna_path and
//               finally along the model_path.  If found, updates the
//               filename to the full path and returns true;
//               otherwise, returns false.
////////////////////////////////////////////////////////////////////
113
static bool DNAData::resolve_dna_filename(Filename &dna_filename, DSearchPath const &searchpath = DSearchPath());

602 17 resolve_externals 0 4 741 26 DNAData::resolve_externals 0 2 244 245 1320
////////////////////////////////////////////////////////////////////
//     Function: DNAData::resolve_externals
//       Access: Public
//  Description: Loads up all the dna files referenced by <File>
//               entries within the dna structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAData::resolve_externals
//       Access: Public
//  Description: Loads up all the dna files referenced by <File>
//               entries within the dna structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
////////////////////////////////////////////////////////////////////
148
bool DNAData::resolve_externals(std::string const &searchpath);
bool DNAData::resolve_externals(std::string const &searchpath, std::ostream &error);

603 9 write_dna 0 4 741 18 DNAData::write_dna 0 2 246 247 532
////////////////////////////////////////////////////////////////////
//     Function: DNAData::write_dna
//       Access: Public
//  Description: The main interface for writing complete dna files.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAData::write_dna
//       Access: Public
//  Description: The main interface for writing complete dna files.
////////////////////////////////////////////////////////////////////
167
bool DNAData::write_dna(Filename filename, std::ostream &error, DNAStorage *store);
bool DNAData::write_dna(std::ostream &out, std::ostream &error, DNAStorage *store);

604 21 set_coordinate_system 0 4 741 30 DNAData::set_coordinate_system 0 1 248 403
////////////////////////////////////////////////////////////////////
//     Function: DNAData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the DNAData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
////////////////////////////////////////////////////////////////////
63
void DNAData::set_coordinate_system(CoordinateSystem coordsys);

605 21 get_coordinate_system 0 4 741 30 DNAData::get_coordinate_system 0 1 249 307
////////////////////////////////////////////////////////////////////
//     Function: DNAData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the dna file
//               is defined.
////////////////////////////////////////////////////////////////////
67
inline CoordinateSystem DNAData::get_coordinate_system(void) const;

606 16 set_dna_filename 0 4 741 25 DNAData::set_dna_filename 0 1 250 361
////////////////////////////////////////////////////////////////////
//     Function: DNAData::set_dna_filename
//       Access: Public
//  Description: Sets the directory in which the dna file is
//               considered to reside.  This is also implicitly set by
//               read().
////////////////////////////////////////////////////////////////////
65
inline void DNAData::set_dna_filename(Filename const &directory);

607 16 get_dna_filename 0 4 741 25 DNAData::get_dna_filename 0 1 251 307
////////////////////////////////////////////////////////////////////
//     Function: DNAData::get_dna_filename
//       Access: Public
//  Description: Returns the directory in which the dna file is
//               considered to reside.
////////////////////////////////////////////////////////////////////
61
inline Filename const &DNAData::get_dna_filename(void) const;

608 15 set_dna_storage 0 4 741 24 DNAData::set_dna_storage 0 1 252 258
////////////////////////////////////////////////////////////////////
//     Function: DNAData::set_dna_storage
//       Access: Public
//  Description: Sets the current dna storage facility
////////////////////////////////////////////////////////////////////
56
inline void DNAData::set_dna_storage(DNAStorage *store);

609 15 get_dna_storage 0 4 741 24 DNAData::get_dna_storage 0 1 253 261
////////////////////////////////////////////////////////////////////
//     Function: DNAData::get_dna_storage
//       Access: Public
//  Description: Returns the current dna storage facility
////////////////////////////////////////////////////////////////////
50
inline DNAStorage *DNAData::get_dna_storage(void);

610 14 get_class_type 0 4 741 23 DNAData::get_class_type 0 1 254 0
48
static TypeHandle DNAData::get_class_type(void);

611 8 ~DNAData 0 4 741 17 DNAData::~DNAData 0 0 0
24
DNAData::~DNAData(void);

612 7 DNADoor 0 4 742 16 DNADoor::DNADoor 0 2 255 256 439
////////////////////////////////////////////////////////////////////
//     Function: DNADoor::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNADoor::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
94
DNADoor::DNADoor(std::string const &initial_name = "");
DNADoor::DNADoor(DNADoor const &door);

613 8 set_code 0 4 742 17 DNADoor::set_code 0 1 257 213
////////////////////////////////////////////////////////////////////
//     Function: DNADoor::set_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
void DNADoor::set_code(std::string code);

614 8 get_code 0 4 742 17 DNADoor::get_code 0 1 258 213
////////////////////////////////////////////////////////////////////
//     Function: DNADoor::get_code
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
std::string DNADoor::get_code(void) const;

615 9 set_color 0 4 742 18 DNADoor::set_color 0 1 259 214
////////////////////////////////////////////////////////////////////
//     Function: DNADoor::set_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
46
void DNADoor::set_color(LColorf const &color);

616 9 get_color 0 4 742 18 DNADoor::get_color 0 1 260 214
////////////////////////////////////////////////////////////////////
//     Function: DNADoor::get_color
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
39
LColorf DNADoor::get_color(void) const;

617 10 setup_door 0 4 742 19 DNADoor::setup_door 0 1 261 0
168
static void DNADoor::setup_door(NodePath &door_node_path, NodePath &parent, NodePath &door_origin, DNAStorage *store, std::string const &block, LVector4f const &color);

618 14 get_class_type 0 4 742 23 DNADoor::get_class_type 0 1 262 0
48
static TypeHandle DNADoor::get_class_type(void);

619 8 ~DNADoor 0 4 742 17 DNADoor::~DNADoor 0 0 0
24
DNADoor::~DNADoor(void);

620 11 DNAFlatDoor 0 4 743 24 DNAFlatDoor::DNAFlatDoor 0 2 263 264 447
////////////////////////////////////////////////////////////////////
//     Function: DNAFlatDoor::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAFlatDoor::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
114
DNAFlatDoor::DNAFlatDoor(std::string const &initial_name = "");
DNAFlatDoor::DNAFlatDoor(DNAFlatDoor const &door);

621 14 get_class_type 0 4 743 27 DNAFlatDoor::get_class_type 0 1 265 0
52
static TypeHandle DNAFlatDoor::get_class_type(void);

622 12 ~DNAFlatDoor 0 4 743 25 DNAFlatDoor::~DNAFlatDoor 0 0 0
32
DNAFlatDoor::~DNAFlatDoor(void);

623 18 DNAInteractiveProp 0 4 744 38 DNAInteractiveProp::DNAInteractiveProp 0 2 266 267 461
////////////////////////////////////////////////////////////////////
//     Function: DNAInteractiveProp::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAInteractiveProp::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
161
DNAInteractiveProp::DNAInteractiveProp(std::string const &initial_name = "");
DNAInteractiveProp::DNAInteractiveProp(DNAInteractiveProp const &interactive_prop);

624 11 set_cell_id 0 4 744 31 DNAInteractiveProp::set_cell_id 0 1 268 227
////////////////////////////////////////////////////////////////////
//     Function: DNAInteractiveProp::set_cell_id
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void DNAInteractiveProp::set_cell_id(int cell_id);

625 11 get_cell_id 0 4 744 31 DNAInteractiveProp::get_cell_id 0 1 269 227
////////////////////////////////////////////////////////////////////
//     Function: DNAInteractiveProp::get_cell_id
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline int DNAInteractiveProp::get_cell_id(void) const;

626 14 get_class_type 0 4 744 34 DNAInteractiveProp::get_class_type 0 1 270 0
59
static TypeHandle DNAInteractiveProp::get_class_type(void);

627 19 ~DNAInteractiveProp 0 4 744 39 DNAInteractiveProp::~DNAInteractiveProp 0 0 0
46
DNAInteractiveProp::~DNAInteractiveProp(void);

628 9 DNALoader 0 4 745 20 DNALoader::DNALoader 0 2 271 272 218
////////////////////////////////////////////////////////////////////
//     Function: DNALoader::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
85
DNALoader::DNALoader(void);
inline DNALoader::DNALoader(DNALoader const &) = default;

629 11 build_graph 0 4 745 22 DNALoader::build_graph 0 1 273 218
////////////////////////////////////////////////////////////////////
//     Function: DNALoader::build_graph
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
86
PointerTo< PandaNode > DNALoader::build_graph(DNAStorage *dna_store, int editing = 0);

630 8 get_data 0 4 745 19 DNALoader::get_data 0 1 274 0
47
PointerTo< DNAData > DNALoader::get_data(void);

631 12 get_top_node 0 20 745 23 DNALoader::get_top_node 0 0 55
getter for PointerTo< PandaNode > DNALoader::_top_node;
66
PointerTo< PandaNode > const &DNALoader::get_top_node(void) const;

632 8 get_root 0 20 745 19 DNALoader::get_root 0 0 37
getter for NodePath DNALoader::_root;
48
NodePath const &DNALoader::get_root(void) const;

633 10 ~DNALoader 0 4 745 21 DNALoader::~DNALoader 0 0 0
28
DNALoader::~DNALoader(void);

634 10 DNAWindows 0 4 749 22 DNAWindows::DNAWindows 0 2 275 276 445
////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
111
DNAWindows::DNAWindows(std::string const &initial_name = "");
DNAWindows::DNAWindows(DNAWindows const &window);

635 8 set_code 0 4 749 20 DNAWindows::set_code 0 1 277 250
////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::set_code
//       Access: Public
//  Description: sets the code of the windows node
////////////////////////////////////////////////////////////////////
51
inline void DNAWindows::set_code(std::string code);

636 8 get_code 0 4 749 20 DNAWindows::get_code 0 1 278 253
////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::get_code
//       Access: Public
//  Description: returns the code of the windows node
////////////////////////////////////////////////////////////////////
52
inline std::string DNAWindows::get_code(void) const;

637 16 set_window_count 0 4 749 28 DNAWindows::set_window_count 0 1 279 251
////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::set_window_count
//       Access: Public
//  Description: sets the number of windows
////////////////////////////////////////////////////////////////////
52
inline void DNAWindows::set_window_count(int count);

638 16 get_window_count 0 4 749 28 DNAWindows::get_window_count 0 1 280 253
////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::get_window_count
//       Access: Public
//  Description: returns the count of windows
////////////////////////////////////////////////////////////////////
52
inline int DNAWindows::get_window_count(void) const;

639 9 set_color 0 4 749 21 DNAWindows::set_color 0 1 281 252
////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::set_color
//       Access: Public
//  Description: sets the color of the windows node
////////////////////////////////////////////////////////////////////
56
inline void DNAWindows::set_color(LColorf const &color);

640 9 get_color 0 4 749 21 DNAWindows::get_color 0 1 282 255
////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::get_color
//       Access: Public
//  Description: returns the color of the windows node
////////////////////////////////////////////////////////////////////
49
inline LColorf DNAWindows::get_color(void) const;

641 14 get_class_type 0 4 749 26 DNAWindows::get_class_type 0 1 283 0
51
static TypeHandle DNAWindows::get_class_type(void);

642 11 ~DNAWindows 0 4 749 23 DNAWindows::~DNAWindows 0 0 0
30
DNAWindows::~DNAWindows(void);

643 9 DNAStreet 0 4 750 20 DNAStreet::DNAStreet 0 2 284 285 443
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
101
DNAStreet::DNAStreet(std::string const &initial_name);
DNAStreet::DNAStreet(DNAStreet const &street);

644 8 set_code 0 4 750 19 DNAStreet::set_code 0 1 286 248
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_code
//       Access: Public
//  Description: sets the code of the street node
////////////////////////////////////////////////////////////////////
50
inline void DNAStreet::set_code(std::string code);

645 8 get_code 0 4 750 19 DNAStreet::get_code 0 1 287 251
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_code
//       Access: Public
//  Description: returns the code of the street node
////////////////////////////////////////////////////////////////////
51
inline std::string DNAStreet::get_code(void) const;

646 18 set_street_texture 0 4 750 29 DNAStreet::set_street_texture 0 1 288 261
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_street_texture
//       Access: Public
//  Description: sets the texture of the street node
////////////////////////////////////////////////////////////////////
70
inline void DNAStreet::set_street_texture(std::string street_texture);

647 18 get_street_texture 0 4 750 29 DNAStreet::get_street_texture 0 1 289 264
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_street_texture
//       Access: Public
//  Description: returns the texture of the street node
////////////////////////////////////////////////////////////////////
61
inline std::string DNAStreet::get_street_texture(void) const;

648 20 set_sidewalk_texture 0 4 750 31 DNAStreet::set_sidewalk_texture 0 1 290 265
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_sidewalk_texture
//       Access: Public
//  Description: sets the texture of the sidewalk node
////////////////////////////////////////////////////////////////////
74
inline void DNAStreet::set_sidewalk_texture(std::string sidewalk_texture);

649 20 get_sidewalk_texture 0 4 750 31 DNAStreet::get_sidewalk_texture 0 1 291 268
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_sidewalk_texture
//       Access: Public
//  Description: returns the texture of the sidewalk node
////////////////////////////////////////////////////////////////////
63
inline std::string DNAStreet::get_sidewalk_texture(void) const;

650 16 set_curb_texture 0 4 750 27 DNAStreet::set_curb_texture 0 1 292 257
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_curb_texture
//       Access: Public
//  Description: sets the texture of the curb node
////////////////////////////////////////////////////////////////////
66
inline void DNAStreet::set_curb_texture(std::string curb_texture);

651 16 get_curb_texture 0 4 750 27 DNAStreet::get_curb_texture 0 1 293 260
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_curb_texture
//       Access: Public
//  Description: returns the texture of the curb node
////////////////////////////////////////////////////////////////////
59
inline std::string DNAStreet::get_curb_texture(void) const;

652 16 set_street_color 0 4 750 27 DNAStreet::set_street_color 0 1 294 257
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_street_color
//       Access: Public
//  Description: sets the color of the street node
////////////////////////////////////////////////////////////////////
62
inline void DNAStreet::set_street_color(LColorf const &color);

653 16 get_street_color 0 4 750 27 DNAStreet::get_street_color 0 1 295 260
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_street_color
//       Access: Public
//  Description: returns the color of the street node
////////////////////////////////////////////////////////////////////
55
inline LColorf DNAStreet::get_street_color(void) const;

654 18 set_sidewalk_color 0 4 750 29 DNAStreet::set_sidewalk_color 0 1 296 261
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_sidewalk_color
//       Access: Public
//  Description: sets the color of the sidewalk node
////////////////////////////////////////////////////////////////////
64
inline void DNAStreet::set_sidewalk_color(LColorf const &color);

655 18 get_sidewalk_color 0 4 750 29 DNAStreet::get_sidewalk_color 0 1 297 264
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_sidewalk_color
//       Access: Public
//  Description: returns the color of the sidewalk node
////////////////////////////////////////////////////////////////////
57
inline LColorf DNAStreet::get_sidewalk_color(void) const;

656 14 set_curb_color 0 4 750 25 DNAStreet::set_curb_color 0 1 298 257
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_curb_color
//       Access: Public
//  Description: sets the color of the sidewalk node
////////////////////////////////////////////////////////////////////
60
inline void DNAStreet::set_curb_color(LColorf const &color);

657 14 get_curb_color 0 4 750 25 DNAStreet::get_curb_color 0 1 299 256
////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_curb_color
//       Access: Public
//  Description: returns the color of the curb node
////////////////////////////////////////////////////////////////////
53
inline LColorf DNAStreet::get_curb_color(void) const;

658 14 get_class_type 0 4 750 25 DNAStreet::get_class_type 0 1 300 0
50
static TypeHandle DNAStreet::get_class_type(void);

659 10 ~DNAStreet 0 4 750 21 DNAStreet::~DNAStreet 0 0 0
28
DNAStreet::~DNAStreet(void);

660 7 DNASign 0 4 751 16 DNASign::DNASign 0 2 301 302 439
////////////////////////////////////////////////////////////////////
//     Function: DNASign::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNASign::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
94
DNASign::DNASign(std::string const &initial_name = "");
DNASign::DNASign(DNASign const &Sign);

661 8 set_code 0 4 751 17 DNASign::set_code 0 1 303 0
41
void DNASign::set_code(std::string code);

662 8 get_code 0 4 751 17 DNASign::get_code 0 1 304 0
42
std::string DNASign::get_code(void) const;

663 9 set_color 0 4 751 18 DNASign::set_color 0 1 305 0
46
void DNASign::set_color(LColorf const &color);

664 9 get_color 0 4 751 18 DNASign::get_color 0 1 306 0
39
LColorf DNASign::get_color(void) const;

665 14 get_class_type 0 4 751 23 DNASign::get_class_type 0 1 307 0
48
static TypeHandle DNASign::get_class_type(void);

666 8 ~DNASign 0 4 751 17 DNASign::~DNASign 0 0 0
24
DNASign::~DNASign(void);

667 15 DNASignBaseline 0 4 752 32 DNASignBaseline::DNASignBaseline 0 2 308 309 455
////////////////////////////////////////////////////////////////////
//     Function: DNASignBaseline::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNASignBaseline::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
134
DNASignBaseline::DNASignBaseline(std::string const &initial_name = "");
DNASignBaseline::DNASignBaseline(DNASignBaseline const &Sign);

668 8 set_code 0 4 752 25 DNASignBaseline::set_code 0 1 310 0
56
inline void DNASignBaseline::set_code(std::string code);

669 8 get_code 0 4 752 25 DNASignBaseline::get_code 0 1 311 0
57
inline std::string DNASignBaseline::get_code(void) const;

670 9 set_color 0 4 752 26 DNASignBaseline::set_color 0 1 312 0
61
inline void DNASignBaseline::set_color(LColorf const &color);

671 9 get_color 0 4 752 26 DNASignBaseline::get_color 0 1 313 0
54
inline LColorf DNASignBaseline::get_color(void) const;

672 8 set_font 0 4 752 25 DNASignBaseline::set_font 0 1 314 0
54
inline void DNASignBaseline::set_font(TextFont *font);

673 8 get_font 0 4 752 25 DNASignBaseline::get_font 0 1 315 0
55
inline TextFont *DNASignBaseline::get_font(void) const;

674 10 set_indent 0 4 752 27 DNASignBaseline::set_indent 0 1 316 0
54
inline void DNASignBaseline::set_indent(float indent);

675 10 get_indent 0 4 752 27 DNASignBaseline::get_indent 0 1 317 0
53
inline float DNASignBaseline::get_indent(void) const;

676 8 set_kern 0 4 752 25 DNASignBaseline::set_kern 0 1 318 0
50
inline void DNASignBaseline::set_kern(float kern);

677 8 get_kern 0 4 752 25 DNASignBaseline::get_kern 0 1 319 0
51
inline float DNASignBaseline::get_kern(void) const;

678 16 get_current_kern 0 4 752 33 DNASignBaseline::get_current_kern 0 1 320 0
53
inline float DNASignBaseline::get_current_kern(void);

679 10 set_wiggle 0 4 752 27 DNASignBaseline::set_wiggle 0 1 321 0
54
inline void DNASignBaseline::set_wiggle(float wiggle);

680 10 get_wiggle 0 4 752 27 DNASignBaseline::get_wiggle 0 1 322 0
53
inline float DNASignBaseline::get_wiggle(void) const;

681 18 get_current_wiggle 0 4 752 35 DNASignBaseline::get_current_wiggle 0 1 323 0
55
inline float DNASignBaseline::get_current_wiggle(void);

682 11 set_stumble 0 4 752 28 DNASignBaseline::set_stumble 0 1 324 0
56
inline void DNASignBaseline::set_stumble(float stumble);

683 11 get_stumble 0 4 752 28 DNASignBaseline::get_stumble 0 1 325 0
54
inline float DNASignBaseline::get_stumble(void) const;

684 19 get_current_stumble 0 4 752 36 DNASignBaseline::get_current_stumble 0 1 326 0
56
inline float DNASignBaseline::get_current_stumble(void);

685 9 set_stomp 0 4 752 26 DNASignBaseline::set_stomp 0 1 327 0
52
inline void DNASignBaseline::set_stomp(float stomp);

686 9 get_stomp 0 4 752 26 DNASignBaseline::get_stomp 0 1 328 0
52
inline float DNASignBaseline::get_stomp(void) const;

687 17 get_current_stomp 0 4 752 34 DNASignBaseline::get_current_stomp 0 1 329 0
54
inline float DNASignBaseline::get_current_stomp(void);

688 9 set_width 0 4 752 26 DNASignBaseline::set_width 0 1 330 0
52
inline void DNASignBaseline::set_width(float width);

689 9 get_width 0 4 752 26 DNASignBaseline::get_width 0 1 331 0
52
inline float DNASignBaseline::get_width(void) const;

690 10 set_height 0 4 752 27 DNASignBaseline::set_height 0 1 332 0
54
inline void DNASignBaseline::set_height(float height);

691 10 get_height 0 4 752 27 DNASignBaseline::get_height 0 1 333 0
53
inline float DNASignBaseline::get_height(void) const;

692 9 set_flags 0 4 752 26 DNASignBaseline::set_flags 0 1 334 0
58
inline void DNASignBaseline::set_flags(std::string flags);

693 9 get_flags 0 4 752 26 DNASignBaseline::get_flags 0 1 335 0
58
inline std::string DNASignBaseline::get_flags(void) const;

694 19 isFirstLetterOfWord 0 4 752 36 DNASignBaseline::isFirstLetterOfWord 0 1 336 232
////////////////////////////////////////////////////////////////////
//     Function: DNASignBaseline::isFirstLetterOfWord
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
bool DNASignBaseline::isFirstLetterOfWord(std::string letter);

695 13 reset_counter 0 4 752 30 DNASignBaseline::reset_counter 0 1 337 0
42
void DNASignBaseline::reset_counter(void);

696 11 inc_counter 0 4 752 28 DNASignBaseline::inc_counter 0 1 338 0
40
void DNASignBaseline::inc_counter(void);

697 27 baseline_next_pos_hpr_scale 0 6 752 44 DNASignBaseline::baseline_next_pos_hpr_scale 0 1 339 235
////////////////////////////////////////////////////////////////////
//     Function: DNASignBaseline::baseline_pos_hpr_scale
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
131
virtual void DNASignBaseline::baseline_next_pos_hpr_scale(LVector3f &pos, LVector3f &hpr, LVector3f &scale, LVector3f const &size);

698 14 get_class_type 0 4 752 31 DNASignBaseline::get_class_type 0 1 340 0
56
static TypeHandle DNASignBaseline::get_class_type(void);

699 16 ~DNASignBaseline 0 4 752 33 DNASignBaseline::~DNASignBaseline 0 0 0
40
DNASignBaseline::~DNASignBaseline(void);

700 14 DNASignGraphic 0 4 753 30 DNASignGraphic::DNASignGraphic 0 2 341 342 453
////////////////////////////////////////////////////////////////////
//     Function: DNASignGraphic::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNASignGraphic::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
132
DNASignGraphic::DNASignGraphic(std::string const &initial_name = "");
DNASignGraphic::DNASignGraphic(DNASignGraphic const &graphic);

701 8 set_code 0 4 753 24 DNASignGraphic::set_code 0 1 343 0
48
void DNASignGraphic::set_code(std::string code);

702 8 get_code 0 4 753 24 DNASignGraphic::get_code 0 1 344 0
49
std::string DNASignGraphic::get_code(void) const;

703 9 set_color 0 4 753 25 DNASignGraphic::set_color 0 1 345 0
53
void DNASignGraphic::set_color(LColorf const &color);

704 9 get_color 0 4 753 25 DNASignGraphic::get_color 0 1 346 0
46
LColorf DNASignGraphic::get_color(void) const;

705 9 set_width 0 4 753 25 DNASignGraphic::set_width 0 1 347 0
44
void DNASignGraphic::set_width(float width);

706 9 get_width 0 4 753 25 DNASignGraphic::get_width 0 1 348 0
44
float DNASignGraphic::get_width(void) const;

707 10 set_height 0 4 753 26 DNASignGraphic::set_height 0 1 349 0
46
void DNASignGraphic::set_height(float height);

708 10 get_height 0 4 753 26 DNASignGraphic::get_height 0 1 350 0
45
float DNASignGraphic::get_height(void) const;

709 14 get_class_type 0 4 753 30 DNASignGraphic::get_class_type 0 1 351 0
55
static TypeHandle DNASignGraphic::get_class_type(void);

710 15 ~DNASignGraphic 0 4 753 31 DNASignGraphic::~DNASignGraphic 0 0 0
38
DNASignGraphic::~DNASignGraphic(void);

711 11 DNASignText 0 4 754 24 DNASignText::DNASignText 0 2 352 353 447
////////////////////////////////////////////////////////////////////
//     Function: DNASignText::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DNASignText::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
DNASignText::DNASignText(std::string const &initial_name = "");
DNASignText::DNASignText(DNASignText const &signText);

712 8 set_code 0 4 754 21 DNASignText::set_code 0 1 354 0
52
inline void DNASignText::set_code(std::string code);

713 8 get_code 0 4 754 21 DNASignText::get_code 0 1 355 0
53
inline std::string DNASignText::get_code(void) const;

714 9 set_color 0 4 754 22 DNASignText::set_color 0 1 356 0
57
inline void DNASignText::set_color(LColorf const &color);

715 9 get_color 0 4 754 22 DNASignText::get_color 0 1 357 0
50
inline LColorf DNASignText::get_color(void) const;

716 11 set_letters 0 4 754 24 DNASignText::set_letters 0 1 358 0
58
inline void DNASignText::set_letters(std::string letters);

717 11 get_letters 0 4 754 24 DNASignText::get_letters 0 1 359 0
56
inline std::string DNASignText::get_letters(void) const;

718 14 get_class_type 0 4 754 27 DNASignText::get_class_type 0 1 360 0
52
static TypeHandle DNASignText::get_class_type(void);

719 12 ~DNASignText 0 4 754 25 DNASignText::~DNASignText 0 0 0
32
DNASignText::~DNASignText(void);

720 13 load_DNA_file 0 1 0 13 load_DNA_file 0 1 362 0
142
PointerTo< PandaNode > load_DNA_file(DNAStorage *dna_store, std::string const &filename, CoordinateSystem cs = ::CS_default, int editing = 0);

721 16 load_DNA_file_AI 0 1 0 16 load_DNA_file_AI 0 1 363 0
126
PointerTo< DNAData > load_DNA_file_AI(DNAStorage *dna_store, std::string const &filename, CoordinateSystem cs = ::CS_default);

363
1 0 0 7 9 757 381 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::CopyConstructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 group 1 755  
2 0 0 7 9 757 381 0 217 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
3 0 0 7 10 759 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::traverse
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 757  6 parent 1 759  5 store 1 760  7 editing 1 761  
4 0 0 7 11 759 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::top_level_traverse
//       Access: Public
//  Description: The top level traverse does some special things
//////////////////////////////////////////////////////////////////// 4 4 this 3 757  6 parent 1 759  5 store 1 760  7 editing 1 761  
5 0 0 4 12 762 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::add
//       Access: Public
//  Description: add a DNAGroup to this vector of nodes
//////////////////////////////////////////////////////////////////// 2 4 this 3 757  5 group 1 757  
6 0 0 4 13 762 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::remove
//       Access: Public
//  Description: Remove a group from this vector. Note, this is
//               not really meant for heavy use, since we are using
//               an STL vector which erases in linear time.
//               Should be ok, since removal will be rare.
//////////////////////////////////////////////////////////////////// 2 4 this 3 757  5 group 1 757  
7 0 0 7 14 757 381 0 243 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::at
//       Access: Public
//  Description: Return the nth group in the vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 757  5 index 1 763  
8 0 0 7 15 757 381 0 238 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::current
//       Access: Public
//  Description: return the current group
//////////////////////////////////////////////////////////////////// 1 4 this 3 757  
9 0 0 6 16 761 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::get_num_children
//       Access: Public
//  Description: how many groups do we have under us?
//////////////////////////////////////////////////////////////////// 1 4 this 3 757  
10 0 0 7 17 757 381 0 240 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::get_parent
//       Access: Public
//  Description: Return the parent group
//////////////////////////////////////////////////////////////////// 1 4 this 3 755  
11 0 0 4 18 762 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::write
//       Access: Public
//  Description: Writes the group and all children to output
//////////////////////////////////////////////////////////////////// 4 4 this 3 755  3 out 1 765  5 store 1 760  12 indent_level 1 761  
12 0 0 4 19 762 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: DNAGroup::ls
//       Access: Public
//  Description: Writes the group and all children to cout (for debugging)
//////////////////////////////////////////////////////////////////// 1 4 this 3 755  
13 0 0 7 20 768 0 0 0 0 
14 0 0 7 4 769 0 0 0 1 4 this 3 757  
15 0 0 6 7 770 0 0 0 1 4 this 3 757  
16 0 0 7 24 773 397 0 0 1 6 param0 0 771  
17 0 0 7 24 773 397 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPoint::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 5 index 1 761  4 type 1 726  3 pos 1 774  8 lb_index 1 761  
18 0 0 4 25 762 0 0 0 2 4 this 3 773  5 index 1 761  
19 0 0 6 26 761 0 0 0 1 4 this 3 771  
20 0 0 4 27 762 0 0 0 2 4 this 3 773  4 type 1 726  
21 0 0 6 28 726 0 0 0 1 4 this 3 771  
22 0 0 4 29 762 0 0 0 2 4 this 3 773  3 pos 1 774  
23 0 0 7 30 774 0 0 0 1 4 this 3 771  
24 0 0 4 31 762 0 0 0 2 4 this 3 773  8 graph_id 1 761  
25 0 0 6 32 761 0 0 0 1 4 this 3 771  
26 0 0 4 33 762 0 0 0 2 4 this 3 773  8 lb_index 1 761  
27 0 0 6 34 761 0 0 0 1 4 this 3 771  
28 0 0 6 35 776 0 0 541 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPoint::is_terminal
//       Access: Published
//  Description: Returns true if this point is the sort of point you
//               find at the beginning or end of a suit path (like a
//               FRONT_DOOR_POINT or SIDE_DOOR_POINT), or false if it
//               is something you're more likely to find in the middle
//               of a suit path (like a STREET_POINT).
//////////////////////////////////////////////////////////////////// 1 4 this 3 771  
29 0 0 4 36 762 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPoint::output
//       Access: Public
//  Description: Output all the properties to the stream
//////////////////////////////////////////////////////////////////// 2 4 this 3 771  3 out 1 765  
30 0 0 4 37 762 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPoint::write
//       Access: Public
//  Description: write the suit point back out to the dna
//////////////////////////////////////////////////////////////////// 3 4 this 3 771  3 out 1 765  12 indent_level 1 761  
31 0 0 7 38 768 0 0 0 0 
32 0 0 7 41 779 407 0 0 1 6 param0 0 777  
33 0 0 7 41 779 407 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitEdge::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 11 start_point 1 773  9 end_point 1 773  7 zone_id 1 758  
34 0 0 6 42 776 0 0 0 2 4 this 3 777  5 other 1 777  
35 0 0 7 43 773 397 0 0 1 4 this 3 777  
36 0 0 7 44 773 397 0 0 1 4 this 3 777  
37 0 0 6 45 758 0 0 0 1 4 this 3 777  
38 0 0 4 46 762 0 0 0 2 4 this 3 779  7 zone_id 1 758  
39 0 0 4 47 762 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitEdge::output
//       Access: Public
//  Description: Outputs all the properties to ostream
//////////////////////////////////////////////////////////////////// 2 4 this 3 777  3 out 1 765  
40 0 0 4 48 762 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitEdge::write
//       Access: Public
//  Description: Writes the edge and properties
//////////////////////////////////////////////////////////////////// 4 4 this 3 777  3 out 1 765  5 store 1 760  12 indent_level 1 761  
41 0 0 7 49 768 0 0 0 0 
42 0 0 7 52 782 418 0 0 1 6 param0 0 780  
43 0 0 7 52 782 418 0 222 ////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 5 width 1 783  6 height 1 783  3 pos 1 774  
44 0 0 4 53 762 0 0 68 //////////////////////////////////////////////////////////////////// 3 4 this 3 782  5 width 1 783  6 height 1 783  
45 0 0 6 54 783 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::get_width
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
46 0 0 6 55 783 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::get_height
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 780  
47 0 0 4 56 762 0 0 0 2 4 this 3 782  3 pos 1 774  
48 0 0 7 57 774 0 0 0 1 4 this 3 780  
49 0 0 4 58 762 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::output
//       Access: Public
//  Description: Writes the cell properties to output
//////////////////////////////////////////////////////////////////// 2 4 this 3 780  3 out 1 765  
50 0 0 7 59 759 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::traverse
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 782  6 parent 1 759  5 store 1 760  7 editing 1 761  
51 0 0 4 60 762 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: DNABattleCell::write
//       Access: Public
//  Description: Writes the group and all children to output
//////////////////////////////////////////////////////////////////// 4 4 this 3 780  3 out 1 765  5 store 1 760  12 indent_level 1 761  
52 0 0 7 61 768 0 0 0 0 
53 0 0 7 64 786 433 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::CopyConstructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 group 1 784  
54 0 0 7 64 786 433 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
55 0 0 4 65 762 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::add_visible
//       Access: Public
//  Description: Add a vis group name to this group's list
//////////////////////////////////////////////////////////////////// 2 4 this 3 786  14 vis_group_name 1 758  
56 0 0 6 66 761 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::remove_vis_group
//       Access: Public
//  Description: Remove a vis group name to this group's list
//////////////////////////////////////////////////////////////////// 2 4 this 3 786  14 vis_group_name 1 758  
57 0 0 6 67 761 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_num_visibles
//       Access: Public
//  Description: Ask how many visibles this vis group has
//////////////////////////////////////////////////////////////////// 1 4 this 3 784  
58 0 0 6 68 758 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_visible_name
//       Access: Public
//  Description: Return the string name of the ith visible
//////////////////////////////////////////////////////////////////// 2 4 this 3 784  1 i 1 763  
59 0 0 4 69 762 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::add_suit_edge
//       Access: Public
//  Description: Adds a suit edge to this vis group
//               This is only stored here so we can write it back out
//////////////////////////////////////////////////////////////////// 2 4 this 3 786  4 edge 1 779  
60 0 0 6 70 761 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::remove_suit_edge
//       Access: Public
//  Description: Remove this suit edge
//////////////////////////////////////////////////////////////////// 2 4 this 3 786  4 edge 1 779  
61 0 0 6 71 761 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_num_suit_edges
//       Access: Public
//  Description: Ask how many edges this vis group has
//////////////////////////////////////////////////////////////////// 1 4 this 3 784  
62 0 0 7 72 779 407 0 256 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_suit_edge
//       Access: Public
//  Description: Return the ith edge in the vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 784  1 i 1 763  
63 0 0 4 73 762 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::add_battle_cell
//       Access: Public
//  Description: Adds a battle_cell to this vis group
//               This is only stored here so we can write it back out
//////////////////////////////////////////////////////////////////// 2 4 this 3 786  4 cell 1 782  
64 0 0 6 74 761 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::remove_battle_cell
//       Access: Public
//  Description: Remove this battle cell
//////////////////////////////////////////////////////////////////// 2 4 this 3 786  4 cell 1 782  
65 0 0 6 75 761 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_num_battle_cells
//       Access: Public
//  Description: Ask how many cells this vis group has
//////////////////////////////////////////////////////////////////// 1 4 this 3 784  
66 0 0 7 76 782 418 0 258 ////////////////////////////////////////////////////////////////////
//     Function: DNAVisGroup::get_battle_cell
//       Access: Public
//  Description: Return the ith cell in the vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 784  1 i 1 763  
67 0 0 7 77 768 0 0 0 0 
68 0 0 7 80 787 440 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
69 0 0 7 80 787 440 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 path 1 788  
70 0 0 7 80 787 440 0 305 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::Constructor
//       Access: Public
//  Description: Accepts an integer which indicates the expected
//               length of the path.
//////////////////////////////////////////////////////////////////// 1 14 reserve_length 1 761  
71 0 0 6 81 761 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::get_num_points
//       Access: Public
//  Description: How many points are along this path, including the
//               starting and ending points
//////////////////////////////////////////////////////////////////// 1 4 this 3 788  
72 0 0 4 82 762 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::copy
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 787  4 path 1 788  
73 0 0 6 83 761 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::get_point_index
//       Access: Public
//  Description: Returns the point index at location i. This index
//               can then be looked up in the dna storage to ask
//               properties of the actual point
//////////////////////////////////////////////////////////////////// 2 4 this 3 788  1 i 1 761  
74 0 0 4 84 762 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: DNASuitPath::output
//       Access: Public
//  Description: Output the path to the ostream
//////////////////////////////////////////////////////////////////// 2 4 this 3 788  3 out 1 765  
75 0 0 7 85 768 0 0 0 0 
76 0 0 7 88 792 444 0 0 2 3 pos 1 790  3 hpr 1 790  
77 0 0 7 88 792 444 0 0 1 6 param0 0 793  
78 0 0 6 89 790 0 0 0 1 4 this 3 793  
79 0 0 6 90 790 0 0 0 1 4 this 3 793  
80 0 0 7 93 760 536 0 207 ////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
81 0 0 7 93 760 536 0 0 1 6 param0 0 795  
82 0 0 4 94 762 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: print_node_storage
//       Access: Public
//  Description: Print out the key/pointer pairs
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
83 0 0 4 95 762 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: print_texture_storage
//       Access: Public
//  Description: Print out the key/pointer pairs
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
84 0 0 4 96 762 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: print_font_storage
//       Access: Public
//  Description: Print out the key/pointer pairs
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
85 0 0 4 97 762 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: print_suit_point_storage
//       Access: Public
//  Description: Print out the key/pointer pairs
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
86 0 0 4 98 762 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: print_battle_cell_storage
//       Access: Public
//  Description: Print out the battle cells
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
87 0 0 4 99 762 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: store_texture
//       Access: Public
//  Description: Store a texture pointer in the texture map
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  11 code_string 1 758  7 texture 1 797  
88 0 0 4 100 762 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: store_font
//       Access: Public
//  Description: Store a font pointer in the font map
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  11 code_string 1 758  4 font 1 799  
89 0 0 4 101 762 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: store_node
//       Access: Public
//  Description: Store a node pointer in the node map
//////////////////////////////////////////////////////////////////// 4 4 this 3 760  11 code_string 1 758  4 node 1 759  13 code_category 1 758  
90 0 0 4 102 762 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: store_hood_node
//       Access: Public
//  Description: Store a neighborhood specific node pointer in the
//               hood node map
//////////////////////////////////////////////////////////////////// 4 4 this 3 760  11 code_string 1 758  4 node 1 759  13 code_category 1 758  
91 0 0 4 103 762 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: store_place_node
//       Access: Public
//  Description: Store a neighborhood specific node pointer in the
//               place node map
//////////////////////////////////////////////////////////////////// 4 4 this 3 760  11 code_string 1 758  4 node 1 759  13 code_category 1 758  
92 0 0 7 104 773 397 0 383 ////////////////////////////////////////////////////////////////////
//     Function: store_suit_point
//       Access: Public
//  Description: Store a point in the suit point map. If that pos
//               already exists, return the existing point, otherwise
//               create a new point and store that.
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  4 type 1 726  3 pos 1 774  
93 0 0 6 104 761 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: store_suit_point
//       Access: Public
//  Description: Store a suit point in the suit point map
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 773  
94 0 0 6 105 761 0 0 0 1 4 this 3 760  
95 0 0 6 106 761 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: remove_suit_point
//       Access: Public
//  Description: Remove a suit point from the suit point map
//               Returns the number of points removed (0 or 1)
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 773  
96 0 0 4 107 762 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: store_block_number
//       Access: Public
//  Description: Store a block and zone
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  5 block 1 758  7 zone_id 1 758  
97 0 0 4 108 762 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: store_block_door_pos_hpr
//       Access: Public
//  Description: Store a block and zone
//////////////////////////////////////////////////////////////////// 4 4 this 3 760  5 block 1 758  3 pos 1 790  3 hpr 1 790  
98 0 0 4 109 762 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: store_block_sign_transform
//       Access: Public
//  Description: Store a block and zone
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  5 block 1 758  3 mat 1 801  
99 0 0 4 110 762 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: store_block_title
//       Access: Public
//  Description: Store a block and zone
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  5 block 1 758  5 title 1 758  
100 0 0 4 111 762 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: store_block_article
//       Access: Public
//  Description: Store a block and zone
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  5 block 1 758  7 article 1 758  
101 0 0 4 112 762 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: store_battle_cell
//       Access: Public
//  Description: Store a battle cell in the battle cell vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 782  
102 0 0 6 113 761 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: remove_battle_cell
//       Access: Public
//  Description: Remove a battle cell from the battle cell vector
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 782  
103 0 0 7 114 779 407 0 317 ////////////////////////////////////////////////////////////////////
//     Function: store_suit_edge
//       Access: Public
//  Description: Store a suit edge in the suit start point map,
//               listed under the index of the start point
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 779  
104 0 0 7 114 779 407 0 397 ////////////////////////////////////////////////////////////////////
//     Function: store_suit_edge
//       Access: Public
//  Description: Store a suit edge represented by the start and end
//               indexes in the suit start point map. These indexes
//               better be stored in the suit_point_vector already
//////////////////////////////////////////////////////////////////// 4 4 this 3 760  11 start_index 1 761  9 end_index 1 761  7 zone_id 1 758  
105 0 0 6 115 761 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: remove_suit_edge
//       Access: Public
//  Description: Removes a suit edge from the map
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 779  
106 0 0 6 116 761 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: delete_unused_suit_points
//       Access: Public
//  Description: Runs through the list of suit points deleting
//               any points that are not on any edges.
//               This is computationally expensive, but it is only run
//               when we save the dna in the editor, not at run time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
107 0 0 6 117 761 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: fix_coincident_suit_points
//       Access: Public
//  Description: Runs through the list of suit points fixing
//               any points that are coincident by deleting the
//               duplicates and patching up the effected edges
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
108 0 0 4 118 762 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: reset_nodes
//       Access: Public
//  Description: clear out the map of shared nodes
//               so the ref counter will delete them
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
109 0 0 4 119 762 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: reset_textures
//       Access: Public
//  Description: clear out the map of shared textures
//               so the ref counter will delete them
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
110 0 0 4 120 762 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: reset_hood
//       Access: Public
//  Description: clear out everything associated with the current hood
//               this is called in Python whenever we leave a hood. It
//               is easier to add things here than to have to keep
//               updating the showcode.
//               Reseting the hood also resets the place nodes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
111 0 0 4 121 762 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: reset_hood_nodes
//       Access: Public
//  Description: clear out the map of neighborhood specific nodes
//               so the ref counter will delete them
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
112 0 0 4 122 762 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: reset_place_nodes
//       Access: Public
//  Description: clear out the map of town and sz specific nodes
//               so the ref counter will delete them
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
113 0 0 4 123 762 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: reset_suit_points
//       Access: Public
//  Description: clear out all maps relating to suit points
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
114 0 0 4 124 762 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: reset_battle_cells
//       Access: Public
//  Description: clear out all battle cells
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
115 0 0 4 125 762 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: reset_block_number
//       Access: Public
//  Description: clear out the map
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
116 0 0 4 126 762 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: reset_block_door_pos_hpr
//       Access: Public
//  Description: clear out the map
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
117 0 0 4 127 762 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: reset_block_sign_transform
//       Access: Public
//  Description: clear out the map
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
118 0 0 4 128 762 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: reset_block_title
//       Access: Public
//  Description: clear out the map
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
119 0 0 4 129 762 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: reset_block_article
//       Access: Public
//  Description: clear out the map
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
120 0 0 7 130 797 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: find_texture
//       Access: Public
//  Description: A convenient interface if you only know the codes
//               by name, not by number
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  10 dna_string 1 758  
121 0 0 7 131 759 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: find_node
//       Access: Public
//  Description: A convenient interface if you only know the codes
//               by name, not by number
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  10 dna_string 1 758  
122 0 0 7 132 799 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: find_node
//       Access: Public
//  Description: A convenient interface if you only know the codes
//               by name, not by number
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  10 dna_string 1 758  
123 0 0 6 133 761 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: get_num_catalog_codes
//       Access: Public
//  Description: Return the number of entries in this catalog
//               Return -1 if the catalog is not found
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  14 catalog_string 1 758  
124 0 0 6 134 758 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: get_catalog_code
//       Access: Public
//  Description: Return the number of entries in this catalog
//               Return empty string if the catalog is not found
//////////////////////////////////////////////////////////////////// 3 4 this 3 795  14 catalog_string 1 758  1 i 1 761  
125 0 0 4 135 762 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: store_catalog_string
//       Access: Public
//  Description: Add a string
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  14 catalog_string 1 758  10 dna_string 1 758  
126 0 0 4 136 762 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: print_catalog
//       Access: Public
//  Description: print the catalog
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
127 0 0 4 137 762 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: store_DNAGroup
//       Access: Public
//  Description: store a DNAGroup at the node path pointer
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  6 param0 0 804  6 param1 0 757  
128 0 0 6 138 761 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: remove_DNAGroup
//       Access: Public
//  Description: remove the DNAGroup from the map
//               It also removes all children of the dnaGroup.
//               Returns the total number of DNAGroups removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 757  
129 0 0 6 138 761 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: remove_DNAGroup
//       Access: Public
//  Description: remove the DNAGroup pointed to by rr from the map
//               It also removes all children of the dnaGroup.
//               Returns the total number of DNAGroups removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 804  
130 0 0 7 139 757 381 0 250 ////////////////////////////////////////////////////////////////////
//     Function: find_DNAGroup
//       Access: Public
//  Description: find a DNAGroup at the node path pointer
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  6 param0 0 804  
131 0 0 7 140 804 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: find_PandaNode
//       Access: Public
//  Description: find a PandaNode at the DNAGroup
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  6 param0 0 757  
132 0 0 6 141 761 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: get_zone_from_block_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  12 block_number 1 761  
133 0 0 6 142 761 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: get_block_number_at
//       Access: Public
//  Description: Get key at index
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  5 index 1 763  
134 0 0 6 143 761 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: get_num_block_number
//       Access: Public
//  Description: Ask how many block numbers
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
135 0 0 6 144 793 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: get_door_pos_hpr_from_block_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  12 block_number 1 761  
136 0 0 6 145 761 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: get_door_pos_hpr_block_at
//       Access: Public
//  Description: Get key at index
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  5 index 1 763  
137 0 0 6 146 761 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: get_num_block_door_pos_hprs
//       Access: Public
//  Description: Ask how many block numbers
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
138 0 0 6 147 801 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: get_sign_transform_from_block_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  12 block_number 1 761  
139 0 0 6 148 761 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: get_sign_transform_block_at
//       Access: Public
//  Description: Get key at index
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  5 index 1 763  
140 0 0 6 149 761 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: get_num_block_sign_transforms
//       Access: Public
//  Description: Ask how many block numbers
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
141 0 0 4 150 762 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: reset_DNAGroups
//       Access: Public
//  Description: clear out the map of DNAGroups
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
142 0 0 6 151 758 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: get_title_from_block_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  12 block_number 1 761  
143 0 0 6 152 761 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: get_title_block_at
//       Access: Public
//  Description: Get key at index
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  5 index 1 763  
144 0 0 6 153 761 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: get_num_block_titles
//       Access: Public
//  Description: Ask how many block numbers
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
145 0 0 6 154 758 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: get_article_from_block_number
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  12 block_number 1 761  
146 0 0 4 155 762 0 0 244 ////////////////////////////////////////////////////////////////////
//     Function: store_block_building_type
//       Access: Public
//  Description: Store a block and zone
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  5 block 1 758  4 type 1 758  
147 0 0 6 156 758 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: get_block_building_type
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  12 block_number 1 761  
148 0 0 4 157 762 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: store_DNAVisGroup
//       Access: Public
//  Description: store a DNAVisGroup at the node path pointer
//////////////////////////////////////////////////////////////////// 3 4 this 3 760  6 param0 0 804  6 param1 0 786  
149 0 0 6 158 761 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: remove_DNAVisGroup
//       Access: Public
//  Description: remove the DNAVisGroup pointed to by rr from the map
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 804  
150 0 0 7 159 786 433 0 256 ////////////////////////////////////////////////////////////////////
//     Function: find_DNAVisGroup
//       Access: Public
//  Description: find a DNAVisGroup at the node path pointer
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  6 param0 0 804  
151 0 0 4 160 762 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: reset_DNAVisGroups
//       Access: Public
//  Description: clear out the map of DNAVisGroups
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
152 0 0 6 161 761 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: get_num_DNAVisGroups
//       Access: Public
//  Description: Ask how many vis groups this dna store knows about
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
153 0 0 7 162 786 433 0 251 ////////////////////////////////////////////////////////////////////
//     Function: get_DNAVisGroup
//       Access: Public
//  Description: Return the ith vis group in our storage
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  1 i 1 763  
154 0 0 6 163 761 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: get_num_visibles_in_DNAVisGroup
//       Access: Public
//  Description: Ask how many visibles there are in this visgroup
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  1 i 1 763  
155 0 0 6 164 758 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: get_DNAVisGroup_name
//       Access: Public
//  Description: Ask for the name of the nth DNAVisGroup in the map
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  1 i 1 763  
156 0 0 6 165 758 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: get_visible_name
//       Access: Public
//  Description: Ask for the name of the nth visible in the nth DNAVisGroup
//////////////////////////////////////////////////////////////////// 3 4 this 3 795  14 visgroup_index 1 763  13 visible_index 1 763  
157 0 0 4 166 762 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: store_DNAVisGroupAI
//       Access: Public
//  Description: store a DNAVisGroup in a vector so the AI can
//               retrieve it without traversing the DNA
//////////////////////////////////////////////////////////////////// 2 4 this 3 760  6 param0 0 786  
158 0 0 6 167 761 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: get_num_DNAVisGroupsAI
//       Access: Public
//  Description: Ask how many vis groups this dna store knows about
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
159 0 0 7 168 786 433 0 253 ////////////////////////////////////////////////////////////////////
//     Function: get_DNAVisGroupAI
//       Access: Public
//  Description: Return the ith vis group in our storage
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  1 i 1 763  
160 0 0 4 169 762 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: reset_DNAVisGroupsAI
//       Access: Public
//  Description: clear out the vector of DNAVisGroups
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
161 0 0 6 170 761 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: get_num_PandaNodes
//       Access: Public
//  Description: how many node paths do we have in our map
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
162 0 0 7 171 804 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: get_PandaNode_at
//       Access: Public
//  Description: return the ith NodePath
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  1 i 1 763  
163 0 0 4 172 762 0 0 0 1 4 this 3 795  
164 0 0 6 173 758 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: get_suit_edge_zone
//       Access: Public
//  Description: Ask for the zone that this edge is in
//               Returns -1 if there is no edge between these points
//////////////////////////////////////////////////////////////////// 3 4 this 3 795  11 start_index 1 761  9 end_index 1 761  
165 0 0 6 174 783 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: get_suit_travel_time
//       Access: Public
//  Description: Ask how long in seconds it will take a suit to walk
//               from the start point to the end point if he is
//               walking this constant rate in units/second
//               If there is not connection, return -1.0
//////////////////////////////////////////////////////////////////// 4 4 this 3 795  11 start_index 1 761  9 end_index 1 761  4 rate 1 783  
166 0 0 6 175 761 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: get_num_suit_points
//       Access: Public
//  Description: How many suit points are in the map now?
//////////////////////////////////////////////////////////////////// 1 4 this 3 795  
167 0 0 7 176 773 397 0 273 ////////////////////////////////////////////////////////////////////
//     Function: get_suit_point_at_index
//       Access: Private
//  Description: Convient way to return the point at index internally
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  5 index 1 761  
168 0 0 7 177 773 397 0 275 ////////////////////////////////////////////////////////////////////
//     Function: get_suit_point_with_index
//       Access: Private
//  Description: Convient way to return the point at index internally
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  5 index 1 761  
169 0 0 7 178 787 440 0 708 ////////////////////////////////////////////////////////////////////
//     Function: get_suit_path
//       Access: Public
//  Description: Find a valid path from start to end for a suit to
//               walk on given all the points and edges that are
//               loaded in the current branch
//               To make this easy, the SuitStartPointMap is organized
//               as a map of points to edge lists that that point starts
//               {
//                 start_point1 { edge1 edge2 edge3 }
//                 start_point2 { edge4 edge5 }
//                 start_point3 { edge6 edge7 edge8 }
//               }
//////////////////////////////////////////////////////////////////// 5 4 this 3 795  11 start_point 1 771  9 end_point 1 771  10 min_length 1 761  10 max_length 1 761  
170 0 0 7 179 787 440 0 432 ////////////////////////////////////////////////////////////////////
//     Function: get_adjacent_points
//       Access: Public
//  Description: Returns all of the points adjacent to the indicated
//               point.  The result is returned as a DNASuitPath, even
//               though it's not actually a path; it's just a set of
//               points.
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  11 start_point 1 773  
171 0 0 6 180 761 0 0 725 ////////////////////////////////////////////////////////////////////
//     Function: discover_continuity
//       Access: Public
//  Description: This should be called once the DNA file has been read
//               and the set of suit points is complete.  It walks
//               through the points and discovers which points are
//               connected to each other and which are not.  Each
//               group of suit points that can be reached from each
//               other are assigned a unique graph_id number, which
//               has no other meaning.  The return value is the number
//               of disconnected graphs we have.
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
172 0 0 6 181 758 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: get_block
//       Access: Public
//  Description: Get the block number as a string from the building
//               name.
//////////////////////////////////////////////////////////////////// 2 4 this 3 795  4 name 1 758  
173 0 0 4 182 762 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: fixup
//       Access: Public
//  Description: Do any processing here before we write the file
//               to cleanup or fixup the dna storage
//////////////////////////////////////////////////////////////////// 1 4 this 3 760  
174 0 0 4 183 762 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: write
//       Access: Public
//  Description: Write out to the dna file whatever the storage
//               feels it needs to. For instance, the suit points.
//////////////////////////////////////////////////////////////////// 3 4 this 3 795  3 out 1 765  12 indent_level 1 761  
175 0 0 7 186 808 545 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DNANode::CopyConstructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 node 1 806  
176 0 0 7 186 808 545 0 216 ////////////////////////////////////////////////////////////////////
//     Function: DNANode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
177 0 0 4 187 762 0 0 0 2 4 this 3 808  3 pos 1 809  
178 0 0 7 188 812 0 0 0 1 4 this 3 806  
179 0 0 4 189 762 0 0 0 2 4 this 3 808  3 hpr 1 809  
180 0 0 7 190 812 0 0 0 1 4 this 3 806  
181 0 0 4 191 762 0 0 0 2 4 this 3 808  5 scale 1 809  
182 0 0 7 192 812 0 0 0 1 4 this 3 806  
183 0 0 7 193 768 0 0 0 0 
184 0 0 7 196 815 554 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNAWall::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 wall 1 813  
185 0 0 7 196 815 554 0 216 ////////////////////////////////////////////////////////////////////
//     Function: DNAWall::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
186 0 0 4 197 762 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: DNAWall::set_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 815  4 code 1 758  
187 0 0 6 198 758 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: DNAWall::get_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 813  
188 0 0 4 199 762 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: DNAWall::set_height
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 815  6 height 1 783  
189 0 0 6 200 783 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: DNAWall::get_height
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 813  
190 0 0 4 201 762 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: DNAWall::set_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 815  5 color 1 816  
191 0 0 7 202 820 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: DNAWall::get_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 813  
192 0 0 7 203 768 0 0 0 0 
193 0 0 7 206 823 560 0 229 ////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 building 1 821  
194 0 0 7 206 823 560 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
195 0 0 4 207 762 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::set_width
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 823  5 width 1 783  
196 0 0 6 208 783 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::get_width
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 821  
197 0 0 6 209 783 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: DNAFlatBuilding::get_current_wall_height
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 823  
198 0 0 7 210 768 0 0 0 0 
199 0 0 7 213 826 573 0 233 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 building 1 824  
200 0 0 7 213 826 573 0 228 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
201 0 0 4 214 762 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_title
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 826  5 title 1 758  
202 0 0 6 215 758 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_title
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 824  
203 0 0 4 216 762 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_article
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 826  7 article 1 758  
204 0 0 6 217 758 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_article
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 824  
205 0 0 4 218 762 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 826  4 code 1 758  
206 0 0 6 219 758 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 824  
207 0 0 4 220 762 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_wall_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 826  5 color 1 816  
208 0 0 7 221 820 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_wall_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 824  
209 0 0 4 222 762 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::set_building_type
//       Access: Public
//  Description: Set the flag for Toon Headquarters
//////////////////////////////////////////////////////////////////// 2 4 this 3 826  4 type 1 758  
210 0 0 6 223 758 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: DNALandmarkBuilding::get_building_type
//       Access: Public
//  Description: Is this a Headquarters building?
//////////////////////////////////////////////////////////////////// 1 4 this 3 824  
211 0 0 7 224 768 0 0 0 0 
212 0 0 7 227 829 578 0 229 ////////////////////////////////////////////////////////////////////
//     Function: DNAAnimBuilding::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 13 anim_building 1 827  
213 0 0 7 227 829 578 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DNAAnimBuilding::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
214 0 0 4 228 762 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNAAnimBuilding::set_anim
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 829  4 anim 1 758  
215 0 0 6 229 758 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNAAnimBuilding::get_anim
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 827  
216 0 0 7 230 768 0 0 0 0 
217 0 0 7 233 832 585 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNAProp::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 prop 1 830  
218 0 0 7 233 832 585 0 216 ////////////////////////////////////////////////////////////////////
//     Function: DNAProp::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
219 0 0 4 234 762 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: DNAProp::set_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 832  4 code 1 758  
220 0 0 6 235 758 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: DNAProp::get_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
221 0 0 4 236 762 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: DNAProp::set_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 832  5 color 1 816  
222 0 0 7 237 820 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: DNAProp::get_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 830  
223 0 0 7 238 768 0 0 0 0 
224 0 0 7 241 835 590 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DNAAnimProp::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 9 anim_prop 1 833  
225 0 0 7 241 835 590 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DNAAnimProp::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
226 0 0 4 242 762 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: DNAAnimProp::set_anim
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 835  4 anim 1 758  
227 0 0 6 243 758 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: DNAAnimProp::get_anim
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 833  
228 0 0 7 244 768 0 0 0 0 
229 0 0 7 247 838 597 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DNACornice::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 7 cornice 1 836  
230 0 0 7 247 838 597 0 219 ////////////////////////////////////////////////////////////////////
//     Function: DNACornice::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
231 0 0 4 248 762 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: DNACornice::set_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  4 code 1 758  
232 0 0 6 249 758 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: DNACornice::get_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 836  
233 0 0 4 250 762 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: DNACornice::set_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 838  5 color 1 816  
234 0 0 7 251 820 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: DNACornice::get_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 836  
235 0 0 7 252 768 0 0 0 0 
236 0 0 7 255 841 611 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::Copy constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 839  
237 0 0 7 255 841 611 0 216 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
238 0 0 7 256 841 611 0 229 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::Copy assignment operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  4 copy 1 839  
239 0 0 6 257 776 0 0 486 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::read
//       Access: Public
//  Description: Opens the indicated filename and reads the DNA data
//               contents from it.  Returns true if the file was
//               successfully opened and read, false if there were
//               some errors, in which case the data may be partially
//               read.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  8 filename 1 842  
240 0 0 6 257 776 0 0 163 //               error is the output stream to which to write error
//               messages.
//////////////////////////////////////////////////////////////////// 3 4 this 3 841  8 filename 1 842  5 error 1 765  
241 0 0 6 257 776 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::read
//       Access: Public
//  Description: Parses the DNA syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid DNA file, false if there were some
//               errors, in which case the data may be partially read.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  2 in 1 844  
242 0 0 6 257 776 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::read
//       Access: Public
//  Description: Parses the DNA syntax contained in the indicated
//               input stream.  Returns true if the stream was a
//               completely valid DNA file, false if there were some
//               errors, in which case the data may be partially read.
//////////////////////////////////////////////////////////////////// 3 4 this 3 841  2 in 1 844  5 error 1 765  
243 0 0 6 258 776 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: DnaData::resolve_dna_filename
//       Access: Public, Static
//  Description: Looks for the indicated filename, first along the
//               indicated searchpath, and then along the dna_path and
//               finally along the model_path.  If found, updates the
//               filename to the full path and returns true;
//               otherwise, returns false.
//////////////////////////////////////////////////////////////////// 2 12 dna_filename 1 842  10 searchpath 1 846  
244 0 0 6 259 776 0 0 659 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::resolve_externals
//       Access: Public
//  Description: Loads up all the dna files referenced by <File>
//               entries within the dna structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  10 searchpath 1 758  
245 0 0 6 259 776 0 0 659 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::resolve_externals
//       Access: Public
//  Description: Loads up all the dna files referenced by <File>
//               entries within the dna structure, and inserts their
//               contents in place of the <File> entries.  Searches
//               for files in the searchpath, if not found directly,
//               and writes error messages to the indicated output
//               stream.  Returns true if all externals were loaded
//               successfully, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 841  10 searchpath 1 758  5 error 1 765  
246 0 0 6 260 776 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::write_dna
//       Access: Public
//  Description: The main interface for writing complete dna files.
//////////////////////////////////////////////////////////////////// 4 4 this 3 841  8 filename 1 842  5 error 1 765  5 store 1 760  
247 0 0 6 260 776 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::write_dna
//       Access: Public
//  Description: The main interface for writing complete dna files.
//////////////////////////////////////////////////////////////////// 4 4 this 3 841  3 out 1 765  5 error 1 765  5 store 1 760  
248 0 0 4 261 762 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::set_coordinate_system
//       Access: Public
//  Description: Changes the coordinate system of the DNAData.  If the
//               coordinate system was previously different, this may
//               result in a conversion of the data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  8 coordsys 1 849  
249 0 0 6 262 849 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::get_coordinate_system
//       Access: Public
//  Description: Returns the coordinate system in which the dna file
//               is defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
250 0 0 4 263 762 0 0 361 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::set_dna_filename
//       Access: Public
//  Description: Sets the directory in which the dna file is
//               considered to reside.  This is also implicitly set by
//               read().
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  9 directory 1 850  
251 0 0 6 264 850 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::get_dna_filename
//       Access: Public
//  Description: Returns the directory in which the dna file is
//               considered to reside.
//////////////////////////////////////////////////////////////////// 1 4 this 3 839  
252 0 0 4 265 762 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::set_dna_storage
//       Access: Public
//  Description: Sets the current dna storage facility
//////////////////////////////////////////////////////////////////// 2 4 this 3 841  5 store 1 760  
253 0 0 6 266 760 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DNAData::get_dna_storage
//       Access: Public
//  Description: Returns the current dna storage facility
//////////////////////////////////////////////////////////////////// 1 4 this 3 841  
254 0 0 7 267 768 0 0 0 0 
255 0 0 7 270 854 619 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNADoor::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 door 1 852  
256 0 0 7 270 854 619 0 216 ////////////////////////////////////////////////////////////////////
//     Function: DNADoor::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
257 0 0 4 271 762 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: DNADoor::set_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  4 code 1 758  
258 0 0 6 272 758 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: DNADoor::get_code
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
259 0 0 4 273 762 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: DNADoor::set_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 854  5 color 1 816  
260 0 0 7 274 820 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: DNADoor::get_color
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 852  
261 0 0 4 275 762 0 0 0 6 14 door_node_path 1 759  6 parent 1 759  11 door_origin 1 759  5 store 1 760  5 block 1 758  5 color 1 855  
262 0 0 7 276 768 0 0 0 0 
263 0 0 7 279 860 622 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DNAFlatDoor::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 door 1 858  
264 0 0 7 279 860 622 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DNAFlatDoor::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
265 0 0 7 280 768 0 0 0 0 
266 0 0 7 283 863 627 0 232 ////////////////////////////////////////////////////////////////////
//     Function: DNAInteractiveProp::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 16 interactive_prop 1 861  
267 0 0 7 283 863 627 0 227 ////////////////////////////////////////////////////////////////////
//     Function: DNAInteractiveProp::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
268 0 0 4 284 762 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: DNAInteractiveProp::set_cell_id
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 863  7 cell_id 1 761  
269 0 0 6 285 761 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: DNAInteractiveProp::get_cell_id
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 861  
270 0 0 7 286 768 0 0 0 0 
271 0 0 7 289 864 633 0 218 ////////////////////////////////////////////////////////////////////
//     Function: DNALoader::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
272 0 0 7 289 864 633 0 0 1 6 param0 0 865  
273 0 0 7 290 804 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: DNALoader::build_graph
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 864  9 dna_store 1 760  7 editing 1 761  
274 0 0 7 291 841 611 0 0 1 4 this 3 864  
275 0 0 7 302 869 642 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 window 1 867  
276 0 0 7 302 869 642 0 219 ////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
277 0 0 4 303 762 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::set_code
//       Access: Public
//  Description: sets the code of the windows node
//////////////////////////////////////////////////////////////////// 2 4 this 3 869  4 code 1 758  
278 0 0 6 304 758 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::get_code
//       Access: Public
//  Description: returns the code of the windows node
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
279 0 0 4 305 762 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::set_window_count
//       Access: Public
//  Description: sets the number of windows
//////////////////////////////////////////////////////////////////// 2 4 this 3 869  5 count 1 761  
280 0 0 6 306 761 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::get_window_count
//       Access: Public
//  Description: returns the count of windows
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
281 0 0 4 307 762 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::set_color
//       Access: Public
//  Description: sets the color of the windows node
//////////////////////////////////////////////////////////////////// 2 4 this 3 869  5 color 1 816  
282 0 0 7 308 820 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: DNAWindows::get_color
//       Access: Public
//  Description: returns the color of the windows node
//////////////////////////////////////////////////////////////////// 1 4 this 3 867  
283 0 0 7 309 768 0 0 0 0 
284 0 0 7 312 872 659 0 223 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 street 1 870  
285 0 0 7 312 872 659 0 218 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
286 0 0 4 313 762 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_code
//       Access: Public
//  Description: sets the code of the street node
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  4 code 1 758  
287 0 0 6 314 758 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_code
//       Access: Public
//  Description: returns the code of the street node
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
288 0 0 4 315 762 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_street_texture
//       Access: Public
//  Description: sets the texture of the street node
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  14 street_texture 1 758  
289 0 0 6 316 758 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_street_texture
//       Access: Public
//  Description: returns the texture of the street node
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
290 0 0 4 317 762 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_sidewalk_texture
//       Access: Public
//  Description: sets the texture of the sidewalk node
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  16 sidewalk_texture 1 758  
291 0 0 6 318 758 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_sidewalk_texture
//       Access: Public
//  Description: returns the texture of the sidewalk node
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
292 0 0 4 319 762 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_curb_texture
//       Access: Public
//  Description: sets the texture of the curb node
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  12 curb_texture 1 758  
293 0 0 6 320 758 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_curb_texture
//       Access: Public
//  Description: returns the texture of the curb node
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
294 0 0 4 321 762 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_street_color
//       Access: Public
//  Description: sets the color of the street node
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  5 color 1 816  
295 0 0 7 322 820 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_street_color
//       Access: Public
//  Description: returns the color of the street node
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
296 0 0 4 323 762 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_sidewalk_color
//       Access: Public
//  Description: sets the color of the sidewalk node
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  5 color 1 816  
297 0 0 7 324 820 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_sidewalk_color
//       Access: Public
//  Description: returns the color of the sidewalk node
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
298 0 0 4 325 762 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::set_curb_color
//       Access: Public
//  Description: sets the color of the sidewalk node
//////////////////////////////////////////////////////////////////// 2 4 this 3 872  5 color 1 816  
299 0 0 7 326 820 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: DNAStreet::get_curb_color
//       Access: Public
//  Description: returns the color of the curb node
//////////////////////////////////////////////////////////////////// 1 4 this 3 870  
300 0 0 7 327 768 0 0 0 0 
301 0 0 7 330 875 666 0 221 ////////////////////////////////////////////////////////////////////
//     Function: DNASign::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 Sign 1 873  
302 0 0 7 330 875 666 0 216 ////////////////////////////////////////////////////////////////////
//     Function: DNASign::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
303 0 0 4 331 762 0 0 0 2 4 this 3 875  4 code 1 758  
304 0 0 6 332 758 0 0 0 1 4 this 3 873  
305 0 0 4 333 762 0 0 0 2 4 this 3 875  5 color 1 816  
306 0 0 7 334 820 0 0 0 1 4 this 3 873  
307 0 0 7 335 768 0 0 0 0 
308 0 0 7 338 878 699 0 229 ////////////////////////////////////////////////////////////////////
//     Function: DNASignBaseline::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 Sign 1 876  
309 0 0 7 338 878 699 0 224 ////////////////////////////////////////////////////////////////////
//     Function: DNASignBaseline::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
310 0 0 4 339 762 0 0 0 2 4 this 3 878  4 code 1 758  
311 0 0 6 340 758 0 0 0 1 4 this 3 876  
312 0 0 4 341 762 0 0 0 2 4 this 3 878  5 color 1 816  
313 0 0 7 342 820 0 0 0 1 4 this 3 876  
314 0 0 4 343 762 0 0 0 2 4 this 3 878  4 font 1 799  
315 0 0 7 344 799 0 0 0 1 4 this 3 876  
316 0 0 4 345 762 0 0 0 2 4 this 3 878  6 indent 1 783  
317 0 0 6 346 783 0 0 0 1 4 this 3 876  
318 0 0 4 347 762 0 0 0 2 4 this 3 878  4 kern 1 783  
319 0 0 6 348 783 0 0 0 1 4 this 3 876  
320 0 0 6 349 783 0 0 0 1 4 this 3 878  
321 0 0 4 350 762 0 0 0 2 4 this 3 878  6 wiggle 1 783  
322 0 0 6 351 783 0 0 0 1 4 this 3 876  
323 0 0 6 352 783 0 0 0 1 4 this 3 878  
324 0 0 4 353 762 0 0 0 2 4 this 3 878  7 stumble 1 783  
325 0 0 6 354 783 0 0 0 1 4 this 3 876  
326 0 0 6 355 783 0 0 0 1 4 this 3 878  
327 0 0 4 356 762 0 0 0 2 4 this 3 878  5 stomp 1 783  
328 0 0 6 357 783 0 0 0 1 4 this 3 876  
329 0 0 6 358 783 0 0 0 1 4 this 3 878  
330 0 0 4 359 762 0 0 0 2 4 this 3 878  5 width 1 783  
331 0 0 6 360 783 0 0 0 1 4 this 3 876  
332 0 0 4 361 762 0 0 0 2 4 this 3 878  6 height 1 783  
333 0 0 6 362 783 0 0 0 1 4 this 3 876  
334 0 0 4 363 762 0 0 0 2 4 this 3 878  5 flags 1 758  
335 0 0 6 364 758 0 0 0 1 4 this 3 876  
336 0 0 6 365 776 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: DNASignBaseline::isFirstLetterOfWord
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 878  6 letter 1 758  
337 0 0 4 366 762 0 0 0 1 4 this 3 878  
338 0 0 4 367 762 0 0 0 1 4 this 3 878  
339 0 0 4 368 762 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: DNASignBaseline::baseline_pos_hpr_scale
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 878  3 pos 1 879  3 hpr 1 879  5 scale 1 879  4 size 1 881  
340 0 0 7 369 768 0 0 0 0 
341 0 0 7 372 885 710 0 228 ////////////////////////////////////////////////////////////////////
//     Function: DNASignGraphic::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 7 graphic 1 883  
342 0 0 7 372 885 710 0 223 ////////////////////////////////////////////////////////////////////
//     Function: DNASignGraphic::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
343 0 0 4 373 762 0 0 0 2 4 this 3 885  4 code 1 758  
344 0 0 6 374 758 0 0 0 1 4 this 3 883  
345 0 0 4 375 762 0 0 0 2 4 this 3 885  5 color 1 816  
346 0 0 7 376 820 0 0 0 1 4 this 3 883  
347 0 0 4 377 762 0 0 0 2 4 this 3 885  5 width 1 783  
348 0 0 6 378 783 0 0 0 1 4 this 3 883  
349 0 0 4 379 762 0 0 0 2 4 this 3 885  6 height 1 783  
350 0 0 6 380 783 0 0 0 1 4 this 3 883  
351 0 0 7 381 768 0 0 0 0 
352 0 0 7 384 888 719 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DNASignText::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 signText 1 886  
353 0 0 7 384 888 719 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DNASignText::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 758  
354 0 0 4 385 762 0 0 0 2 4 this 3 888  4 code 1 758  
355 0 0 6 386 758 0 0 0 1 4 this 3 886  
356 0 0 4 387 762 0 0 0 2 4 this 3 888  5 color 1 816  
357 0 0 7 388 820 0 0 0 1 4 this 3 886  
358 0 0 4 389 762 0 0 0 2 4 this 3 888  7 letters 1 758  
359 0 0 6 390 758 0 0 0 1 4 this 3 886  
360 0 0 7 391 768 0 0 0 0 
361 0 0 6 1 889 0 0 0 0 
362 0 0 7 393 804 0 0 0 4 9 dna_store 1 760  8 filename 1 758  2 cs 1 849  7 editing 1 761  
363 0 0 7 394 841 611 0 0 3 9 dna_store 1 760  8 filename 1 758  2 cs 1 849  
170
722 8 DNAGroup 0 141313 8 DNAGroup 8 DNAGroup 0 0 0 1 369 381 0 11 370 371 372 373 374 375 376 377 378 379 380 0 0 2 3 723 365 366 3 724 367 368 0 0 201
////////////////////////////////////////////////////////////////////
//       Class : DNAGroup
// Description : A group of dna nodes
////////////////////////////////////////////////////////////////////

723 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

724 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

725 12 DNASuitPoint 0 141313 12 DNASuitPoint 12 DNASuitPoint 0 0 0 1 382 397 0 14 383 384 385 386 387 388 389 390 391 392 393 394 395 396 0 0 1 0 723 0 0 0 1 726 184
////////////////////////////////////////////////////////////////////
//       Class : DNASuitPoint
// Description :
////////////////////////////////////////////////////////////////////

726 16 DNASuitPointType 0 794624 30 DNASuitPoint::DNASuitPointType 30 DNASuitPoint::DNASuitPointType 725 0 0 0 0 0 0 0 0 0 5 12 STREET_POINT 26 DNASuitPoint::STREET_POINT 0
0 16 FRONT_DOOR_POINT 30 DNASuitPoint::FRONT_DOOR_POINT 0
1 15 SIDE_DOOR_POINT 29 DNASuitPoint::SIDE_DOOR_POINT 0
2 14 COGHQ_IN_POINT 28 DNASuitPoint::COGHQ_IN_POINT 0
3 15 COGHQ_OUT_POINT 29 DNASuitPoint::COGHQ_OUT_POINT 0
4 0 0

727 11 DNASuitEdge 0 141313 11 DNASuitEdge 11 DNASuitEdge 0 0 0 1 398 407 0 8 399 400 401 402 403 404 405 406 0 0 1 0 723 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : DNASuitEdge
// Description :
////////////////////////////////////////////////////////////////////

728 13 DNABattleCell 0 141313 13 DNABattleCell 13 DNABattleCell 0 0 0 1 408 418 0 9 409 410 411 412 413 414 415 416 417 0 0 1 0 723 0 0 0 0 239
////////////////////////////////////////////////////////////////////
//       Class : DNABattleCell
// Description : A representation of an area where a battle may occur.
////////////////////////////////////////////////////////////////////

729 11 DNAVisGroup 0 141313 11 DNAVisGroup 11 DNAVisGroup 0 0 0 1 419 433 0 13 420 421 422 423 424 425 426 427 428 429 430 431 432 0 0 1 0 722 0 0 0 0 451
////////////////////////////////////////////////////////////////////
//       Class : DNAVisGroup
// Description : A group of dna nodes with special visibility info
//               tagged in a vis property. The vis property should list
//               all the other DNAVisGroups (including itself) that
//               should be rendered when the avatar is standing in this group
////////////////////////////////////////////////////////////////////

730 11 DNASuitPath 0 141313 11 DNASuitPath 11 DNASuitPath 0 0 0 1 434 440 0 5 435 436 437 438 439 0 0 1 0 723 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : DNASuitPath
// Description :
////////////////////////////////////////////////////////////////////

731 6 PosHpr 0 140289 6 PosHpr 6 PosHpr 0 0 0 1 441 444 0 2 442 443 0 0 0 0 0 0

732 10 DNAStorage 0 141313 10 DNAStorage 10 DNAStorage 0 0 0 1 445 536 0 90 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 0 0 0 0 0 0

733 7 DNANode 0 141313 7 DNANode 7 DNANode 0 0 0 1 537 545 0 7 538 539 540 541 542 543 544 0 0 1 0 722 0 0 0 0 0

734 7 DNAWall 0 141313 7 DNAWall 7 DNAWall 0 0 0 1 546 554 0 7 547 548 549 550 551 552 553 0 0 1 0 733 0 0 0 0 197
////////////////////////////////////////////////////////////////////
//       Class : DNAWall
// Description : A stackable wall.
////////////////////////////////////////////////////////////////////

735 15 DNAFlatBuilding 0 141313 15 DNAFlatBuilding 15 DNAFlatBuilding 0 0 0 1 555 560 0 4 556 557 558 559 0 0 1 0 733 0 0 0 0 204
////////////////////////////////////////////////////////////////////
//       Class : DNAFlatBuilding
// Description : A flat building.
////////////////////////////////////////////////////////////////////

736 19 DNALandmarkBuilding 0 141313 19 DNALandmarkBuilding 19 DNALandmarkBuilding 0 0 0 1 561 573 0 11 562 563 564 565 566 567 568 569 570 571 572 0 0 1 0 733 0 0 0 0 212
////////////////////////////////////////////////////////////////////
//       Class : DNALandmarkBuilding
// Description : A landmark building.
////////////////////////////////////////////////////////////////////

737 15 DNAAnimBuilding 0 141313 15 DNAAnimBuilding 15 DNAAnimBuilding 0 0 0 1 574 578 0 3 575 576 577 0 0 1 0 736 0 0 0 0 235
////////////////////////////////////////////////////////////////////
//       Class : DNAAnimBuilding
// Description : An animated building like a sneeizing building.
////////////////////////////////////////////////////////////////////

738 7 DNAProp 0 141313 7 DNAProp 7 DNAProp 0 0 0 1 579 585 0 5 580 581 582 583 584 0 0 1 0 733 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : DNAProp
// Description : A prop like a tree or fire hydrant.
////////////////////////////////////////////////////////////////////

739 11 DNAAnimProp 0 141313 11 DNAAnimProp 11 DNAAnimProp 0 0 0 1 586 590 0 3 587 588 589 0 0 1 0 738 0 0 0 0 224
////////////////////////////////////////////////////////////////////
//       Class : DNAAnimProp
// Description : An animated prop like a walking hydrant.
////////////////////////////////////////////////////////////////////

740 10 DNACornice 0 141313 10 DNACornice 10 DNACornice 0 0 0 1 591 597 0 5 592 593 594 595 596 0 0 1 0 722 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : DNACornice
// Description : A cornice at the top of a flat building
////////////////////////////////////////////////////////////////////

741 7 DNAData 0 141313 7 DNAData 7 DNAData 0 0 0 1 598 611 0 12 599 600 601 602 603 604 605 606 607 608 609 610 0 0 1 0 722 0 0 0 0 68
////////////////////////////////////////////////////////////////////

742 7 DNADoor 0 141313 7 DNADoor 7 DNADoor 0 0 0 1 612 619 0 6 613 614 615 616 617 618 0 0 1 0 722 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : DNADoor
// Description : A door
////////////////////////////////////////////////////////////////////

743 11 DNAFlatDoor 0 141313 11 DNAFlatDoor 11 DNAFlatDoor 0 0 0 1 620 622 0 1 621 0 0 1 0 742 0 0 0 0 211
////////////////////////////////////////////////////////////////////
//       Class : DNAFlatDoor
// Description : A door for a flat buildings
////////////////////////////////////////////////////////////////////

744 18 DNAInteractiveProp 0 141313 18 DNAInteractiveProp 18 DNAInteractiveProp 0 0 0 1 623 627 0 3 624 625 626 0 0 1 0 739 0 0 0 0 234
////////////////////////////////////////////////////////////////////
//       Class : DNAInteractiveProp
// Description : An interactive prop like a walking hydrant.
////////////////////////////////////////////////////////////////////

745 9 DNALoader 0 141313 9 DNALoader 9 DNALoader 0 0 0 1 628 633 3 892 893 894 2 629 630 0 0 0 0 0 334
///////////////////////////////////////////////////////////////////
//       Class : DNALoader
// Description : Converts a dna structure, possibly read from a
//               dna file but not necessarily, into a scene graph
//               suitable for rendering.
////////////////////////////////////////////////////////////////////

746 22 PointerTo< PandaNode > 0 2048 22 PointerTo< PandaNode > 22 PointerTo< PandaNode > 0 0 0 0 0 0 0 0 0 0 0 0 0

747 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

748 20 PointerTo< DNAData > 0 2048 20 PointerTo< DNAData > 20 PointerTo< DNAData > 0 0 0 0 0 0 0 0 0 0 0 0 0

749 10 DNAWindows 0 141313 10 DNAWindows 10 DNAWindows 0 0 0 1 634 642 0 7 635 636 637 638 639 640 641 0 0 1 0 722 0 0 0 0 223
////////////////////////////////////////////////////////////////////
//       Class : DNAWindows
// Description : A group of windows with a default layout
////////////////////////////////////////////////////////////////////

750 9 DNAStreet 0 141313 9 DNAStreet 9 DNAStreet 0 0 0 1 643 659 0 15 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 0 0 1 0 733 0 0 0 0 191
////////////////////////////////////////////////////////////////////
//       Class : DNAStreet
// Description : A street.
////////////////////////////////////////////////////////////////////

751 7 DNASign 0 141313 7 DNASign 7 DNASign 0 0 0 1 660 666 0 5 661 662 663 664 665 0 0 1 0 733 0 0 0 0 186
////////////////////////////////////////////////////////////////////
//       Class : DNASign
// Description : A Sign
////////////////////////////////////////////////////////////////////

752 15 DNASignBaseline 0 141313 15 DNASignBaseline 15 DNASignBaseline 0 0 0 1 667 699 0 31 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 0 0 1 0 733 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//   Class : DNASignBaseline
// Description : A Sign
////////////////////////////////////////////////////////////////////

753 14 DNASignGraphic 0 141313 14 DNASignGraphic 14 DNASignGraphic 0 0 0 1 700 710 0 9 701 702 703 704 705 706 707 708 709 0 0 1 0 733 0 0 0 0 192
////////////////////////////////////////////////////////////////////
//   Class : DNASignGraphic
// Description : A graphic
////////////////////////////////////////////////////////////////////

754 11 DNASignText 0 141313 11 DNASignText 11 DNASignText 0 0 0 1 711 719 0 7 712 713 714 715 716 717 718 0 0 1 0 733 0 0 0 0 190
////////////////////////////////////////////////////////////////////
//       Class : DNASignText
// Description : A Sign
////////////////////////////////////////////////////////////////////

755 16 DNAGroup const * 0 8576 16 DNAGroup const * 16 DNAGroup const * 0 0 756 0 0 0 0 0 0 0 0 0 0

756 14 DNAGroup const 0 8832 14 DNAGroup const 14 DNAGroup const 0 0 722 0 0 0 0 0 0 0 0 0 0

757 10 DNAGroup * 0 8576 10 DNAGroup * 10 DNAGroup * 0 0 722 0 0 0 0 0 0 0 0 0 0

758 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

759 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 747 0 0 0 0 0 0 0 0 0 0

760 12 DNAStorage * 0 8576 12 DNAStorage * 12 DNAStorage * 0 0 732 0 0 0 0 0 0 0 0 0 0

761 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

762 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

763 4 uint 0 2105344 4 uint 4 uint 0 0 764 0 0 0 0 0 0 0 0 0 0

764 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

765 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 766 0 0 0 0 0 0 0 0 0 0

766 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

767 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

768 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 767 0 0 0 0 0 0 0 0 0 0

769 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 723 0 0 0 0 0 0 0 0 0 0

770 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 724 0 0 0 0 0 0 0 0 0 0

771 20 DNASuitPoint const * 0 8576 20 DNASuitPoint const * 20 DNASuitPoint const * 0 0 772 0 0 0 0 0 0 0 0 0 0

772 18 DNASuitPoint const 0 8832 18 DNASuitPoint const 18 DNASuitPoint const 0 0 725 0 0 0 0 0 0 0 0 0 0

773 14 DNASuitPoint * 0 8576 14 DNASuitPoint * 14 DNASuitPoint * 0 0 725 0 0 0 0 0 0 0 0 0 0

774 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 775 0 0 0 0 0 0 0 0 0 0

775 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

776 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

777 19 DNASuitEdge const * 0 8576 19 DNASuitEdge const * 19 DNASuitEdge const * 0 0 778 0 0 0 0 0 0 0 0 0 0

778 17 DNASuitEdge const 0 8832 17 DNASuitEdge const 17 DNASuitEdge const 0 0 727 0 0 0 0 0 0 0 0 0 0

779 13 DNASuitEdge * 0 8576 13 DNASuitEdge * 13 DNASuitEdge * 0 0 727 0 0 0 0 0 0 0 0 0 0

780 21 DNABattleCell const * 0 8576 21 DNABattleCell const * 21 DNABattleCell const * 0 0 781 0 0 0 0 0 0 0 0 0 0

781 19 DNABattleCell const 0 8832 19 DNABattleCell const 19 DNABattleCell const 0 0 728 0 0 0 0 0 0 0 0 0 0

782 15 DNABattleCell * 0 8576 15 DNABattleCell * 15 DNABattleCell * 0 0 728 0 0 0 0 0 0 0 0 0 0

783 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

784 19 DNAVisGroup const * 0 8576 19 DNAVisGroup const * 19 DNAVisGroup const * 0 0 785 0 0 0 0 0 0 0 0 0 0

785 17 DNAVisGroup const 0 8832 17 DNAVisGroup const 17 DNAVisGroup const 0 0 729 0 0 0 0 0 0 0 0 0 0

786 13 DNAVisGroup * 0 8576 13 DNAVisGroup * 13 DNAVisGroup * 0 0 729 0 0 0 0 0 0 0 0 0 0

787 13 DNASuitPath * 0 8576 13 DNASuitPath * 13 DNASuitPath * 0 0 730 0 0 0 0 0 0 0 0 0 0

788 19 DNASuitPath const * 0 8576 19 DNASuitPath const * 19 DNASuitPath const * 0 0 789 0 0 0 0 0 0 0 0 0 0

789 17 DNASuitPath const 0 8832 17 DNASuitPath const 17 DNASuitPath const 0 0 730 0 0 0 0 0 0 0 0 0 0

790 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 791 0 0 0 0 0 0 0 0 0 0

791 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 775 0 0 0 0 0 0 0 0 0 0

792 8 PosHpr * 0 8576 8 PosHpr * 8 PosHpr * 0 0 731 0 0 0 0 0 0 0 0 0 0

793 14 PosHpr const * 0 8576 14 PosHpr const * 14 PosHpr const * 0 0 794 0 0 0 0 0 0 0 0 0 0

794 12 PosHpr const 0 8832 12 PosHpr const 12 PosHpr const 0 0 731 0 0 0 0 0 0 0 0 0 0

795 18 DNAStorage const * 0 8576 18 DNAStorage const * 18 DNAStorage const * 0 0 796 0 0 0 0 0 0 0 0 0 0

796 16 DNAStorage const 0 8832 16 DNAStorage const 16 DNAStorage const 0 0 732 0 0 0 0 0 0 0 0 0 0

797 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 798 0 0 0 0 0 0 0 0 0 0

798 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

799 10 TextFont * 0 8576 10 TextFont * 10 TextFont * 0 0 800 0 0 0 0 0 0 0 0 0 0

800 8 TextFont 0 2048 8 TextFont 8 TextFont 0 0 0 0 0 0 0 0 0 0 0 0 252
/**
 * An encapsulation of a font; i.e.  a set of glyphs that may be assembled
 * together by a TextNode to represent a string of text.
 *
 * This is just an abstract interface; see StaticTextFont or DynamicTextFont
 * for an actual implementation.
 */

801 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 802 0 0 0 0 0 0 0 0 0 0

802 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 803 0 0 0 0 0 0 0 0 0 0

803 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

804 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 805 0 0 0 0 0 0 0 0 0 0

805 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

806 15 DNANode const * 0 8576 15 DNANode const * 15 DNANode const * 0 0 807 0 0 0 0 0 0 0 0 0 0

807 13 DNANode const 0 8832 13 DNANode const 13 DNANode const 0 0 733 0 0 0 0 0 0 0 0 0 0

808 9 DNANode * 0 8576 9 DNANode * 9 DNANode * 0 0 733 0 0 0 0 0 0 0 0 0 0

809 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 810 0 0 0 0 0 0 0 0 0 0

810 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 811 0 0 0 0 0 0 0 0 0 0

811 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

812 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 811 0 0 0 0 0 0 0 0 0 0

813 15 DNAWall const * 0 8576 15 DNAWall const * 15 DNAWall const * 0 0 814 0 0 0 0 0 0 0 0 0 0

814 13 DNAWall const 0 8832 13 DNAWall const 13 DNAWall const 0 0 734 0 0 0 0 0 0 0 0 0 0

815 9 DNAWall * 0 8576 9 DNAWall * 9 DNAWall * 0 0 734 0 0 0 0 0 0 0 0 0 0

816 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 817 0 0 0 0 0 0 0 0 0 0

817 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 818 0 0 0 0 0 0 0 0 0 0

818 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 819 0 0 0 0 0 0 0 0 0 0

819 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

820 9 LColorf * 0 8576 9 LColorf * 9 LColorf * 0 0 818 0 0 0 0 0 0 0 0 0 0

821 23 DNAFlatBuilding const * 0 8576 23 DNAFlatBuilding const * 23 DNAFlatBuilding const * 0 0 822 0 0 0 0 0 0 0 0 0 0

822 21 DNAFlatBuilding const 0 8832 21 DNAFlatBuilding const 21 DNAFlatBuilding const 0 0 735 0 0 0 0 0 0 0 0 0 0

823 17 DNAFlatBuilding * 0 8576 17 DNAFlatBuilding * 17 DNAFlatBuilding * 0 0 735 0 0 0 0 0 0 0 0 0 0

824 27 DNALandmarkBuilding const * 0 8576 27 DNALandmarkBuilding const * 27 DNALandmarkBuilding const * 0 0 825 0 0 0 0 0 0 0 0 0 0

825 25 DNALandmarkBuilding const 0 8832 25 DNALandmarkBuilding const 25 DNALandmarkBuilding const 0 0 736 0 0 0 0 0 0 0 0 0 0

826 21 DNALandmarkBuilding * 0 8576 21 DNALandmarkBuilding * 21 DNALandmarkBuilding * 0 0 736 0 0 0 0 0 0 0 0 0 0

827 23 DNAAnimBuilding const * 0 8576 23 DNAAnimBuilding const * 23 DNAAnimBuilding const * 0 0 828 0 0 0 0 0 0 0 0 0 0

828 21 DNAAnimBuilding const 0 8832 21 DNAAnimBuilding const 21 DNAAnimBuilding const 0 0 737 0 0 0 0 0 0 0 0 0 0

829 17 DNAAnimBuilding * 0 8576 17 DNAAnimBuilding * 17 DNAAnimBuilding * 0 0 737 0 0 0 0 0 0 0 0 0 0

830 15 DNAProp const * 0 8576 15 DNAProp const * 15 DNAProp const * 0 0 831 0 0 0 0 0 0 0 0 0 0

831 13 DNAProp const 0 8832 13 DNAProp const 13 DNAProp const 0 0 738 0 0 0 0 0 0 0 0 0 0

832 9 DNAProp * 0 8576 9 DNAProp * 9 DNAProp * 0 0 738 0 0 0 0 0 0 0 0 0 0

833 19 DNAAnimProp const * 0 8576 19 DNAAnimProp const * 19 DNAAnimProp const * 0 0 834 0 0 0 0 0 0 0 0 0 0

834 17 DNAAnimProp const 0 8832 17 DNAAnimProp const 17 DNAAnimProp const 0 0 739 0 0 0 0 0 0 0 0 0 0

835 13 DNAAnimProp * 0 8576 13 DNAAnimProp * 13 DNAAnimProp * 0 0 739 0 0 0 0 0 0 0 0 0 0

836 18 DNACornice const * 0 8576 18 DNACornice const * 18 DNACornice const * 0 0 837 0 0 0 0 0 0 0 0 0 0

837 16 DNACornice const 0 8832 16 DNACornice const 16 DNACornice const 0 0 740 0 0 0 0 0 0 0 0 0 0

838 12 DNACornice * 0 8576 12 DNACornice * 12 DNACornice * 0 0 740 0 0 0 0 0 0 0 0 0 0

839 15 DNAData const * 0 8576 15 DNAData const * 15 DNAData const * 0 0 840 0 0 0 0 0 0 0 0 0 0

840 13 DNAData const 0 8832 13 DNAData const 13 DNAData const 0 0 741 0 0 0 0 0 0 0 0 0 0

841 9 DNAData * 0 8576 9 DNAData * 9 DNAData * 0 0 741 0 0 0 0 0 0 0 0 0 0

842 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 843 0 0 0 0 0 0 0 0 0 0

843 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

844 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 845 0 0 0 0 0 0 0 0 0 0

845 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

846 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 847 0 0 0 0 0 0 0 0 0 0

847 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 848 0 0 0 0 0 0 0 0 0 0

848 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

849 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 210
// The CS_default entry does not refer to a particular coordinate system,
// but rather to the value stored in default_coordinate_system, which in
// turn is loaded from the config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 21
// Z-Up, Right-handed
1 12 CS_yup_right 12 CS_yup_right 21
// Y-Up, Right-handed
2 11 CS_zup_left 11 CS_zup_left 20
// Z-Up, Left-handed
3 11 CS_yup_left 11 CS_yup_left 20
// Y-Up, Left-handed
4 10 CS_invalid 10 CS_invalid 156
// CS_invalid is not a coordinate system at all.  It can be used in user-
// input processing code to indicate a contradictory coordinate system
// request.
5 0 0

850 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 851 0 0 0 0 0 0 0 0 0 0

851 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 843 0 0 0 0 0 0 0 0 0 0

852 15 DNADoor const * 0 8576 15 DNADoor const * 15 DNADoor const * 0 0 853 0 0 0 0 0 0 0 0 0 0

853 13 DNADoor const 0 8832 13 DNADoor const 13 DNADoor const 0 0 742 0 0 0 0 0 0 0 0 0 0

854 9 DNADoor * 0 8576 9 DNADoor * 9 DNADoor * 0 0 742 0 0 0 0 0 0 0 0 0 0

855 17 LVector4f const * 0 8576 17 LVector4f const * 17 LVector4f const * 0 0 856 0 0 0 0 0 0 0 0 0 0

856 15 LVector4f const 0 8832 15 LVector4f const 15 LVector4f const 0 0 857 0 0 0 0 0 0 0 0 0 0

857 9 LVector4f 0 2048 9 LVector4f 9 LVector4f 0 0 0 0 0 0 0 0 0 0 0 0 52
/**
 * This is a four-component vector distance.
 */

858 19 DNAFlatDoor const * 0 8576 19 DNAFlatDoor const * 19 DNAFlatDoor const * 0 0 859 0 0 0 0 0 0 0 0 0 0

859 17 DNAFlatDoor const 0 8832 17 DNAFlatDoor const 17 DNAFlatDoor const 0 0 743 0 0 0 0 0 0 0 0 0 0

860 13 DNAFlatDoor * 0 8576 13 DNAFlatDoor * 13 DNAFlatDoor * 0 0 743 0 0 0 0 0 0 0 0 0 0

861 26 DNAInteractiveProp const * 0 8576 26 DNAInteractiveProp const * 26 DNAInteractiveProp const * 0 0 862 0 0 0 0 0 0 0 0 0 0

862 24 DNAInteractiveProp const 0 8832 24 DNAInteractiveProp const 24 DNAInteractiveProp const 0 0 744 0 0 0 0 0 0 0 0 0 0

863 20 DNAInteractiveProp * 0 8576 20 DNAInteractiveProp * 20 DNAInteractiveProp * 0 0 744 0 0 0 0 0 0 0 0 0 0

864 11 DNALoader * 0 8576 11 DNALoader * 11 DNALoader * 0 0 745 0 0 0 0 0 0 0 0 0 0

865 17 DNALoader const * 0 8576 17 DNALoader const * 17 DNALoader const * 0 0 866 0 0 0 0 0 0 0 0 0 0

866 15 DNALoader const 0 8832 15 DNALoader const 15 DNALoader const 0 0 745 0 0 0 0 0 0 0 0 0 0

867 18 DNAWindows const * 0 8576 18 DNAWindows const * 18 DNAWindows const * 0 0 868 0 0 0 0 0 0 0 0 0 0

868 16 DNAWindows const 0 8832 16 DNAWindows const 16 DNAWindows const 0 0 749 0 0 0 0 0 0 0 0 0 0

869 12 DNAWindows * 0 8576 12 DNAWindows * 12 DNAWindows * 0 0 749 0 0 0 0 0 0 0 0 0 0

870 17 DNAStreet const * 0 8576 17 DNAStreet const * 17 DNAStreet const * 0 0 871 0 0 0 0 0 0 0 0 0 0

871 15 DNAStreet const 0 8832 15 DNAStreet const 15 DNAStreet const 0 0 750 0 0 0 0 0 0 0 0 0 0

872 11 DNAStreet * 0 8576 11 DNAStreet * 11 DNAStreet * 0 0 750 0 0 0 0 0 0 0 0 0 0

873 15 DNASign const * 0 8576 15 DNASign const * 15 DNASign const * 0 0 874 0 0 0 0 0 0 0 0 0 0

874 13 DNASign const 0 8832 13 DNASign const 13 DNASign const 0 0 751 0 0 0 0 0 0 0 0 0 0

875 9 DNASign * 0 8576 9 DNASign * 9 DNASign * 0 0 751 0 0 0 0 0 0 0 0 0 0

876 23 DNASignBaseline const * 0 8576 23 DNASignBaseline const * 23 DNASignBaseline const * 0 0 877 0 0 0 0 0 0 0 0 0 0

877 21 DNASignBaseline const 0 8832 21 DNASignBaseline const 21 DNASignBaseline const 0 0 752 0 0 0 0 0 0 0 0 0 0

878 17 DNASignBaseline * 0 8576 17 DNASignBaseline * 17 DNASignBaseline * 0 0 752 0 0 0 0 0 0 0 0 0 0

879 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 880 0 0 0 0 0 0 0 0 0 0

880 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

881 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 882 0 0 0 0 0 0 0 0 0 0

882 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 880 0 0 0 0 0 0 0 0 0 0

883 22 DNASignGraphic const * 0 8576 22 DNASignGraphic const * 22 DNASignGraphic const * 0 0 884 0 0 0 0 0 0 0 0 0 0

884 20 DNASignGraphic const 0 8832 20 DNASignGraphic const 20 DNASignGraphic const 0 0 753 0 0 0 0 0 0 0 0 0 0

885 16 DNASignGraphic * 0 8576 16 DNASignGraphic * 16 DNASignGraphic * 0 0 753 0 0 0 0 0 0 0 0 0 0

886 19 DNASignText const * 0 8576 19 DNASignText const * 19 DNASignText const * 0 0 887 0 0 0 0 0 0 0 0 0 0

887 17 DNASignText const 0 8832 17 DNASignText const 17 DNASignText const 0 0 754 0 0 0 0 0 0 0 0 0 0

888 13 DNASignText * 0 8576 13 DNASignText * 13 DNASignText * 0 0 754 0 0 0 0 0 0 0 0 0 0

889 32 ConfigVariableSearchPath const * 0 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 890 0 0 0 0 0 0 0 0 0 0

890 30 ConfigVariableSearchPath const 0 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 891 0 0 0 0 0 0 0 0 0 0

891 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

0
3
892 9 _top_node 0 2 746 631 0 0 0 0 0 0 0 20 DNALoader::_top_node 0

893 5 _root 0 2 747 632 0 0 0 0 0 0 0 16 DNALoader::_root 0

894 5 _data 0 0 748 0 0 0 0 0 0 0 0 16 DNALoader::_data 0

0
