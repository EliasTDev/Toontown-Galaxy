1641926092
3 3
12 libp3express 4 vDgf 12 panda3d.core 
687
706 7 is_null 0 4 1397 22 PointerToVoid::is_null 0 1 19 130
/**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */
50
constexpr bool PointerToVoid::is_null(void) const;

707 8 get_hash 0 4 1397 23 PointerToVoid::get_hash 0 1 20 10
/**
 *
 */
55
inline std::size_t PointerToVoid::get_hash(void) const;

708 14 ~PointerToVoid 0 4 1397 29 PointerToVoid::~PointerToVoid 0 0 0
36
PointerToVoid::~PointerToVoid(void);

709 5 clear 0 4 1396 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 17 0
75
inline void PointerToBase< ReferenceCountedVector< double > >::clear(void);

710 6 output 0 4 1396 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 18 0
88
void PointerToBase< ReferenceCountedVector< double > >::output(std::ostream &out) const;

711 19 ~PointerToArrayBase 0 4 1395 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< double >::~PointerToArrayBase(void);

712 11 operator == 0 4 1395 41 PointerToArrayBase< double >::operator == 0 1 15 64
// These are implemented in PointerToVoid, but expose them here.
103
inline bool PointerToArrayBase< double >::operator ==(PointerToArrayBase< double > const &other) const;

713 11 operator != 0 4 1395 41 PointerToArrayBase< double >::operator != 0 1 16 0
103
inline bool PointerToArrayBase< double >::operator !=(PointerToArrayBase< double > const &other) const;

714 19 ConstPointerToArray 0 4 1394 50 ConstPointerToArray< double >::ConstPointerToArray 0 2 1 2 0
198
inline ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);

715 5 clear 0 4 1394 36 ConstPointerToArray< double >::clear 0 1 3 0
55
inline void ConstPointerToArray< double >::clear(void);

716 4 size 0 4 1394 35 ConstPointerToArray< double >::size 0 1 4 0
78
inline unsigned long long int ConstPointerToArray< double >::size(void) const;

717 11 get_element 0 4 1394 42 ConstPointerToArray< double >::get_element 0 1 5 0
96
inline double const &ConstPointerToArray< double >::get_element(unsigned long long int n) const;

718 11 __getitem__ 0 4 1394 42 ConstPointerToArray< double >::__getitem__ 0 1 6 0
89
double const &ConstPointerToArray< double >::__getitem__(unsigned long long int n) const;

719 8 get_data 0 4 1394 39 ConstPointerToArray< double >::get_data 0 1 7 0
62
PyObject *ConstPointerToArray< double >::get_data(void) const;

720 11 get_subdata 0 4 1394 42 ConstPointerToArray< double >::get_subdata 0 1 8 0
115
PyObject *ConstPointerToArray< double >::get_subdata(unsigned long long int n, unsigned long long int count) const;

721 13 get_ref_count 0 4 1394 44 ConstPointerToArray< double >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< double >::get_ref_count(void) const;

722 18 get_node_ref_count 0 4 1394 49 ConstPointerToArray< double >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< double >::get_node_ref_count(void) const;

723 5 count 0 4 1394 36 ConstPointerToArray< double >::count 0 1 11 0
89
inline unsigned long long int ConstPointerToArray< double >::count(double const &) const;

724 10 __reduce__ 0 4 1394 41 ConstPointerToArray< double >::__reduce__ 0 1 12 0
74
PyObject *ConstPointerToArray< double >::__reduce__(PyObject *self) const;

725 13 __getbuffer__ 0 4 1394 44 ConstPointerToArray< double >::__getbuffer__ 0 1 13 0
99
int ConstPointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

726 17 __releasebuffer__ 0 4 1394 48 ConstPointerToArray< double >::__releasebuffer__ 0 1 14 0
93
void ConstPointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

727 20 ~ConstPointerToArray 0 4 1394 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< double >::~ConstPointerToArray(void);

728 5 clear 0 4 1402 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 37 0
74
inline void PointerToBase< ReferenceCountedVector< float > >::clear(void);

729 6 output 0 4 1402 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 38 0
87
void PointerToBase< ReferenceCountedVector< float > >::output(std::ostream &out) const;

730 19 ~PointerToArrayBase 0 4 1401 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
62
inline PointerToArrayBase< float >::~PointerToArrayBase(void);

731 11 operator == 0 4 1401 40 PointerToArrayBase< float >::operator == 0 1 35 64
// These are implemented in PointerToVoid, but expose them here.
101
inline bool PointerToArrayBase< float >::operator ==(PointerToArrayBase< float > const &other) const;

732 11 operator != 0 4 1401 40 PointerToArrayBase< float >::operator != 0 1 36 0
101
inline bool PointerToArrayBase< float >::operator !=(PointerToArrayBase< float > const &other) const;

733 19 ConstPointerToArray 0 4 1400 49 ConstPointerToArray< float >::ConstPointerToArray 0 2 21 22 0
194
inline ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);

734 5 clear 0 4 1400 35 ConstPointerToArray< float >::clear 0 1 23 0
54
inline void ConstPointerToArray< float >::clear(void);

735 4 size 0 4 1400 34 ConstPointerToArray< float >::size 0 1 24 0
77
inline unsigned long long int ConstPointerToArray< float >::size(void) const;

736 11 get_element 0 4 1400 41 ConstPointerToArray< float >::get_element 0 1 25 0
94
inline float const &ConstPointerToArray< float >::get_element(unsigned long long int n) const;

737 11 __getitem__ 0 4 1400 41 ConstPointerToArray< float >::__getitem__ 0 1 26 0
87
float const &ConstPointerToArray< float >::__getitem__(unsigned long long int n) const;

738 8 get_data 0 4 1400 38 ConstPointerToArray< float >::get_data 0 1 27 0
61
PyObject *ConstPointerToArray< float >::get_data(void) const;

739 11 get_subdata 0 4 1400 41 ConstPointerToArray< float >::get_subdata 0 1 28 0
114
PyObject *ConstPointerToArray< float >::get_subdata(unsigned long long int n, unsigned long long int count) const;

740 13 get_ref_count 0 4 1400 43 ConstPointerToArray< float >::get_ref_count 0 1 29 0
67
inline int ConstPointerToArray< float >::get_ref_count(void) const;

741 18 get_node_ref_count 0 4 1400 48 ConstPointerToArray< float >::get_node_ref_count 0 1 30 0
72
inline int ConstPointerToArray< float >::get_node_ref_count(void) const;

742 5 count 0 4 1400 35 ConstPointerToArray< float >::count 0 1 31 0
87
inline unsigned long long int ConstPointerToArray< float >::count(float const &) const;

743 10 __reduce__ 0 4 1400 40 ConstPointerToArray< float >::__reduce__ 0 1 32 0
73
PyObject *ConstPointerToArray< float >::__reduce__(PyObject *self) const;

744 13 __getbuffer__ 0 4 1400 43 ConstPointerToArray< float >::__getbuffer__ 0 1 33 0
98
int ConstPointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

745 17 __releasebuffer__ 0 4 1400 47 ConstPointerToArray< float >::__releasebuffer__ 0 1 34 0
92
void ConstPointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

746 20 ~ConstPointerToArray 0 4 1400 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
57
ConstPointerToArray< float >::~ConstPointerToArray(void);

747 5 clear 0 4 1406 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 55 0
72
inline void PointerToBase< ReferenceCountedVector< int > >::clear(void);

748 6 output 0 4 1406 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 56 0
85
void PointerToBase< ReferenceCountedVector< int > >::output(std::ostream &out) const;

749 19 ~PointerToArrayBase 0 4 1405 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
60
inline PointerToArrayBase< int >::~PointerToArrayBase(void);

750 11 operator == 0 4 1405 38 PointerToArrayBase< int >::operator == 0 1 53 64
// These are implemented in PointerToVoid, but expose them here.
97
inline bool PointerToArrayBase< int >::operator ==(PointerToArrayBase< int > const &other) const;

751 11 operator != 0 4 1405 38 PointerToArrayBase< int >::operator != 0 1 54 0
97
inline bool PointerToArrayBase< int >::operator !=(PointerToArrayBase< int > const &other) const;

752 19 ConstPointerToArray 0 4 1404 47 ConstPointerToArray< int >::ConstPointerToArray 0 2 39 40 0
186
inline ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);

753 5 clear 0 4 1404 33 ConstPointerToArray< int >::clear 0 1 41 0
52
inline void ConstPointerToArray< int >::clear(void);

754 4 size 0 4 1404 32 ConstPointerToArray< int >::size 0 1 42 0
75
inline unsigned long long int ConstPointerToArray< int >::size(void) const;

755 11 get_element 0 4 1404 39 ConstPointerToArray< int >::get_element 0 1 43 0
90
inline int const &ConstPointerToArray< int >::get_element(unsigned long long int n) const;

756 11 __getitem__ 0 4 1404 39 ConstPointerToArray< int >::__getitem__ 0 1 44 0
83
int const &ConstPointerToArray< int >::__getitem__(unsigned long long int n) const;

757 8 get_data 0 4 1404 36 ConstPointerToArray< int >::get_data 0 1 45 0
59
PyObject *ConstPointerToArray< int >::get_data(void) const;

758 11 get_subdata 0 4 1404 39 ConstPointerToArray< int >::get_subdata 0 1 46 0
112
PyObject *ConstPointerToArray< int >::get_subdata(unsigned long long int n, unsigned long long int count) const;

759 13 get_ref_count 0 4 1404 41 ConstPointerToArray< int >::get_ref_count 0 1 47 0
65
inline int ConstPointerToArray< int >::get_ref_count(void) const;

760 18 get_node_ref_count 0 4 1404 46 ConstPointerToArray< int >::get_node_ref_count 0 1 48 0
70
inline int ConstPointerToArray< int >::get_node_ref_count(void) const;

761 5 count 0 4 1404 33 ConstPointerToArray< int >::count 0 1 49 0
83
inline unsigned long long int ConstPointerToArray< int >::count(int const &) const;

762 10 __reduce__ 0 4 1404 38 ConstPointerToArray< int >::__reduce__ 0 1 50 0
71
PyObject *ConstPointerToArray< int >::__reduce__(PyObject *self) const;

763 13 __getbuffer__ 0 4 1404 41 ConstPointerToArray< int >::__getbuffer__ 0 1 51 0
96
int ConstPointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

764 17 __releasebuffer__ 0 4 1404 45 ConstPointerToArray< int >::__releasebuffer__ 0 1 52 0
90
void ConstPointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

765 20 ~ConstPointerToArray 0 4 1404 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
55
ConstPointerToArray< int >::~ConstPointerToArray(void);

766 5 clear 0 4 1410 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 73 0
82
inline void PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

767 6 output 0 4 1410 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 74 0
95
void PointerToBase< ReferenceCountedVector< unsigned char > >::output(std::ostream &out) const;

768 19 ~PointerToArrayBase 0 4 1409 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
70
inline PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

769 11 operator == 0 4 1409 48 PointerToArrayBase< unsigned char >::operator == 0 1 71 64
// These are implemented in PointerToVoid, but expose them here.
117
inline bool PointerToArrayBase< unsigned char >::operator ==(PointerToArrayBase< unsigned char > const &other) const;

770 11 operator != 0 4 1409 48 PointerToArrayBase< unsigned char >::operator != 0 1 72 0
117
inline bool PointerToArrayBase< unsigned char >::operator !=(PointerToArrayBase< unsigned char > const &other) const;

771 19 ConstPointerToArray 0 4 1408 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 2 57 58 0
226
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);

772 5 clear 0 4 1408 43 ConstPointerToArray< unsigned char >::clear 0 1 59 0
62
inline void ConstPointerToArray< unsigned char >::clear(void);

773 4 size 0 4 1408 42 ConstPointerToArray< unsigned char >::size 0 1 60 0
85
inline unsigned long long int ConstPointerToArray< unsigned char >::size(void) const;

774 11 get_element 0 4 1408 49 ConstPointerToArray< unsigned char >::get_element 0 1 61 0
110
inline unsigned char const &ConstPointerToArray< unsigned char >::get_element(unsigned long long int n) const;

775 11 __getitem__ 0 4 1408 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 62 0
103
unsigned char const &ConstPointerToArray< unsigned char >::__getitem__(unsigned long long int n) const;

776 8 get_data 0 4 1408 46 ConstPointerToArray< unsigned char >::get_data 0 1 63 0
69
PyObject *ConstPointerToArray< unsigned char >::get_data(void) const;

777 11 get_subdata 0 4 1408 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 64 0
122
PyObject *ConstPointerToArray< unsigned char >::get_subdata(unsigned long long int n, unsigned long long int count) const;

778 13 get_ref_count 0 4 1408 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 65 0
75
inline int ConstPointerToArray< unsigned char >::get_ref_count(void) const;

779 18 get_node_ref_count 0 4 1408 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 66 0
80
inline int ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

780 5 count 0 4 1408 43 ConstPointerToArray< unsigned char >::count 0 1 67 0
103
inline unsigned long long int ConstPointerToArray< unsigned char >::count(unsigned char const &) const;

781 10 __reduce__ 0 4 1408 48 ConstPointerToArray< unsigned char >::__reduce__ 0 1 68 0
81
PyObject *ConstPointerToArray< unsigned char >::__reduce__(PyObject *self) const;

782 13 __getbuffer__ 0 4 1408 51 ConstPointerToArray< unsigned char >::__getbuffer__ 0 1 69 0
106
int ConstPointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

783 17 __releasebuffer__ 0 4 1408 55 ConstPointerToArray< unsigned char >::__releasebuffer__ 0 1 70 0
100
void ConstPointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

784 20 ~ConstPointerToArray 0 4 1408 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
65
ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

785 14 PointerToArray 0 4 1412 40 PointerToArray< double >::PointerToArray 0 3 75 76 77 0
279
inline PointerToArray< double >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((double const *)(0))));
inline PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
PointerToArray< double >::PointerToArray(PyObject *self, PyObject *source);

786 11 empty_array 0 4 1412 37 PointerToArray< double >::empty_array 0 1 78 0
171
static inline PointerToArray< double > PointerToArray< double >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((double const *)(0))));

787 5 clear 0 4 1412 31 PointerToArray< double >::clear 0 1 79 0
50
inline void PointerToArray< double >::clear(void);

788 4 size 0 4 1412 30 PointerToArray< double >::size 0 1 80 0
73
inline unsigned long long int PointerToArray< double >::size(void) const;

789 9 push_back 0 4 1412 35 PointerToArray< double >::push_back 0 1 81 0
65
inline void PointerToArray< double >::push_back(double const &x);

790 8 pop_back 0 4 1412 34 PointerToArray< double >::pop_back 0 1 82 0
53
inline void PointerToArray< double >::pop_back(void);

791 11 get_element 0 4 1412 37 PointerToArray< double >::get_element 0 1 83 0
91
inline double const &PointerToArray< double >::get_element(unsigned long long int n) const;

792 11 set_element 0 4 1412 37 PointerToArray< double >::set_element 0 1 84 0
97
inline void PointerToArray< double >::set_element(unsigned long long int n, double const &value);

793 11 __getitem__ 0 4 1412 37 PointerToArray< double >::__getitem__ 0 1 85 0
84
double const &PointerToArray< double >::__getitem__(unsigned long long int n) const;

794 11 __setitem__ 0 4 1412 37 PointerToArray< double >::__setitem__ 0 1 86 0
90
void PointerToArray< double >::__setitem__(unsigned long long int n, double const &value);

795 8 get_data 0 4 1412 34 PointerToArray< double >::get_data 0 1 87 0
57
PyObject *PointerToArray< double >::get_data(void) const;

796 8 set_data 0 4 1412 34 PointerToArray< double >::set_data 0 1 88 0
56
void PointerToArray< double >::set_data(PyObject *data);

797 11 get_subdata 0 4 1412 37 PointerToArray< double >::get_subdata 0 1 89 0
110
PyObject *PointerToArray< double >::get_subdata(unsigned long long int n, unsigned long long int count) const;

798 11 set_subdata 0 4 1412 37 PointerToArray< double >::set_subdata 0 1 90 0
145
inline void PointerToArray< double >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

799 13 get_ref_count 0 4 1412 39 PointerToArray< double >::get_ref_count 0 1 91 0
63
inline int PointerToArray< double >::get_ref_count(void) const;

800 18 get_node_ref_count 0 4 1412 44 PointerToArray< double >::get_node_ref_count 0 1 92 0
68
inline int PointerToArray< double >::get_node_ref_count(void) const;

801 5 count 0 4 1412 31 PointerToArray< double >::count 0 1 93 0
84
inline unsigned long long int PointerToArray< double >::count(double const &) const;

802 10 __reduce__ 0 4 1412 36 PointerToArray< double >::__reduce__ 0 1 94 0
69
PyObject *PointerToArray< double >::__reduce__(PyObject *self) const;

803 13 __getbuffer__ 0 4 1412 39 PointerToArray< double >::__getbuffer__ 0 1 95 0
88
int PointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

804 17 __releasebuffer__ 0 4 1412 43 PointerToArray< double >::__releasebuffer__ 0 1 96 0
88
void PointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

805 15 ~PointerToArray 0 4 1412 41 PointerToArray< double >::~PointerToArray 0 0 0
48
PointerToArray< double >::~PointerToArray(void);

806 14 PointerToArray 0 4 1414 39 PointerToArray< float >::PointerToArray 0 3 97 98 99 0
274
inline PointerToArray< float >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((float const *)(0))));
inline PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
PointerToArray< float >::PointerToArray(PyObject *self, PyObject *source);

807 11 empty_array 0 4 1414 36 PointerToArray< float >::empty_array 0 1 100 0
168
static inline PointerToArray< float > PointerToArray< float >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((float const *)(0))));

808 5 clear 0 4 1414 30 PointerToArray< float >::clear 0 1 101 0
49
inline void PointerToArray< float >::clear(void);

809 4 size 0 4 1414 29 PointerToArray< float >::size 0 1 102 0
72
inline unsigned long long int PointerToArray< float >::size(void) const;

810 9 push_back 0 4 1414 34 PointerToArray< float >::push_back 0 1 103 0
63
inline void PointerToArray< float >::push_back(float const &x);

811 8 pop_back 0 4 1414 33 PointerToArray< float >::pop_back 0 1 104 0
52
inline void PointerToArray< float >::pop_back(void);

812 11 get_element 0 4 1414 36 PointerToArray< float >::get_element 0 1 105 0
89
inline float const &PointerToArray< float >::get_element(unsigned long long int n) const;

813 11 set_element 0 4 1414 36 PointerToArray< float >::set_element 0 1 106 0
95
inline void PointerToArray< float >::set_element(unsigned long long int n, float const &value);

814 11 __getitem__ 0 4 1414 36 PointerToArray< float >::__getitem__ 0 1 107 0
82
float const &PointerToArray< float >::__getitem__(unsigned long long int n) const;

815 11 __setitem__ 0 4 1414 36 PointerToArray< float >::__setitem__ 0 1 108 0
88
void PointerToArray< float >::__setitem__(unsigned long long int n, float const &value);

816 8 get_data 0 4 1414 33 PointerToArray< float >::get_data 0 1 109 0
56
PyObject *PointerToArray< float >::get_data(void) const;

817 8 set_data 0 4 1414 33 PointerToArray< float >::set_data 0 1 110 0
55
void PointerToArray< float >::set_data(PyObject *data);

818 11 get_subdata 0 4 1414 36 PointerToArray< float >::get_subdata 0 1 111 0
109
PyObject *PointerToArray< float >::get_subdata(unsigned long long int n, unsigned long long int count) const;

819 11 set_subdata 0 4 1414 36 PointerToArray< float >::set_subdata 0 1 112 0
144
inline void PointerToArray< float >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

820 13 get_ref_count 0 4 1414 38 PointerToArray< float >::get_ref_count 0 1 113 0
62
inline int PointerToArray< float >::get_ref_count(void) const;

821 18 get_node_ref_count 0 4 1414 43 PointerToArray< float >::get_node_ref_count 0 1 114 0
67
inline int PointerToArray< float >::get_node_ref_count(void) const;

822 5 count 0 4 1414 30 PointerToArray< float >::count 0 1 115 0
82
inline unsigned long long int PointerToArray< float >::count(float const &) const;

823 10 __reduce__ 0 4 1414 35 PointerToArray< float >::__reduce__ 0 1 116 0
68
PyObject *PointerToArray< float >::__reduce__(PyObject *self) const;

824 13 __getbuffer__ 0 4 1414 38 PointerToArray< float >::__getbuffer__ 0 1 117 0
87
int PointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

825 17 __releasebuffer__ 0 4 1414 42 PointerToArray< float >::__releasebuffer__ 0 1 118 0
87
void PointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

826 15 ~PointerToArray 0 4 1414 40 PointerToArray< float >::~PointerToArray 0 0 0
47
PointerToArray< float >::~PointerToArray(void);

827 14 PointerToArray 0 4 1416 37 PointerToArray< int >::PointerToArray 0 3 119 120 121 0
264
inline PointerToArray< int >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((int const *)(0))));
inline PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
PointerToArray< int >::PointerToArray(PyObject *self, PyObject *source);

828 11 empty_array 0 4 1416 34 PointerToArray< int >::empty_array 0 1 122 0
162
static inline PointerToArray< int > PointerToArray< int >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((int const *)(0))));

829 5 clear 0 4 1416 28 PointerToArray< int >::clear 0 1 123 0
47
inline void PointerToArray< int >::clear(void);

830 4 size 0 4 1416 27 PointerToArray< int >::size 0 1 124 0
70
inline unsigned long long int PointerToArray< int >::size(void) const;

831 9 push_back 0 4 1416 32 PointerToArray< int >::push_back 0 1 125 0
59
inline void PointerToArray< int >::push_back(int const &x);

832 8 pop_back 0 4 1416 31 PointerToArray< int >::pop_back 0 1 126 0
50
inline void PointerToArray< int >::pop_back(void);

833 11 get_element 0 4 1416 34 PointerToArray< int >::get_element 0 1 127 0
85
inline int const &PointerToArray< int >::get_element(unsigned long long int n) const;

834 11 set_element 0 4 1416 34 PointerToArray< int >::set_element 0 1 128 0
91
inline void PointerToArray< int >::set_element(unsigned long long int n, int const &value);

835 11 __getitem__ 0 4 1416 34 PointerToArray< int >::__getitem__ 0 1 129 0
78
int const &PointerToArray< int >::__getitem__(unsigned long long int n) const;

836 11 __setitem__ 0 4 1416 34 PointerToArray< int >::__setitem__ 0 1 130 0
84
void PointerToArray< int >::__setitem__(unsigned long long int n, int const &value);

837 8 get_data 0 4 1416 31 PointerToArray< int >::get_data 0 1 131 0
54
PyObject *PointerToArray< int >::get_data(void) const;

838 8 set_data 0 4 1416 31 PointerToArray< int >::set_data 0 1 132 0
53
void PointerToArray< int >::set_data(PyObject *data);

839 11 get_subdata 0 4 1416 34 PointerToArray< int >::get_subdata 0 1 133 0
107
PyObject *PointerToArray< int >::get_subdata(unsigned long long int n, unsigned long long int count) const;

840 11 set_subdata 0 4 1416 34 PointerToArray< int >::set_subdata 0 1 134 0
142
inline void PointerToArray< int >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

841 13 get_ref_count 0 4 1416 36 PointerToArray< int >::get_ref_count 0 1 135 0
60
inline int PointerToArray< int >::get_ref_count(void) const;

842 18 get_node_ref_count 0 4 1416 41 PointerToArray< int >::get_node_ref_count 0 1 136 0
65
inline int PointerToArray< int >::get_node_ref_count(void) const;

843 5 count 0 4 1416 28 PointerToArray< int >::count 0 1 137 0
78
inline unsigned long long int PointerToArray< int >::count(int const &) const;

844 10 __reduce__ 0 4 1416 33 PointerToArray< int >::__reduce__ 0 1 138 0
66
PyObject *PointerToArray< int >::__reduce__(PyObject *self) const;

845 13 __getbuffer__ 0 4 1416 36 PointerToArray< int >::__getbuffer__ 0 1 139 0
85
int PointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

846 17 __releasebuffer__ 0 4 1416 40 PointerToArray< int >::__releasebuffer__ 0 1 140 0
85
void PointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

847 15 ~PointerToArray 0 4 1416 38 PointerToArray< int >::~PointerToArray 0 0 0
45
PointerToArray< int >::~PointerToArray(void);

848 14 PointerToArray 0 4 1418 47 PointerToArray< unsigned char >::PointerToArray 0 3 141 142 143 0
314
inline PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));
inline PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
PointerToArray< unsigned char >::PointerToArray(PyObject *self, PyObject *source);

849 11 empty_array 0 4 1418 44 PointerToArray< unsigned char >::empty_array 0 1 144 0
192
static inline PointerToArray< unsigned char > PointerToArray< unsigned char >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));

850 5 clear 0 4 1418 38 PointerToArray< unsigned char >::clear 0 1 145 0
57
inline void PointerToArray< unsigned char >::clear(void);

851 4 size 0 4 1418 37 PointerToArray< unsigned char >::size 0 1 146 0
80
inline unsigned long long int PointerToArray< unsigned char >::size(void) const;

852 9 push_back 0 4 1418 42 PointerToArray< unsigned char >::push_back 0 1 147 0
79
inline void PointerToArray< unsigned char >::push_back(unsigned char const &x);

853 8 pop_back 0 4 1418 41 PointerToArray< unsigned char >::pop_back 0 1 148 0
60
inline void PointerToArray< unsigned char >::pop_back(void);

854 11 get_element 0 4 1418 44 PointerToArray< unsigned char >::get_element 0 1 149 0
105
inline unsigned char const &PointerToArray< unsigned char >::get_element(unsigned long long int n) const;

855 11 set_element 0 4 1418 44 PointerToArray< unsigned char >::set_element 0 1 150 0
111
inline void PointerToArray< unsigned char >::set_element(unsigned long long int n, unsigned char const &value);

856 11 __getitem__ 0 4 1418 44 PointerToArray< unsigned char >::__getitem__ 0 1 151 0
98
unsigned char const &PointerToArray< unsigned char >::__getitem__(unsigned long long int n) const;

857 11 __setitem__ 0 4 1418 44 PointerToArray< unsigned char >::__setitem__ 0 1 152 0
104
void PointerToArray< unsigned char >::__setitem__(unsigned long long int n, unsigned char const &value);

858 8 get_data 0 4 1418 41 PointerToArray< unsigned char >::get_data 0 1 153 0
64
PyObject *PointerToArray< unsigned char >::get_data(void) const;

859 8 set_data 0 4 1418 41 PointerToArray< unsigned char >::set_data 0 1 154 0
63
void PointerToArray< unsigned char >::set_data(PyObject *data);

860 11 get_subdata 0 4 1418 44 PointerToArray< unsigned char >::get_subdata 0 1 155 0
117
PyObject *PointerToArray< unsigned char >::get_subdata(unsigned long long int n, unsigned long long int count) const;

861 11 set_subdata 0 4 1418 44 PointerToArray< unsigned char >::set_subdata 0 1 156 0
152
inline void PointerToArray< unsigned char >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

862 13 get_ref_count 0 4 1418 46 PointerToArray< unsigned char >::get_ref_count 0 1 157 0
70
inline int PointerToArray< unsigned char >::get_ref_count(void) const;

863 18 get_node_ref_count 0 4 1418 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 158 0
75
inline int PointerToArray< unsigned char >::get_node_ref_count(void) const;

864 5 count 0 4 1418 38 PointerToArray< unsigned char >::count 0 1 159 0
98
inline unsigned long long int PointerToArray< unsigned char >::count(unsigned char const &) const;

865 10 __reduce__ 0 4 1418 43 PointerToArray< unsigned char >::__reduce__ 0 1 160 0
76
PyObject *PointerToArray< unsigned char >::__reduce__(PyObject *self) const;

866 13 __getbuffer__ 0 4 1418 46 PointerToArray< unsigned char >::__getbuffer__ 0 1 161 0
95
int PointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

867 17 __releasebuffer__ 0 4 1418 50 PointerToArray< unsigned char >::__releasebuffer__ 0 1 162 0
95
void PointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

868 15 ~PointerToArray 0 4 1418 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
55
PointerToArray< unsigned char >::~PointerToArray(void);

869 11 is_tracking 0 4 1419 24 MemoryUsage::is_tracking 0 1 164 125
/**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */
50
static inline bool MemoryUsage::is_tracking(void);

870 11 is_counting 0 4 1419 24 MemoryUsage::is_counting 0 1 165 168
/**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */
50
static inline bool MemoryUsage::is_counting(void);

871 20 get_current_cpp_size 0 4 1419 33 MemoryUsage::get_current_cpp_size 0 1 166 136
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */
66
static inline std::size_t MemoryUsage::get_current_cpp_size(void);

872 18 get_total_cpp_size 0 4 1419 31 MemoryUsage::get_total_cpp_size 0 1 167 132
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */
64
static inline std::size_t MemoryUsage::get_total_cpp_size(void);

873 26 get_panda_heap_single_size 0 4 1419 39 MemoryUsage::get_panda_heap_single_size 0 1 168 119
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */
72
static inline std::size_t MemoryUsage::get_panda_heap_single_size(void);

874 25 get_panda_heap_array_size 0 4 1419 38 MemoryUsage::get_panda_heap_array_size 0 1 169 107
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */
71
static inline std::size_t MemoryUsage::get_panda_heap_array_size(void);

875 23 get_panda_heap_overhead 0 4 1419 36 MemoryUsage::get_panda_heap_overhead 0 1 170 190
/**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */
69
static inline std::size_t MemoryUsage::get_panda_heap_overhead(void);

876 19 get_panda_mmap_size 0 4 1419 32 MemoryUsage::get_panda_mmap_size 0 1 171 110
/**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */
65
static inline std::size_t MemoryUsage::get_panda_mmap_size(void);

877 17 get_external_size 0 4 1419 30 MemoryUsage::get_external_size 0 1 172 496
/**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */
63
static inline std::size_t MemoryUsage::get_external_size(void);

878 14 get_total_size 0 4 1419 27 MemoryUsage::get_total_size 0 1 173 113
/**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */
60
static inline std::size_t MemoryUsage::get_total_size(void);

879 16 get_num_pointers 0 4 1419 29 MemoryUsage::get_num_pointers 0 1 174 59
/**
 * Returns the number of pointers currently active.
 */
54
static inline int MemoryUsage::get_num_pointers(void);

880 12 get_pointers 0 4 1419 25 MemoryUsage::get_pointers 0 1 175 100
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

881 20 get_pointers_of_type 0 4 1419 33 MemoryUsage::get_pointers_of_type 0 1 176 122
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

882 19 get_pointers_of_age 0 4 1419 32 MemoryUsage::get_pointers_of_age 0 1 177 159
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

883 28 get_pointers_with_zero_count 0 4 1419 41 MemoryUsage::get_pointers_with_zero_count 0 1 178 852
/**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

884 6 freeze 0 4 1419 19 MemoryUsage::freeze 0 1 179 285
/**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */
45
static inline void MemoryUsage::freeze(void);

885 18 show_current_types 0 4 1419 31 MemoryUsage::show_current_types 0 1 180 70
/**
 * Shows the breakdown of types of all of the active pointers.
 */
57
static inline void MemoryUsage::show_current_types(void);

886 16 show_trend_types 0 4 1419 29 MemoryUsage::show_trend_types 0 1 181 118
/**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */
55
static inline void MemoryUsage::show_trend_types(void);

887 17 show_current_ages 0 4 1419 30 MemoryUsage::show_current_ages 0 1 182 69
/**
 * Shows the breakdown of ages of all of the active pointers.
 */
56
static inline void MemoryUsage::show_current_ages(void);

888 15 show_trend_ages 0 4 1419 28 MemoryUsage::show_trend_ages 0 1 183 117
/**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */
54
static inline void MemoryUsage::show_trend_ages(void);

889 11 MemoryUsage 0 4 1419 24 MemoryUsage::MemoryUsage 0 1 163 10
/**
 *
 */
63
inline MemoryUsage::MemoryUsage(MemoryUsage const &) = default;

890 12 ~MemoryUsage 0 4 1419 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

891 20 upcast_to_MemoryBase 0 12 1424 36 ReferenceCount::upcast_to_MemoryBase 0 1 190 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

892 26 downcast_to_ReferenceCount 0 12 1398 38 MemoryBase::downcast_to_ReferenceCount 0 0 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

893 15 ~ReferenceCount 0 6 1424 31 ReferenceCount::~ReferenceCount 0 0 10
/**
 *
 */
53
virtual inline ReferenceCount::~ReferenceCount(void);

894 13 get_ref_count 0 4 1424 29 ReferenceCount::get_ref_count 0 1 184 47
/**
 * Returns the current reference count.
 */
53
inline int ReferenceCount::get_ref_count(void) const;

895 3 ref 0 4 1424 19 ReferenceCount::ref 0 1 185 538
/**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
44
inline void ReferenceCount::ref(void) const;

896 5 unref 0 6 1424 21 ReferenceCount::unref 0 1 186 865
/**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
54
virtual inline bool ReferenceCount::unref(void) const;

897 24 test_ref_count_integrity 0 4 1424 40 ReferenceCount::test_ref_count_integrity 0 1 187 135
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

898 22 test_ref_count_nonzero 0 4 1424 38 ReferenceCount::test_ref_count_nonzero 0 1 188 144
/**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

899 14 get_class_type 0 4 1424 30 ReferenceCount::get_class_type 0 1 189 0
55
static TypeHandle ReferenceCount::get_class_type(void);

900 10 get_length 0 4 1426 18 Buffer::get_length 0 1 192 10
/**
 *
 */
42
inline int Buffer::get_length(void) const;

901 6 Buffer 0 4 1426 14 Buffer::Buffer 0 1 191 10
/**
 *
 */
48
inline Buffer::Buffer(Buffer const &) = default;

902 15 compress_string 0 1 0 15 compress_string 0 1 688 0
78
std::string compress_string(std::string const &source, int compression_level);

903 17 decompress_string 0 1 0 17 decompress_string 0 1 689 0
57
std::string decompress_string(std::string const &source);

904 13 compress_file 0 1 0 13 compress_file 0 1 690 0
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

905 15 decompress_file 0 1 0 15 decompress_file 0 1 691 0
67
bool decompress_file(Filename const &source, Filename const &dest);

906 15 compress_stream 0 1 0 15 compress_stream 0 1 692 0
86
bool compress_stream(std::istream &source, std::ostream &dest, int compression_level);

907 17 decompress_stream 0 1 0 17 decompress_stream 0 1 693 0
65
bool decompress_stream(std::istream &source, std::ostream &dest);

908 11 copy_stream 0 1 0 11 copy_stream 0 1 694 0
59
bool copy_stream(std::istream &source, std::ostream &dest);

909 9 add_level 0 6 1427 36 PStatCollectorForwardBase::add_level 0 1 193 0
68
virtual void PStatCollectorForwardBase::add_level(double level) = 0;

910 18 get_node_ref_count 0 4 1428 38 NodeReferenceCount::get_node_ref_count 0 1 194 47
/**
 * Returns the current reference count.
 */
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

911 8 node_ref 0 4 1428 28 NodeReferenceCount::node_ref 0 1 195 107
/**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */
53
inline void NodeReferenceCount::node_ref(void) const;

912 10 node_unref 0 4 1428 30 NodeReferenceCount::node_unref 0 1 196 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
55
inline bool NodeReferenceCount::node_unref(void) const;

913 24 test_ref_count_integrity 0 4 1428 44 NodeReferenceCount::test_ref_count_integrity 0 1 197 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

914 15 node_unref_only 0 4 1428 35 NodeReferenceCount::node_unref_only 0 1 198 186
/**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */
60
inline void NodeReferenceCount::node_unref_only(void) const;

915 14 get_class_type 0 4 1428 34 NodeReferenceCount::get_class_type 0 1 199 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

916 8 Datagram 0 4 1429 18 Datagram::Datagram 0 4 200 201 202 203 130
/**
 * Constructs a datagram from an existing block of data.
 */

/**
 * Constructs a datagram from an existing block of data.
 */
268
inline Datagram::Datagram(void) = default;
inline Datagram::Datagram(void const *data, std::size_t size);
inline explicit Datagram::Datagram(vector_uchar data);
Datagram::Datagram(Datagram const &copy) = default;
Datagram::Datagram(Datagram &&from) noexcept = default;

917 10 operator = 0 4 1429 20 Datagram::operator = 0 2 204 205 0
121
void Datagram::operator =(Datagram const &copy) = default;
void Datagram::operator =(Datagram &&from) noexcept = default;

918 5 clear 0 6 1429 15 Datagram::clear 0 1 206 90
/**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */
35
virtual void Datagram::clear(void);

919 8 dump_hex 0 4 1429 18 Datagram::dump_hex 0 1 207 111
/**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */
74
void Datagram::dump_hex(std::ostream &out, unsigned int indent = 0) const;

920 8 add_bool 0 4 1429 18 Datagram::add_bool 0 1 208 48
/**
 * Adds a boolean value to the datagram.
 */
43
inline void Datagram::add_bool(bool value);

921 8 add_int8 0 4 1429 18 Datagram::add_int8 0 1 209 55
/**
 * Adds a signed 8-bit integer to the datagram.
 */
45
inline void Datagram::add_int8(int8_t value);

922 9 add_uint8 0 4 1429 19 Datagram::add_uint8 0 1 210 58
/**
 * Adds an unsigned 8-bit integer to the datagram.
 */
47
inline void Datagram::add_uint8(uint8_t value);

923 9 add_int16 0 4 1429 19 Datagram::add_int16 0 1 211 106
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the datagram.
 */
47
inline void Datagram::add_int16(int16_t value);

924 9 add_int32 0 4 1429 19 Datagram::add_int32 0 1 212 56
/**
 * Adds a signed 32-bit integer to the datagram.
 */
47
inline void Datagram::add_int32(int32_t value);

925 9 add_int64 0 4 1429 19 Datagram::add_int64 0 1 213 56
/**
 * Adds a signed 64-bit integer to the datagram.
 */
47
inline void Datagram::add_int64(int64_t value);

926 10 add_uint16 0 4 1429 20 Datagram::add_uint16 0 1 214 59
/**
 * Adds an unsigned 16-bit integer to the datagram.
 */
49
inline void Datagram::add_uint16(uint16_t value);

927 10 add_uint32 0 4 1429 20 Datagram::add_uint32 0 1 215 59
/**
 * Adds an unsigned 32-bit integer to the datagram.
 */
49
inline void Datagram::add_uint32(uint32_t value);

928 10 add_uint64 0 4 1429 20 Datagram::add_uint64 0 1 216 59
/**
 * Adds an unsigned 64-bit integer to the datagram.
 */
49
inline void Datagram::add_uint64(uint64_t value);

929 11 add_float32 0 4 1429 21 Datagram::add_float32 0 1 217 197
/**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
52
inline void Datagram::add_float32(PN_float32 value);

930 11 add_float64 0 4 1429 21 Datagram::add_float64 0 1 218 63
/**
 * Adds a 64-bit floating-point number to the datagram.
 */
52
inline void Datagram::add_float64(PN_float64 value);

931 12 add_stdfloat 0 4 1429 22 Datagram::add_stdfloat 0 1 219 105
/**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */
54
inline void Datagram::add_stdfloat(PN_stdfloat value);

932 12 add_be_int16 0 4 1429 22 Datagram::add_be_int16 0 1 220 136
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int16(int16_t value);

933 12 add_be_int32 0 4 1429 22 Datagram::add_be_int32 0 1 221 67
/**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int32(int32_t value);

934 12 add_be_int64 0 4 1429 22 Datagram::add_be_int64 0 1 222 67
/**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int64(int64_t value);

935 13 add_be_uint16 0 4 1429 23 Datagram::add_be_uint16 0 1 223 70
/**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint16(uint16_t value);

936 13 add_be_uint32 0 4 1429 23 Datagram::add_be_uint32 0 1 224 70
/**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint32(uint32_t value);

937 13 add_be_uint64 0 4 1429 23 Datagram::add_be_uint64 0 1 225 70
/**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint64(uint64_t value);

938 14 add_be_float32 0 4 1429 24 Datagram::add_be_float32 0 1 226 94
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */
55
inline void Datagram::add_be_float32(PN_float32 value);

939 14 add_be_float64 0 4 1429 24 Datagram::add_be_float64 0 1 227 74
/**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */
55
inline void Datagram::add_be_float64(PN_float64 value);

940 10 add_string 0 4 1429 20 Datagram::add_string 0 1 228 109
/**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */
57
inline void Datagram::add_string(std::string const &str);

941 12 add_string32 0 4 1429 22 Datagram::add_string32 0 1 229 116
/**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */
59
inline void Datagram::add_string32(std::string const &str);

942 12 add_z_string 0 4 1429 22 Datagram::add_z_string 0 1 230 86
/**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */
59
inline void Datagram::add_z_string(std::string const &str);

943 16 add_fixed_string 0 4 1429 26 Datagram::add_fixed_string 0 1 231 238
/**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
81
inline void Datagram::add_fixed_string(std::string const &str, std::size_t size);

944 11 add_wstring 0 4 1429 21 Datagram::add_wstring 0 1 232 58
/**
 * Adds a variable-length wstring to the datagram.
 */
52
void Datagram::add_wstring(std::wstring const &str);

945 8 add_blob 0 4 1429 18 Datagram::add_blob 0 1 233 114
/**
 * Adds a variable-length binary blob to the datagram.  This actually adds a
 * count followed by n bytes.
 */
53
inline void Datagram::add_blob(vector_uchar const &);

946 10 add_blob32 0 4 1429 20 Datagram::add_blob32 0 1 234 119
/**
 * Adds a variable-length binary blob to the datagram, using a 32-bit length
 * field to allow very long blobs.
 */
55
inline void Datagram::add_blob32(vector_uchar const &);

947 9 pad_bytes 0 4 1429 19 Datagram::pad_bytes 0 1 235 67
/**
 * Adds the indicated number of zero bytes to the datagram.
 */
43
void Datagram::pad_bytes(std::size_t size);

948 11 append_data 0 4 1429 21 Datagram::append_data 0 1 236 132
/**
 * Appends some more raw data to the end of the datagram.
 */

/**
 * Appends some more raw data to the end of the datagram.
 */
124
void Datagram::append_data(void const *data, std::size_t size);
inline void Datagram::append_data(vector_uchar const &data);

949 11 get_message 0 4 1429 21 Datagram::get_message 0 1 237 51
/**
 * Returns the datagram's data as a string.
 */
51
inline PyObject *Datagram::get_message(void) const;

950 9 __bytes__ 0 4 1429 19 Datagram::__bytes__ 0 1 238 0
49
inline PyObject *Datagram::__bytes__(void) const;

951 10 __reduce__ 0 4 1429 20 Datagram::__reduce__ 0 1 239 0
43
PyObject *Datagram::__reduce__(void) const;

952 10 get_length 0 4 1429 20 Datagram::get_length 0 1 240 55
/**
 * Returns the number of bytes in the datagram.
 */
52
inline std::size_t Datagram::get_length(void) const;

953 9 set_array 0 4 1429 19 Datagram::set_array 0 1 241 199
/**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */
48
inline void Datagram::set_array(PTA_uchar data);

954 10 copy_array 0 4 1429 20 Datagram::copy_array 0 1 242 237
/**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */
50
inline void Datagram::copy_array(CPTA_uchar data);

955 9 get_array 0 4 1429 19 Datagram::get_array 0 1 243 70
/**
 * Returns a const pointer to the actual data in the Datagram.
 */
50
inline CPTA_uchar Datagram::get_array(void) const;

956 12 modify_array 0 4 1429 22 Datagram::modify_array 0 1 244 75
/**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */
46
inline PTA_uchar Datagram::modify_array(void);

957 19 set_stdfloat_double 0 4 1429 29 Datagram::set_stdfloat_double 0 1 245 343
/**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */
64
inline void Datagram::set_stdfloat_double(bool stdfloat_double);

958 19 get_stdfloat_double 0 4 1429 29 Datagram::get_stdfloat_double 0 1 246 72
/**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */
54
inline bool Datagram::get_stdfloat_double(void) const;

959 11 operator == 0 4 1429 21 Datagram::operator == 0 1 247 0
63
inline bool Datagram::operator ==(Datagram const &other) const;

960 11 operator != 0 4 1429 21 Datagram::operator != 0 1 248 0
63
inline bool Datagram::operator !=(Datagram const &other) const;

961 10 operator < 0 4 1429 20 Datagram::operator < 0 1 249 0
62
inline bool Datagram::operator <(Datagram const &other) const;

962 6 output 0 4 1429 16 Datagram::output 0 1 250 67
/**
 * Write a string representation of this instance to <out>.
 */
47
void Datagram::output(std::ostream &out) const;

963 5 write 0 4 1429 15 Datagram::write 0 1 251 67
/**
 * Write a string representation of this instance to <out>.
 */
71
void Datagram::write(std::ostream &out, unsigned int indent = 0) const;

964 14 get_class_type 0 4 1429 24 Datagram::get_class_type 0 1 252 0
49
static TypeHandle Datagram::get_class_type(void);

965 18 ~DatagramGenerator 0 6 1431 37 DatagramGenerator::~DatagramGenerator 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
52
virtual DatagramGenerator::~DatagramGenerator(void);

966 12 get_datagram 0 6 1431 31 DatagramGenerator::get_datagram 0 1 253 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

967 13 save_datagram 0 6 1431 32 DatagramGenerator::save_datagram 0 1 254 391
/**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */
65
virtual bool DatagramGenerator::save_datagram(SubfileInfo &info);

968 6 is_eof 0 6 1431 25 DatagramGenerator::is_eof 0 1 255 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

969 8 is_error 0 6 1431 27 DatagramGenerator::is_error 0 1 256 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

970 12 get_filename 0 6 1431 31 DatagramGenerator::get_filename 0 1 257 159
/**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */
62
virtual Filename const &DatagramGenerator::get_filename(void);

971 13 get_timestamp 0 6 1431 32 DatagramGenerator::get_timestamp 0 1 258 138
/**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */
60
virtual time_t DatagramGenerator::get_timestamp(void) const;

972 8 get_file 0 6 1431 27 DatagramGenerator::get_file 0 1 259 156
/**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */
63
virtual FileReference const *DatagramGenerator::get_file(void);

973 9 get_vfile 0 6 1431 28 DatagramGenerator::get_vfile 0 1 260 153
/**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */
56
virtual VirtualFile *DatagramGenerator::get_vfile(void);

974 12 get_file_pos 0 6 1431 31 DatagramGenerator::get_file_pos 0 1 261 327
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */
61
virtual std::streamoff DatagramGenerator::get_file_pos(void);

975 16 DatagramIterator 0 4 1432 34 DatagramIterator::DatagramIterator 0 3 262 263 264 22
/**
 *
 */

/**
 *
 */
220
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, std::size_t offset = 0);
inline DatagramIterator::DatagramIterator(DatagramIterator const &) = default;

976 8 get_bool 0 4 1432 26 DatagramIterator::get_bool 0 1 265 36
/**
 * Extracts a boolean value.
 */
45
inline bool DatagramIterator::get_bool(void);

977 8 get_int8 0 4 1432 26 DatagramIterator::get_int8 0 1 266 43
/**
 * Extracts a signed 8-bit integer.
 */
47
inline int8_t DatagramIterator::get_int8(void);

978 9 get_uint8 0 4 1432 27 DatagramIterator::get_uint8 0 1 267 46
/**
 * Extracts an unsigned 8-bit integer.
 */
49
inline uint8_t DatagramIterator::get_uint8(void);

979 9 get_int16 0 4 1432 27 DatagramIterator::get_int16 0 1 268 44
/**
 * Extracts a signed 16-bit integer.
 */
49
inline int16_t DatagramIterator::get_int16(void);

980 9 get_int32 0 4 1432 27 DatagramIterator::get_int32 0 1 269 44
/**
 * Extracts a signed 32-bit integer.
 */
49
inline int32_t DatagramIterator::get_int32(void);

981 9 get_int64 0 4 1432 27 DatagramIterator::get_int64 0 1 270 44
/**
 * Extracts a signed 64-bit integer.
 */
49
inline int64_t DatagramIterator::get_int64(void);

982 10 get_uint16 0 4 1432 28 DatagramIterator::get_uint16 0 1 271 47
/**
 * Extracts an unsigned 16-bit integer.
 */
51
inline uint16_t DatagramIterator::get_uint16(void);

983 10 get_uint32 0 4 1432 28 DatagramIterator::get_uint32 0 1 272 47
/**
 * Extracts an unsigned 32-bit integer.
 */
51
inline uint32_t DatagramIterator::get_uint32(void);

984 10 get_uint64 0 4 1432 28 DatagramIterator::get_uint64 0 1 273 47
/**
 * Extracts an unsigned 64-bit integer.
 */
51
inline uint64_t DatagramIterator::get_uint64(void);

985 11 get_float32 0 4 1432 29 DatagramIterator::get_float32 0 1 274 68
/**
 * Extracts a 32-bit single-precision floating-point number.
 */
54
inline PN_float32 DatagramIterator::get_float32(void);

986 11 get_float64 0 4 1432 29 DatagramIterator::get_float64 0 1 275 51
/**
 * Extracts a 64-bit floating-point number.
 */
54
inline PN_float64 DatagramIterator::get_float64(void);

987 12 get_stdfloat 0 4 1432 30 DatagramIterator::get_stdfloat 0 1 276 119
/**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */
56
inline PN_stdfloat DatagramIterator::get_stdfloat(void);

988 12 get_be_int16 0 4 1432 30 DatagramIterator::get_be_int16 0 1 277 55
/**
 * Extracts a signed 16-bit big-endian integer.
 */
52
inline int16_t DatagramIterator::get_be_int16(void);

989 12 get_be_int32 0 4 1432 30 DatagramIterator::get_be_int32 0 1 278 55
/**
 * Extracts a signed 32-bit big-endian integer.
 */
52
inline int32_t DatagramIterator::get_be_int32(void);

990 12 get_be_int64 0 4 1432 30 DatagramIterator::get_be_int64 0 1 279 55
/**
 * Extracts a signed 64-bit big-endian integer.
 */
52
inline int64_t DatagramIterator::get_be_int64(void);

991 13 get_be_uint16 0 4 1432 31 DatagramIterator::get_be_uint16 0 1 280 58
/**
 * Extracts an unsigned 16-bit big-endian integer.
 */
54
inline uint16_t DatagramIterator::get_be_uint16(void);

992 13 get_be_uint32 0 4 1432 31 DatagramIterator::get_be_uint32 0 1 281 58
/**
 * Extracts an unsigned 32-bit big-endian integer.
 */
54
inline uint32_t DatagramIterator::get_be_uint32(void);

993 13 get_be_uint64 0 4 1432 31 DatagramIterator::get_be_uint64 0 1 282 58
/**
 * Extracts an unsigned 64-bit big-endian integer.
 */
54
inline uint64_t DatagramIterator::get_be_uint64(void);

994 14 get_be_float32 0 4 1432 32 DatagramIterator::get_be_float32 0 1 283 79
/**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */
57
inline PN_float32 DatagramIterator::get_be_float32(void);

995 14 get_be_float64 0 4 1432 32 DatagramIterator::get_be_float64 0 1 284 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
57
inline PN_float64 DatagramIterator::get_be_float64(void);

996 10 get_string 0 4 1432 28 DatagramIterator::get_string 0 1 285 45
/**
 * Extracts a variable-length string.
 */
47
std::string DatagramIterator::get_string(void);

997 12 get_string32 0 4 1432 30 DatagramIterator::get_string32 0 1 286 72
/**
 * Extracts a variable-length string with a 32-bit length field.
 */
49
std::string DatagramIterator::get_string32(void);

998 12 get_z_string 0 4 1432 30 DatagramIterator::get_z_string 0 1 287 74
/**
 * Extracts a variable-length string, as a NULL-terminated string.
 */
49
std::string DatagramIterator::get_z_string(void);

999 16 get_fixed_string 0 4 1432 34 DatagramIterator::get_fixed_string 0 1 288 128
/**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */
65
std::string DatagramIterator::get_fixed_string(std::size_t size);

1000 11 get_wstring 0 4 1432 29 DatagramIterator::get_wstring 0 1 289 75
/**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */
49
std::wstring DatagramIterator::get_wstring(void);

1001 8 get_blob 0 4 1432 26 DatagramIterator::get_blob 0 1 290 50
/**
 * Extracts a variable-length binary blob.
 */
53
inline vector_uchar DatagramIterator::get_blob(void);

1002 10 get_blob32 0 4 1432 28 DatagramIterator::get_blob32 0 1 291 75
/**
 * Extracts a variable-length binary blob with a 32-bit size field.
 */
55
inline vector_uchar DatagramIterator::get_blob32(void);

1003 10 skip_bytes 0 4 1432 28 DatagramIterator::skip_bytes 0 1 292 68
/**
 * Skips over the indicated number of bytes in the datagram.
 */
59
inline void DatagramIterator::skip_bytes(std::size_t size);

1004 13 extract_bytes 0 4 1432 31 DatagramIterator::extract_bytes 0 1 293 346
/**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */

/**
 * Extracts the indicated number of bytes in the datagram into the given
 * character buffer.  Assumes that the buffer is big enough to hold the
 * requested number of bytes.  Returns the number of bytes that were
 * successfully written.
 */
147
vector_uchar DatagramIterator::extract_bytes(std::size_t size);
std::size_t DatagramIterator::extract_bytes(unsigned char *into, std::size_t size);

1005 19 get_remaining_bytes 0 4 1432 37 DatagramIterator::get_remaining_bytes 0 1 294 115
/**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */
70
inline vector_uchar DatagramIterator::get_remaining_bytes(void) const;

1006 18 get_remaining_size 0 4 1432 36 DatagramIterator::get_remaining_size 0 1 295 49
/**
 * Return the bytes left in the datagram.
 */
68
inline std::size_t DatagramIterator::get_remaining_size(void) const;

1007 12 get_datagram 0 4 1432 30 DatagramIterator::get_datagram 0 1 296 48
/**
 * Return the datagram of this iterator.
 */
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

1008 17 get_current_index 0 4 1432 35 DatagramIterator::get_current_index 0 1 297 100
/**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */
67
inline std::size_t DatagramIterator::get_current_index(void) const;

1009 6 output 0 4 1432 24 DatagramIterator::output 0 1 298 67
/**
 * Write a string representation of this instance to <out>.
 */
55
void DatagramIterator::output(std::ostream &out) const;

1010 5 write 0 4 1432 23 DatagramIterator::write 0 1 299 67
/**
 * Write a string representation of this instance to <out>.
 */
79
void DatagramIterator::write(std::ostream &out, unsigned int indent = 0) const;

1011 14 get_class_type 0 4 1432 32 DatagramIterator::get_class_type 0 1 300 0
57
static TypeHandle DatagramIterator::get_class_type(void);

1012 17 ~DatagramIterator 0 4 1432 35 DatagramIterator::~DatagramIterator 0 0 0
42
DatagramIterator::~DatagramIterator(void);

1013 13 ~DatagramSink 0 6 1433 27 DatagramSink::~DatagramSink 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
42
virtual DatagramSink::~DatagramSink(void);

1014 12 put_datagram 0 6 1433 26 DatagramSink::put_datagram 0 1 301 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

1015 13 copy_datagram 0 6 1433 27 DatagramSink::copy_datagram 0 2 302 303 713
/**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */

/**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */
178
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, Filename const &filename);
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, SubfileInfo const &source);

1016 8 is_error 0 6 1433 22 DatagramSink::is_error 0 1 304 0
46
virtual bool DatagramSink::is_error(void) = 0;

1017 5 flush 0 6 1433 19 DatagramSink::flush 0 1 305 0
43
virtual void DatagramSink::flush(void) = 0;

1018 12 get_filename 0 6 1433 26 DatagramSink::get_filename 0 1 306 159
/**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */
57
virtual Filename const &DatagramSink::get_filename(void);

1019 8 get_file 0 6 1433 22 DatagramSink::get_file 0 1 307 152
/**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */
58
virtual FileReference const *DatagramSink::get_file(void);

1020 12 get_file_pos 0 6 1433 26 DatagramSink::get_file_pos 0 1 308 322
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */
56
virtual std::streamoff DatagramSink::get_file_pos(void);

1021 21 upcast_to_TypedObject 0 12 1439 42 TypedReferenceCount::upcast_to_TypedObject 0 1 314 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

1022 31 downcast_to_TypedReferenceCount 0 12 1430 44 TypedObject::downcast_to_TypedReferenceCount 0 0 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

1023 24 upcast_to_ReferenceCount 0 12 1439 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 315 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

1024 31 downcast_to_TypedReferenceCount 0 12 1424 47 ReferenceCount::downcast_to_TypedReferenceCount 0 0 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

1025 14 get_class_type 0 4 1439 35 TypedReferenceCount::get_class_type 0 1 313 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

1026 20 ~TypedReferenceCount 0 4 1439 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

1027 13 FileReference 0 4 1438 28 FileReference::FileReference 0 2 309 310 10
/**
 *
 */
132
inline FileReference::FileReference(Filename const &filename);
inline FileReference::FileReference(FileReference const &) = default;

1028 12 get_filename 0 4 1438 27 FileReference::get_filename 0 1 311 49
/**
 * Returns the filename of the reference.
 */
63
inline Filename const &FileReference::get_filename(void) const;

1029 14 get_class_type 0 4 1438 29 FileReference::get_class_type 0 1 312 0
54
static TypeHandle FileReference::get_class_type(void);

1030 14 ~FileReference 0 4 1438 29 FileReference::~FileReference 0 0 0
36
FileReference::~FileReference(void);

1031 14 encrypt_string 0 1 0 14 encrypt_string 0 1 695 0
172
vector_uchar encrypt_string(std::string const &source, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

1032 14 decrypt_string 0 1 0 14 decrypt_string 0 1 696 0
84
std::string decrypt_string(vector_uchar const &source, std::string const &password);

1033 12 encrypt_file 0 1 0 12 encrypt_file 0 1 697 0
181
bool encrypt_file(Filename const &source, Filename const &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

1034 12 decrypt_file 0 1 0 12 decrypt_file 0 1 698 0
93
bool decrypt_file(Filename const &source, Filename const &dest, std::string const &password);

1035 14 encrypt_stream 0 1 0 14 encrypt_stream 0 1 699 0
179
bool encrypt_stream(std::istream &source, std::ostream &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

1036 14 decrypt_stream 0 1 0 14 decrypt_stream 0 1 700 0
91
bool decrypt_stream(std::istream &source, std::ostream &dest, std::string const &password);

1037 13 error_to_text 0 1 0 13 error_to_text 0 1 701 10
/**
 *
 */
45
std::string error_to_text(ErrorUtilCode err);

1038 15 get_write_error 0 1 0 15 get_write_error 0 1 702 0
26
int get_write_error(void);

1039 19 handle_socket_error 0 1 0 19 handle_socket_error 0 1 703 10
/**
 *
 */
38
std::string handle_socket_error(void);

1040 17 get_network_error 0 1 0 17 get_network_error 0 1 704 0
28
int get_network_error(void);

1041 7 Ramfile 0 4 1443 16 Ramfile::Ramfile 0 2 316 317 10
/**
 *
 */
82
inline Ramfile::Ramfile(void);
inline Ramfile::Ramfile(Ramfile const &) = default;

1042 4 seek 0 4 1443 13 Ramfile::seek 0 1 318 130
/**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */
43
inline void Ramfile::seek(std::size_t pos);

1043 4 tell 0 4 1443 13 Ramfile::tell 0 1 319 106
/**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */
45
inline std::size_t Ramfile::tell(void) const;

1044 4 read 0 4 1443 13 Ramfile::read 0 1 320 319
/**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */
44
PyObject *Ramfile::read(std::size_t length);

1045 8 readline 0 4 1443 17 Ramfile::readline 0 1 321 303
/**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */
34
PyObject *Ramfile::readline(void);

1046 9 readlines 0 4 1443 18 Ramfile::readlines 0 1 322 0
35
PyObject *Ramfile::readlines(void);

1047 8 get_data 0 4 1443 17 Ramfile::get_data 0 1 323 101
/**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */
40
PyObject *Ramfile::get_data(void) const;

1048 13 get_data_size 0 4 1443 22 Ramfile::get_data_size 0 1 324 58
/**
 * Returns the size of the entire buffer contents.
 */
54
inline std::size_t Ramfile::get_data_size(void) const;

1049 5 clear 0 4 1443 14 Ramfile::clear 0 1 325 47
/**
 * Empties the current buffer contents.
 */
33
inline void Ramfile::clear(void);

1050 12 __getstate__ 0 4 1443 21 Ramfile::__getstate__ 0 1 326 0
44
PyObject *Ramfile::__getstate__(void) const;

1051 12 __setstate__ 0 4 1443 21 Ramfile::__setstate__ 0 1 327 0
44
void Ramfile::__setstate__(PyObject *state);

1052 8 ~Ramfile 0 4 1443 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

1053 7 HashVal 0 4 1444 16 HashVal::HashVal 0 2 328 329 22
/**
 *
 */

/**
 *
 */
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

1054 10 operator = 0 4 1444 19 HashVal::operator = 0 1 330 0
53
inline void HashVal::operator =(HashVal const &copy);

1055 11 operator == 0 4 1444 20 HashVal::operator == 0 1 331 0
61
inline bool HashVal::operator ==(HashVal const &other) const;

1056 11 operator != 0 4 1444 20 HashVal::operator != 0 1 332 0
61
inline bool HashVal::operator !=(HashVal const &other) const;

1057 10 operator < 0 4 1444 19 HashVal::operator < 0 1 333 0
60
inline bool HashVal::operator <(HashVal const &other) const;

1058 10 compare_to 0 4 1444 19 HashVal::compare_to 0 1 334 10
/**
 *
 */
59
inline int HashVal::compare_to(HashVal const &other) const;

1059 10 merge_with 0 4 1444 19 HashVal::merge_with 0 1 335 86
/**
 * Generates a new HashVal representing the xor of this one and the other one.
 */
54
inline void HashVal::merge_with(HashVal const &other);

1060 10 output_dec 0 4 1444 19 HashVal::output_dec 0 1 336 65
/**
 * Outputs the HashVal as four unsigned decimal integers.
 */
57
inline void HashVal::output_dec(std::ostream &out) const;

1061 9 input_dec 0 4 1444 18 HashVal::input_dec 0 1 337 64
/**
 * Inputs the HashVal as four unsigned decimal integers.
 */
49
inline void HashVal::input_dec(std::istream &in);

1062 10 output_hex 0 4 1444 19 HashVal::output_hex 0 1 338 64
/**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */
50
void HashVal::output_hex(std::ostream &out) const;

1063 9 input_hex 0 4 1444 18 HashVal::input_hex 0 1 339 63
/**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */
42
void HashVal::input_hex(std::istream &in);

1064 13 output_binary 0 4 1444 22 HashVal::output_binary 0 1 340 128
/**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */
53
void HashVal::output_binary(std::ostream &out) const;

1065 12 input_binary 0 4 1444 21 HashVal::input_binary 0 1 341 125
/**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */
45
void HashVal::input_binary(std::istream &in);

1066 6 output 0 4 1444 15 HashVal::output 0 1 342 10
/**
 *
 */
53
inline void HashVal::output(std::ostream &out) const;

1067 6 as_dec 0 4 1444 15 HashVal::as_dec 0 1 343 69
/**
 * Returns the HashVal as a string with four decimal numbers.
 */
40
std::string HashVal::as_dec(void) const;

1068 12 set_from_dec 0 4 1444 21 HashVal::set_from_dec 0 1 344 112
/**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */
52
bool HashVal::set_from_dec(std::string const &text);

1069 6 as_hex 0 4 1444 15 HashVal::as_hex 0 1 345 63
/**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */
40
std::string HashVal::as_hex(void) const;

1070 12 set_from_hex 0 4 1444 21 HashVal::set_from_hex 0 1 346 111
/**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */
52
bool HashVal::set_from_hex(std::string const &text);

1071 6 as_bin 0 4 1444 15 HashVal::as_bin 0 1 347 58
/**
 * Returns the HashVal as a 16-byte binary string.
 */
41
vector_uchar HashVal::as_bin(void) const;

1072 12 set_from_bin 0 4 1444 21 HashVal::set_from_bin 0 1 348 106
/**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */
53
bool HashVal::set_from_bin(vector_uchar const &text);

1073 14 write_datagram 0 4 1444 23 HashVal::write_datagram 0 1 349 10
/**
 *
 */
65
inline void HashVal::write_datagram(Datagram &destination) const;

1074 13 read_datagram 0 4 1444 22 HashVal::read_datagram 0 1 350 10
/**
 *
 */
61
inline void HashVal::read_datagram(DatagramIterator &source);

1075 12 write_stream 0 4 1444 21 HashVal::write_stream 0 1 351 10
/**
 *
 */
67
inline void HashVal::write_stream(StreamWriter &destination) const;

1076 11 read_stream 0 4 1444 20 HashVal::read_stream 0 1 352 10
/**
 *
 */
55
inline void HashVal::read_stream(StreamReader &source);

1077 9 hash_file 0 4 1444 18 HashVal::hash_file 0 1 353 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
50
bool HashVal::hash_file(Filename const &filename);

1078 11 hash_stream 0 4 1444 20 HashVal::hash_stream 0 1 354 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
48
bool HashVal::hash_stream(std::istream &stream);

1079 12 hash_ramfile 0 4 1444 21 HashVal::hash_ramfile 0 1 355 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

1080 11 hash_string 0 4 1444 20 HashVal::hash_string 0 1 356 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_string(std::string const &data);

1081 10 hash_bytes 0 4 1444 19 HashVal::hash_bytes 0 1 357 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_bytes(vector_uchar const &data);

1082 11 hash_buffer 0 4 1444 20 HashVal::hash_buffer 0 1 358 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
void HashVal::hash_buffer(char const *buffer, int length);

1083 8 ~HashVal 0 4 1444 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

1084 19 MemoryUsagePointers 0 4 1445 40 MemoryUsagePointers::MemoryUsagePointers 0 2 359 360 10
/**
 *
 */
135
MemoryUsagePointers::MemoryUsagePointers(void);
inline MemoryUsagePointers::MemoryUsagePointers(MemoryUsagePointers const &) = default;

1085 20 ~MemoryUsagePointers 0 4 1445 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 10
/**
 *
 */
48
MemoryUsagePointers::~MemoryUsagePointers(void);

1086 16 get_num_pointers 0 4 1445 37 MemoryUsagePointers::get_num_pointers 0 1 361 53
/**
 * Returns the number of pointers in the set.
 */
62
std::size_t MemoryUsagePointers::get_num_pointers(void) const;

1087 11 get_pointer 0 4 1445 32 MemoryUsagePointers::get_pointer 0 1 362 46
/**
 * Returns the nth pointer of the set.
 */
70
ReferenceCount *MemoryUsagePointers::get_pointer(std::size_t n) const;

1088 17 get_typed_pointer 0 4 1445 38 MemoryUsagePointers::get_typed_pointer 0 1 363 175
/**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * nullptr.
 */
73
TypedObject *MemoryUsagePointers::get_typed_pointer(std::size_t n) const;

1089 8 get_type 0 4 1445 29 MemoryUsagePointers::get_type 0 1 364 70
/**
 * Returns the actual type of the nth pointer, if it is known.
 */
62
TypeHandle MemoryUsagePointers::get_type(std::size_t n) const;

1090 13 get_type_name 0 4 1445 34 MemoryUsagePointers::get_type_name 0 1 365 68
/**
 * Returns the type name of the nth pointer, if it is known.
 */
68
std::string MemoryUsagePointers::get_type_name(std::size_t n) const;

1091 7 get_age 0 4 1445 28 MemoryUsagePointers::get_age 0 1 366 197
/**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */
57
double MemoryUsagePointers::get_age(std::size_t n) const;

1092 18 get_python_pointer 0 4 1445 39 MemoryUsagePointers::get_python_pointer 0 1 367 0
71
PyObject *MemoryUsagePointers::get_python_pointer(std::size_t n) const;

1093 5 clear 0 4 1445 26 MemoryUsagePointers::clear 0 1 368 39
/**
 * Empties the set of pointers.
 */
38
void MemoryUsagePointers::clear(void);

1094 6 output 0 4 1445 27 MemoryUsagePointers::output 0 1 369 10
/**
 *
 */
58
void MemoryUsagePointers::output(std::ostream &out) const;

1095 10 ISubStream 0 4 1446 22 ISubStream::ISubStream 0 2 370 371 22
/**
 *
 */

/**
 *
 */
142
inline ISubStream::ISubStream(void);
inline explicit ISubStream::ISubStream(IStreamWrapper *source, std::streamoff start, std::streamoff end);

1096 4 open 0 4 1446 16 ISubStream::open 0 1 372 391
/**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */
102
inline ISubStream &ISubStream::open(IStreamWrapper *source, std::streamoff start, std::streamoff end);

1097 5 close 0 4 1446 17 ISubStream::close 0 1 373 92
/**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */
43
inline ISubStream &ISubStream::close(void);

1098 11 ~ISubStream 0 4 1446 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

1099 10 OSubStream 0 4 1448 22 OSubStream::OSubStream 0 2 374 375 22
/**
 *
 */

/**
 *
 */
161
inline OSubStream::OSubStream(void);
inline explicit OSubStream::OSubStream(OStreamWrapper *dest, std::streamoff start, std::streamoff end, bool append = false);

1100 4 open 0 4 1448 16 OSubStream::open 0 1 376 383
/**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */
121
inline OSubStream &OSubStream::open(OStreamWrapper *dest, std::streamoff start, std::streamoff end, bool append = false);

1101 5 close 0 4 1448 17 OSubStream::close 0 1 377 90
/**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */
43
inline OSubStream &OSubStream::close(void);

1102 11 ~OSubStream 0 4 1448 23 OSubStream::~OSubStream 0 0 0
30
OSubStream::~OSubStream(void);

1103 9 SubStream 0 4 1450 20 SubStream::SubStream 0 2 378 379 22
/**
 *
 */

/**
 *
 */
158
inline SubStream::SubStream(void);
inline explicit SubStream::SubStream(StreamWrapper *nested, std::streamoff start, std::streamoff end, bool append = false);

1104 4 open 0 4 1450 15 SubStream::open 0 1 380 278
/**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */
120
inline SubStream &SubStream::open(StreamWrapper *nested, std::streamoff start, std::streamoff end, bool append = false);

1105 5 close 0 4 1450 16 SubStream::close 0 1 381 92
/**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */
41
inline SubStream &SubStream::close(void);

1106 10 ~SubStream 0 4 1450 21 SubStream::~SubStream 0 0 0
28
SubStream::~SubStream(void);

1107 9 Multifile 0 4 1452 20 Multifile::Multifile 0 1 382 10
/**
 *
 */
27
Multifile::Multifile(void);

1108 9 open_read 0 4 1452 20 Multifile::open_read 0 2 383 384 687
/**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
214
bool Multifile::open_read(Filename const &multifile_name, std::streamoff const &offset = 0);
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = false, std::streamoff const &offset = 0);

1109 10 open_write 0 4 1452 21 Multifile::open_write 0 2 385 386 755
/**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
146
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(std::ostream *multifile_stream, bool owns_pointer = false);

1110 15 open_read_write 0 4 1452 26 Multifile::open_read_write 0 2 387 388 727
/**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
157
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(std::iostream *multifile_stream, bool owns_pointer = false);

1111 5 close 0 4 1452 16 Multifile::close 0 1 389 169
/**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */
28
void Multifile::close(void);

1112 18 get_multifile_name 0 4 1452 29 Multifile::get_multifile_name 0 1 390 69
/**
 * Returns the filename of the Multifile, if it is available.
 */
65
inline Filename const &Multifile::get_multifile_name(void) const;

1113 18 set_multifile_name 0 4 1452 29 Multifile::set_multifile_name 0 1 391 209
/**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

1114 13 is_read_valid 0 4 1452 24 Multifile::is_read_valid 0 1 392 154
/**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */
49
inline bool Multifile::is_read_valid(void) const;

1115 14 is_write_valid 0 4 1452 25 Multifile::is_write_valid 0 1 393 162
/**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */
50
inline bool Multifile::is_write_valid(void) const;

1116 12 needs_repack 0 4 1452 23 Multifile::needs_repack 0 1 394 118
/**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */
48
inline bool Multifile::needs_repack(void) const;

1117 13 get_timestamp 0 4 1452 24 Multifile::get_timestamp 0 1 395 299
/**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */
51
inline time_t Multifile::get_timestamp(void) const;

1118 13 set_timestamp 0 4 1452 24 Multifile::set_timestamp 0 1 396 206
/**
 * Changes the overall mudification timestamp of the multifile.  Note that this
 * will be reset to the current time every time you modify a subfile.
 * Only set this if you know what you are doing!
 */
55
inline void Multifile::set_timestamp(time_t timestamp);

1119 20 set_record_timestamp 0 4 1452 31 Multifile::set_record_timestamp 0 1 397 529
/**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

1120 20 get_record_timestamp 0 4 1452 31 Multifile::get_record_timestamp 0 1 398 137
/**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */
56
inline bool Multifile::get_record_timestamp(void) const;

1121 16 set_scale_factor 0 4 1452 27 Multifile::set_scale_factor 0 1 399 782
/**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */
59
void Multifile::set_scale_factor(std::size_t scale_factor);

1122 16 get_scale_factor 0 4 1452 27 Multifile::get_scale_factor 0 1 400 92
/**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */
59
inline std::size_t Multifile::get_scale_factor(void) const;

1123 19 set_encryption_flag 0 4 1452 30 Multifile::set_encryption_flag 0 1 401 461
/**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */
54
inline void Multifile::set_encryption_flag(bool flag);

1124 19 get_encryption_flag 0 4 1452 30 Multifile::get_encryption_flag 0 1 402 163
/**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */
55
inline bool Multifile::get_encryption_flag(void) const;

1125 23 set_encryption_password 0 4 1452 34 Multifile::set_encryption_password 0 1 403 369
/**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */
87
inline void Multifile::set_encryption_password(std::string const &encryption_password);

1126 23 get_encryption_password 0 4 1452 34 Multifile::get_encryption_password 0 1 404 141
/**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */
73
inline std::string const &Multifile::get_encryption_password(void) const;

1127 24 set_encryption_algorithm 0 4 1452 35 Multifile::set_encryption_algorithm 0 1 405 659
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */
89
inline void Multifile::set_encryption_algorithm(std::string const &encryption_algorithm);

1128 24 get_encryption_algorithm 0 4 1452 35 Multifile::get_encryption_algorithm 0 1 406 96
/**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */
74
inline std::string const &Multifile::get_encryption_algorithm(void) const;

1129 25 set_encryption_key_length 0 4 1452 36 Multifile::set_encryption_key_length 0 1 407 611
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

1130 25 get_encryption_key_length 0 4 1452 36 Multifile::get_encryption_key_length 0 1 408 108
/**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */
60
inline int Multifile::get_encryption_key_length(void) const;

1131 30 set_encryption_iteration_count 0 4 1452 41 Multifile::set_encryption_iteration_count 0 1 409 740
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

1132 30 get_encryption_iteration_count 0 4 1452 41 Multifile::get_encryption_iteration_count 0 1 410 84
/**
 * Returns the value that was specified by set_encryption_iteration_count().
 */
65
inline int Multifile::get_encryption_iteration_count(void) const;

1133 11 add_subfile 0 4 1452 22 Multifile::add_subfile 0 2 411 412 1397
/**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */

/**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */
237
std::string Multifile::add_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);
std::string Multifile::add_subfile(std::string const &subfile_name, std::istream *subfile_data, int compression_level);

1134 14 update_subfile 0 4 1452 25 Multifile::update_subfile 0 1 413 451
/**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */
120
std::string Multifile::update_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);

1135 13 add_signature 0 4 1452 24 Multifile::add_signature 0 2 414 415 3062
/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The signature certificate is the first certificate on the CertChain object.
 * Any remaining certificates are support certificates to authenticate the
 * first one.
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 */
230
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, std::string const &password = "");
bool Multifile::add_signature(Filename const &composite, std::string const &password = "");

1136 18 get_num_signatures 0 4 1452 29 Multifile::get_num_signatures 0 1 416 555
/**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */
46
int Multifile::get_num_signatures(void) const;

1137 26 get_signature_subject_name 0 4 1452 37 Multifile::get_signature_subject_name 0 1 417 352
/**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */
63
std::string Multifile::get_signature_subject_name(int n) const;

1138 27 get_signature_friendly_name 0 4 1452 38 Multifile::get_signature_friendly_name 0 1 418 299
/**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */
64
std::string Multifile::get_signature_friendly_name(int n) const;

1139 24 get_signature_public_key 0 4 1452 35 Multifile::get_signature_public_key 0 1 419 379
/**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */
61
std::string Multifile::get_signature_public_key(int n) const;

1140 27 print_signature_certificate 0 4 1452 38 Multifile::print_signature_certificate 0 1 420 158
/**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */
76
void Multifile::print_signature_certificate(int n, std::ostream &out) const;

1141 27 write_signature_certificate 0 4 1452 38 Multifile::write_signature_certificate 0 1 421 140
/**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */
76
void Multifile::write_signature_certificate(int n, std::ostream &out) const;

1142 30 validate_signature_certificate 0 4 1452 41 Multifile::validate_signature_certificate 0 1 422 289
/**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */
59
int Multifile::validate_signature_certificate(int n) const;

1143 5 flush 0 4 1452 16 Multifile::flush 0 1 423 691
/**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */
28
bool Multifile::flush(void);

1144 6 repack 0 4 1452 17 Multifile::repack 0 1 424 587
/**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */
29
bool Multifile::repack(void);

1145 16 get_num_subfiles 0 4 1452 27 Multifile::get_num_subfiles 0 1 425 169
/**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */
44
int Multifile::get_num_subfiles(void) const;

1146 12 find_subfile 0 4 1452 23 Multifile::find_subfile 0 1 426 127
/**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */
67
int Multifile::find_subfile(std::string const &subfile_name) const;

1147 13 has_directory 0 4 1452 24 Multifile::has_directory 0 1 427 203
/**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */
69
bool Multifile::has_directory(std::string const &subfile_name) const;

1148 14 scan_directory 0 4 1452 25 Multifile::scan_directory 0 1 428 420
/**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */
95
bool Multifile::scan_directory(vector_string &contents, std::string const &subfile_name) const;

1149 14 remove_subfile 0 4 1452 25 Multifile::remove_subfile 0 2 429 430 912
/**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */

/**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */
114
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(std::string const &subfile_name);

1150 16 get_subfile_name 0 4 1452 27 Multifile::get_subfile_name 0 1 431 47
/**
 * Returns the name of the nth subfile.
 */
64
std::string const &Multifile::get_subfile_name(int index) const;

1151 18 get_subfile_length 0 4 1452 29 Multifile::get_subfile_length 0 1 432 170
/**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */
59
std::size_t Multifile::get_subfile_length(int index) const;

1152 21 get_subfile_timestamp 0 4 1452 32 Multifile::get_subfile_timestamp 0 1 433 270
/**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */
57
time_t Multifile::get_subfile_timestamp(int index) const;

1153 21 is_subfile_compressed 0 4 1452 32 Multifile::is_subfile_compressed 0 1 434 120
/**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */
55
bool Multifile::is_subfile_compressed(int index) const;

1154 20 is_subfile_encrypted 0 4 1452 31 Multifile::is_subfile_encrypted 0 1 435 119
/**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */
54
bool Multifile::is_subfile_encrypted(int index) const;

1155 15 is_subfile_text 0 4 1452 26 Multifile::is_subfile_text 0 1 436 343
/**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */
49
bool Multifile::is_subfile_text(int index) const;

1156 13 get_index_end 0 4 1452 24 Multifile::get_index_end 0 1 437 371
/**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */
52
std::streamoff Multifile::get_index_end(void) const;

1157 26 get_subfile_internal_start 0 4 1452 37 Multifile::get_subfile_internal_start 0 1 438 338
/**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */
70
std::streamoff Multifile::get_subfile_internal_start(int index) const;

1158 27 get_subfile_internal_length 0 4 1452 38 Multifile::get_subfile_internal_length 0 1 439 322
/**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */
68
std::size_t Multifile::get_subfile_internal_length(int index) const;

1159 12 read_subfile 0 4 1452 23 Multifile::read_subfile 0 1 440 253
/**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */

/**
 * Fills a string with the entire contents of the indicated subfile.
 */

/**
 * Fills a pvector with the entire contents of the indicated subfile.
 */
55
inline vector_uchar Multifile::read_subfile(int index);

1160 17 open_read_subfile 0 4 1452 28 Multifile::open_read_subfile 0 1 441 937
/**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */

/**
 * This variant of open_read_subfile() is used internally only, and accepts a
 * pointer to the internal Subfile object, which is assumed to be valid and
 * written to the multifile.
 */
54
std::istream *Multifile::open_read_subfile(int index);

1161 18 close_read_subfile 0 4 1452 29 Multifile::close_read_subfile 0 1 442 246
/**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
64
static void Multifile::close_read_subfile(std::istream *stream);

1162 15 extract_subfile 0 4 1452 26 Multifile::extract_subfile 0 1 443 68
/**
 * Extracts the nth subfile into a file with the given name.
 */
69
bool Multifile::extract_subfile(int index, Filename const &filename);

1163 18 extract_subfile_to 0 4 1452 29 Multifile::extract_subfile_to 0 1 444 61
/**
 * Extracts the nth subfile to the indicated ostream.
 */
65
bool Multifile::extract_subfile_to(int index, std::ostream &out);

1164 15 compare_subfile 0 4 1452 26 Multifile::compare_subfile 0 1 445 509
/**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */
69
bool Multifile::compare_subfile(int index, Filename const &filename);

1165 6 output 0 4 1452 17 Multifile::output 0 1 446 10
/**
 *
 */
48
void Multifile::output(std::ostream &out) const;

1166 2 ls 0 4 1452 13 Multifile::ls 0 1 447 61
/**
 * Shows a list of all subfiles within the Multifile.
 */
58
void Multifile::ls(std::ostream &out = ::std::cout) const;

1167 16 get_magic_number 0 4 1452 27 Multifile::get_magic_number 0 1 448 108
/**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */
60
static inline std::string Multifile::get_magic_number(void);

1168 17 set_header_prefix 0 4 1452 28 Multifile::set_header_prefix 0 1 449 644
/**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */
68
void Multifile::set_header_prefix(std::string const &header_prefix);

1169 17 get_header_prefix 0 4 1452 28 Multifile::get_header_prefix 0 1 450 113
/**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */
67
inline std::string const &Multifile::get_header_prefix(void) const;

1170 7 Namable 0 4 1455 16 Namable::Namable 0 2 451 452 10
/**
 *
 */
123
inline explicit Namable::Namable(std::string const &initial_name = "");
inline Namable::Namable(Namable const &) = default;

1171 8 set_name 0 4 1455 17 Namable::set_name 0 1 453 10
/**
 *
 */
55
inline void Namable::set_name(std::string const &name);

1172 10 clear_name 0 4 1455 19 Namable::clear_name 0 1 454 46
/**
 * Resets the Namable's name to empty.
 */
38
inline void Namable::clear_name(void);

1173 8 has_name 0 4 1455 17 Namable::has_name 0 1 455 94
/**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */
42
inline bool Namable::has_name(void) const;

1174 8 get_name 0 4 1455 17 Namable::get_name 0 1 456 10
/**
 *
 */
56
inline std::string const &Namable::get_name(void) const;

1175 6 output 0 4 1455 15 Namable::output 0 1 457 251
// In the absence of any definition to the contrary, outputting a Namable
// will write out its name.

/**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */
53
inline void Namable::output(std::ostream &out) const;

1176 14 get_class_type 0 4 1455 23 Namable::get_class_type 0 1 458 0
48
static TypeHandle Namable::get_class_type(void);

1177 8 ~Namable 0 4 1455 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

1178 18 clear_certificates 0 4 1457 34 OpenSSLWrapper::clear_certificates 0 1 459 200
/**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */
46
void OpenSSLWrapper::clear_certificates(void);

1179 17 load_certificates 0 4 1457 33 OpenSSLWrapper::load_certificates 0 1 460 436
/**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
64
int OpenSSLWrapper::load_certificates(Filename const &filename);

1180 30 load_certificates_from_pem_ram 0 4 1457 46 OpenSSLWrapper::load_certificates_from_pem_ram 0 2 461 462 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_pem_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_pem_ram(std::string const &data);

1181 30 load_certificates_from_der_ram 0 4 1457 46 OpenSSLWrapper::load_certificates_from_der_ram 0 2 463 464 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_der_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_der_ram(std::string const &data);

1182 14 get_x509_store 0 4 1457 30 OpenSSLWrapper::get_x509_store 0 1 465 378
/**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */
49
X509_STORE *OpenSSLWrapper::get_x509_store(void);

1183 17 notify_ssl_errors 0 4 1457 33 OpenSSLWrapper::notify_ssl_errors 0 1 466 277
/**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */
45
void OpenSSLWrapper::notify_ssl_errors(void);

1184 23 notify_debug_ssl_errors 0 4 1457 39 OpenSSLWrapper::notify_debug_ssl_errors 0 1 467 84
/**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */
51
void OpenSSLWrapper::notify_debug_ssl_errors(void);

1185 14 get_global_ptr 0 4 1457 30 OpenSSLWrapper::get_global_ptr 0 1 468 10
/**
 *
 */
60
static OpenSSLWrapper *OpenSSLWrapper::get_global_ptr(void);

1186 11 SubfileInfo 0 4 1458 24 SubfileInfo::SubfileInfo 0 4 469 470 471 472 46
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
321
inline SubfileInfo::SubfileInfo(void);
inline explicit SubfileInfo::SubfileInfo(FileReference const *file, std::streamoff start, std::streamsize size);
inline explicit SubfileInfo::SubfileInfo(Filename const &filename, std::streamoff start, std::streamsize size);
inline SubfileInfo::SubfileInfo(SubfileInfo const &copy);

1187 10 operator = 0 4 1458 23 SubfileInfo::operator = 0 1 473 0
61
inline void SubfileInfo::operator =(SubfileInfo const &copy);

1188 8 is_empty 0 4 1458 21 SubfileInfo::is_empty 0 1 474 98
/**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */
46
inline bool SubfileInfo::is_empty(void) const;

1189 8 get_file 0 4 1458 21 SubfileInfo::get_file 0 1 475 63
/**
 * Returns the FileReference that represents this file.
 */
62
inline FileReference const *SubfileInfo::get_file(void) const;

1190 12 get_filename 0 4 1458 25 SubfileInfo::get_filename 0 1 476 38
/**
 * A shortcut to the filename.
 */
61
inline Filename const &SubfileInfo::get_filename(void) const;

1191 9 get_start 0 4 1458 22 SubfileInfo::get_start 0 1 477 77
/**
 * Returns the offset within the file at which this file data begins.
 */
57
inline std::streamoff SubfileInfo::get_start(void) const;

1192 8 get_size 0 4 1458 21 SubfileInfo::get_size 0 1 478 115
/**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */
57
inline std::streamsize SubfileInfo::get_size(void) const;

1193 6 output 0 4 1458 19 SubfileInfo::output 0 1 479 10
/**
 *
 */
50
void SubfileInfo::output(std::ostream &out) const;

1194 12 ~SubfileInfo 0 4 1458 25 SubfileInfo::~SubfileInfo 0 0 0
32
SubfileInfo::~SubfileInfo(void);

1195 15 get_file_system 0 6 1459 28 VirtualFile::get_file_system 0 1 480 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

1196 12 get_filename 0 6 1459 25 VirtualFile::get_filename 0 1 481 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

1197 21 get_original_filename 0 4 1459 34 VirtualFile::get_original_filename 0 1 482 166
/**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */
70
inline Filename const &VirtualFile::get_original_filename(void) const;

1198 8 has_file 0 6 1459 21 VirtualFile::has_file 0 1 483 61
/**
 * Returns true if this file exists, false otherwise.
 */
47
virtual bool VirtualFile::has_file(void) const;

1199 12 is_directory 0 6 1459 25 VirtualFile::is_directory 0 1 484 117
/**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */
51
virtual bool VirtualFile::is_directory(void) const;

1200 15 is_regular_file 0 6 1459 28 VirtualFile::is_regular_file 0 1 485 115
/**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */
54
virtual bool VirtualFile::is_regular_file(void) const;

1201 11 is_writable 0 6 1459 24 VirtualFile::is_writable 0 1 486 153
/**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */
50
virtual bool VirtualFile::is_writable(void) const;

1202 11 delete_file 0 6 1459 24 VirtualFile::delete_file 0 1 487 199
/**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */
44
virtual bool VirtualFile::delete_file(void);

1203 11 rename_file 0 6 1459 24 VirtualFile::rename_file 0 1 488 589
/**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
61
virtual bool VirtualFile::rename_file(VirtualFile *new_file);

1204 9 copy_file 0 6 1459 22 VirtualFile::copy_file 0 1 489 123
/**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */
59
virtual bool VirtualFile::copy_file(VirtualFile *new_file);

1205 14 scan_directory 0 4 1459 27 VirtualFile::scan_directory 0 1 490 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

1206 6 output 0 4 1459 19 VirtualFile::output 0 1 491 10
/**
 *
 */
50
void VirtualFile::output(std::ostream &out) const;

1207 2 ls 0 4 1459 15 VirtualFile::ls 0 1 492 66
/**
 * If the file represents a directory, lists its contents.
 */
60
void VirtualFile::ls(std::ostream &out = ::std::cout) const;

1208 6 ls_all 0 4 1459 19 VirtualFile::ls_all 0 1 493 113
/**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */
64
void VirtualFile::ls_all(std::ostream &out = ::std::cout) const;

1209 9 read_file 0 4 1459 22 VirtualFile::read_file 0 1 494 352
/**
 * Returns the entire contents of the file as a string.
 */

/**
 * Fills up the indicated string with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */

/**
 * Fills up the indicated pvector with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */
57
PyObject *VirtualFile::read_file(bool auto_unwrap) const;

1210 14 open_read_file 0 6 1459 27 VirtualFile::open_read_file 0 1 495 179
/**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */
74
virtual std::istream *VirtualFile::open_read_file(bool auto_unwrap) const;

1211 15 close_read_file 0 6 1459 28 VirtualFile::close_read_file 0 1 496 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
70
virtual void VirtualFile::close_read_file(std::istream *stream) const;

1212 19 was_read_successful 0 6 1459 32 VirtualFile::was_read_successful 0 1 497 324
/**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */
58
virtual bool VirtualFile::was_read_successful(void) const;

1213 10 write_file 0 4 1459 23 VirtualFile::write_file 0 1 498 197
/**
 * Writes the entire contents of the file as a string, if it is writable.
 */

/**
 * Writes the indicated data to the file, if it is writable.  Returns true on
 * success, false otherwise.
 */
66
PyObject *VirtualFile::write_file(PyObject *data, bool auto_wrap);

1214 15 open_write_file 0 6 1459 28 VirtualFile::open_write_file 0 1 499 179
/**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
82
virtual std::ostream *VirtualFile::open_write_file(bool auto_wrap, bool truncate);

1215 16 open_append_file 0 6 1459 29 VirtualFile::open_append_file 0 1 500 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
58
virtual std::ostream *VirtualFile::open_append_file(void);

1216 16 close_write_file 0 6 1459 29 VirtualFile::close_write_file 0 1 501 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
virtual void VirtualFile::close_write_file(std::ostream *stream);

1217 20 open_read_write_file 0 6 1459 33 VirtualFile::open_read_write_file 0 1 502 180
/**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
72
virtual std::iostream *VirtualFile::open_read_write_file(bool truncate);

1218 21 open_read_append_file 0 6 1459 34 VirtualFile::open_read_append_file 0 1 503 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
64
virtual std::iostream *VirtualFile::open_read_append_file(void);

1219 21 close_read_write_file 0 6 1459 34 VirtualFile::close_read_write_file 0 1 504 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
71
virtual void VirtualFile::close_read_write_file(std::iostream *stream);

1220 13 get_file_size 0 6 1459 26 VirtualFile::get_file_size 0 2 505 506 329
/**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */

/**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */
143
virtual std::streamsize VirtualFile::get_file_size(std::istream *stream) const;
virtual std::streamsize VirtualFile::get_file_size(void) const;

1221 13 get_timestamp 0 6 1459 26 VirtualFile::get_timestamp 0 1 507 434
/**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */
54
virtual time_t VirtualFile::get_timestamp(void) const;

1222 15 get_system_info 0 6 1459 28 VirtualFile::get_system_info 0 1 508 330
/**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */
61
virtual bool VirtualFile::get_system_info(SubfileInfo &info);

1223 14 get_class_type 0 4 1459 27 VirtualFile::get_class_type 0 1 509 0
52
static TypeHandle VirtualFile::get_class_type(void);

1224 12 ~VirtualFile 0 4 1459 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

1225 14 get_class_type 0 4 1460 36 VirtualFileComposite::get_class_type 0 1 510 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

1226 21 ~VirtualFileComposite 0 4 1460 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

1227 15 get_file_system 0 4 1461 33 VirtualFileMount::get_file_system 0 1 511 68
/**
 * Returns the file system this mount object is attached to.
 */
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

1228 15 get_mount_point 0 4 1461 33 VirtualFileMount::get_mount_point 0 1 512 161
/**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

1229 15 get_mount_flags 0 4 1461 33 VirtualFileMount::get_mount_flags 0 1 513 100
/**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */
57
inline int VirtualFileMount::get_mount_flags(void) const;

1230 6 output 0 6 1461 24 VirtualFileMount::output 0 1 514 10
/**
 *
 */
63
virtual void VirtualFileMount::output(std::ostream &out) const;

1231 5 write 0 6 1461 23 VirtualFileMount::write 0 1 515 10
/**
 *
 */
62
virtual void VirtualFileMount::write(std::ostream &out) const;

1232 14 get_class_type 0 4 1461 32 VirtualFileMount::get_class_type 0 1 516 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

1233 25 VirtualFileMountMultifile 0 4 1462 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 517 10
/**
 *
 */
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

1234 13 get_multifile 0 4 1462 40 VirtualFileMountMultifile::get_multifile 0 1 518 76
/**
 * Returns the Multifile pointer that this mount object is based on.
 */
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

1235 14 get_class_type 0 4 1462 41 VirtualFileMountMultifile::get_class_type 0 1 519 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

1236 23 VirtualFileMountRamdisk 0 4 1463 48 VirtualFileMountRamdisk::VirtualFileMountRamdisk 0 1 520 10
/**
 *
 */
55
VirtualFileMountRamdisk::VirtualFileMountRamdisk(void);

1237 14 get_class_type 0 4 1463 39 VirtualFileMountRamdisk::get_class_type 0 1 521 0
64
static TypeHandle VirtualFileMountRamdisk::get_class_type(void);

1238 24 ~VirtualFileMountRamdisk 0 4 1463 49 VirtualFileMountRamdisk::~VirtualFileMountRamdisk 0 0 0
56
VirtualFileMountRamdisk::~VirtualFileMountRamdisk(void);

1239 22 VirtualFileMountSystem 0 4 1464 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 522 10
/**
 *
 */
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

1240 21 get_physical_filename 0 4 1464 45 VirtualFileMountSystem::get_physical_filename 0 1 523 112
/**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

1241 14 get_class_type 0 4 1464 38 VirtualFileMountSystem::get_class_type 0 1 524 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

1242 23 ~VirtualFileMountSystem 0 4 1464 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

1243 10 ZipArchive 0 4 1465 22 ZipArchive::ZipArchive 0 1 525 10
/**
 *
 */
29
ZipArchive::ZipArchive(void);

1244 9 open_read 0 4 1465 21 ZipArchive::open_read 0 2 526 527 731
/**
 * Opens the named ZipArchive on disk for reading.  The ZipArchive index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */

/**
 * Opens an anonymous ZipArchive for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 *
 * The given stream must be seekable.
 */
132
bool ZipArchive::open_read(Filename const &filename);
bool ZipArchive::open_read(IStreamWrapper *stream, bool owns_pointer = false);

1245 10 open_write 0 4 1465 22 ZipArchive::open_write 0 2 528 529 681
/**
 * Opens the named ZipArchive on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The ZipArchive is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */

/**
 * Opens an anonymous ZipArchive for writing using an ostream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 */
132
bool ZipArchive::open_write(Filename const &filename);
bool ZipArchive::open_write(std::ostream *stream, bool owns_pointer = false);

1246 15 open_read_write 0 4 1465 27 ZipArchive::open_read_write 0 2 530 531 729
/**
 * Opens the named ZipArchive on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */

/**
 * Opens an anonymous ZipArchive for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 */
143
bool ZipArchive::open_read_write(Filename const &filename);
bool ZipArchive::open_read_write(std::iostream *stream, bool owns_pointer = false);

1247 6 verify 0 4 1465 18 ZipArchive::verify 0 1 532 69
/**
 * Verifies the integrity of the contents of the ZIP archive.
 */
30
bool ZipArchive::verify(void);

1248 5 close 0 4 1465 17 ZipArchive::close 0 1 533 170
/**
 * Closes the ZipArchive if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */
29
void ZipArchive::close(void);

1249 12 get_filename 0 4 1465 24 ZipArchive::get_filename 0 1 534 70
/**
 * Returns the filename of the ZipArchive, if it is available.
 */
60
inline Filename const &ZipArchive::get_filename(void) const;

1250 12 set_filename 0 4 1465 24 ZipArchive::set_filename 0 1 535 210
/**
 * Replaces the filename of the ZipArchive.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */
63
inline void ZipArchive::set_filename(Filename const &filename);

1251 13 is_read_valid 0 4 1465 25 ZipArchive::is_read_valid 0 1 536 155
/**
 * Returns true if the ZipArchive has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */
50
inline bool ZipArchive::is_read_valid(void) const;

1252 14 is_write_valid 0 4 1465 26 ZipArchive::is_write_valid 0 1 537 164
/**
 * Returns true if the ZipArchive has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the ZipArchive.
 */
51
inline bool ZipArchive::is_write_valid(void) const;

1253 12 needs_repack 0 4 1465 24 ZipArchive::needs_repack 0 1 538 150
/**
 * Returns true if the ZipArchive index is suboptimal and should be repacked.
 * Call repack() to achieve this.  It is not done automatically.
 */
49
inline bool ZipArchive::needs_repack(void) const;

1254 20 set_record_timestamp 0 4 1465 32 ZipArchive::set_record_timestamp 0 1 539 488
/**
 * Sets the flag indicating whether timestamps should be recorded within the
 * ZipArchive or not.  The default is true, indicating the ZipArchive will
 * record timestamps for each subfile that is added.
 *
 * If this is false, the ZipArchive will not record timestamps internally.  In
 * this case, the return value from get_subfile_timestamp() will be zero.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated ZipArchives.
 */
68
inline void ZipArchive::set_record_timestamp(bool record_timestamp);

1255 20 get_record_timestamp 0 4 1465 32 ZipArchive::get_record_timestamp 0 1 540 138
/**
 * Returns the flag indicating whether timestamps should be recorded within
 * the ZipArchive or not.  See set_record_timestamp().
 */
57
inline bool ZipArchive::get_record_timestamp(void) const;

1256 11 add_subfile 0 4 1465 23 ZipArchive::add_subfile 0 2 541 542 956
/**
 * Adds a file on disk as a subfile to the ZipArchive.  The file named by
 * filename will be read and added to the ZipArchive immediately, but the index
 * will not be updated until you call flush().  If there already exists a
 * subfile with the indicated name, it is replaced without examining its
 * contents (but see also update_subfile).
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */

/**
 * Adds a file from a stream as a subfile to the ZipArchive.  The indicated
 * istream will be read and its contents added to the end of the current ZIP
 * file immediately.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the index of the ZIP archive will be
 * rewritten to the end of the file.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */
239
std::string ZipArchive::add_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);
std::string ZipArchive::add_subfile(std::string const &subfile_name, std::istream *subfile_data, int compression_level);

1257 14 update_subfile 0 4 1465 26 ZipArchive::update_subfile 0 1 543 450
/**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the ZIP file is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */
121
std::string ZipArchive::update_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);

1258 17 add_jar_signature 0 4 1465 29 ZipArchive::add_jar_signature 0 1 544 1351
/**
 * Adds a new JAR-style signature to the .zip file.  The file must have been
 * opened in read/write mode.
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_jar_signature() reads the certificate and private key
 * from a PEM-formatted file, for instance as generated by the openssl command.
 * If the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 *
 * It's possible to add multiple signatures, by providing multiple unique
 * aliases.  Note that aliases are considered case-insensitively and only the
 * first 8 characters are considered.
 *
 * There is no separate parameter to pass a certificate chain.  Instead, any
 * necessary certificates are expected to be in the certificate file.
 */

/**
 * Adds a new JAR-style signature to the .zip file.  The file must have been
 * opened in read/write mode.
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * It's possible to add multiple signatures, by providing multiple unique
 * aliases.  Note that aliases are considered case-insensitively and only the
 * first 8 characters are considered.
 *
 * The private key is expected to match the first certificate in the chain.
 */
155
bool ZipArchive::add_jar_signature(Filename const &certificate, Filename const &pkey, std::string const &password = "", std::string const &alias = "cert");

1259 5 flush 0 4 1465 17 ZipArchive::flush 0 1 545 596
/**
 * Ensures that any changes made to the ZIP archive have been synchronized to
 * disk.  In particular, this causes the central directory to be rewritten at
 * the end of the file.
 *
 * This may result in a suboptimal packing in the ZIP file, especially if
 * existing files were changed or files were removed.  To guarantee that the
 * file is as compact as it can be, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */
29
bool ZipArchive::flush(void);

1260 6 repack 0 4 1465 18 ZipArchive::repack 0 1 546 515
/**
 * Forces a complete rewrite of the ZipArchive and all of its contents, so that
 * the files are tightly packed in the file without any gaps.  This is useful to
 * do after removing files, to ensure that the file size is minimized.
 *
 * It is only valid to call this if the ZipArchive was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the ZipArchive.
 *
 * Returns true on success, false on failure.
 */
30
bool ZipArchive::repack(void);

1261 16 get_num_subfiles 0 4 1465 28 ZipArchive::get_num_subfiles 0 1 547 170
/**
 * Returns the number of subfiles within the ZipArchive.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */
45
int ZipArchive::get_num_subfiles(void) const;

1262 12 find_subfile 0 4 1465 24 ZipArchive::find_subfile 0 1 548 128
/**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the ZipArchive.
 */
68
int ZipArchive::find_subfile(std::string const &subfile_name) const;

1263 13 has_directory 0 4 1465 25 ZipArchive::has_directory 0 1 549 205
/**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the ZipArchive.  That is, the ZipArchive contains at
 * least one file named "subfile_name/...".
 */
70
bool ZipArchive::has_directory(std::string const &subfile_name) const;

1264 14 scan_directory 0 4 1465 26 ZipArchive::scan_directory 0 1 550 422
/**
 * Considers subfile_name to be the name of a subdirectory within the
 * ZipArchive, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a ZipArchive; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */
96
bool ZipArchive::scan_directory(vector_string &contents, std::string const &subfile_name) const;

1265 14 remove_subfile 0 4 1465 26 ZipArchive::remove_subfile 0 2 551 552 916
/**
 * Removes the named subfile from the ZipArchive, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The ZipArchive will not be
 * reduced in size after this operation, until the next call to repack().
 */

/**
 * Removes the nth subfile from the ZipArchive.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The ZipArchive will not be
 * reduced in size after this operation, until the next call to repack().
 */
116
void ZipArchive::remove_subfile(int index);
inline bool ZipArchive::remove_subfile(std::string const &subfile_name);

1266 16 get_subfile_name 0 4 1465 28 ZipArchive::get_subfile_name 0 1 553 47
/**
 * Returns the name of the nth subfile.
 */
65
std::string const &ZipArchive::get_subfile_name(int index) const;

1267 18 get_subfile_length 0 4 1465 30 ZipArchive::get_subfile_length 0 1 554 67
/**
 * Returns the uncompressed data length of the nth subfile.
 */
60
std::size_t ZipArchive::get_subfile_length(int index) const;

1268 21 get_subfile_timestamp 0 4 1465 33 ZipArchive::get_subfile_timestamp 0 1 555 270
/**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .zip file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall ZIP file.
 */
58
time_t ZipArchive::get_subfile_timestamp(int index) const;

1269 21 is_subfile_compressed 0 4 1465 33 ZipArchive::is_subfile_compressed 0 1 556 120
/**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */
56
bool ZipArchive::is_subfile_compressed(int index) const;

1270 20 is_subfile_encrypted 0 4 1465 32 ZipArchive::is_subfile_encrypted 0 1 557 119
/**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */
55
bool ZipArchive::is_subfile_encrypted(int index) const;

1271 26 get_subfile_internal_start 0 4 1465 38 ZipArchive::get_subfile_internal_start 0 1 558 339
/**
 * Returns the starting byte position within the ZipArchive at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */
71
std::streamoff ZipArchive::get_subfile_internal_start(int index) const;

1272 27 get_subfile_internal_length 0 4 1465 39 ZipArchive::get_subfile_internal_length 0 1 559 322
/**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */
69
std::size_t ZipArchive::get_subfile_internal_length(int index) const;

1273 12 read_subfile 0 4 1465 24 ZipArchive::read_subfile 0 1 560 253
/**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */

/**
 * Fills a string with the entire contents of the indicated subfile.
 */

/**
 * Fills a pvector with the entire contents of the indicated subfile.
 */
56
inline vector_uchar ZipArchive::read_subfile(int index);

1274 17 open_read_subfile 0 4 1465 29 ZipArchive::open_read_subfile 0 1 561 939
/**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the ZipArchive itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the ZipArchive destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */

/**
 * This variant of open_read_subfile() is used internally only, and accepts a
 * pointer to the internal Subfile object, which is assumed to be valid and
 * written to the multifile.
 */
55
std::istream *ZipArchive::open_read_subfile(int index);

1275 18 close_read_subfile 0 4 1465 30 ZipArchive::close_read_subfile 0 1 562 246
/**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
static void ZipArchive::close_read_subfile(std::istream *stream);

1276 15 extract_subfile 0 4 1465 27 ZipArchive::extract_subfile 0 1 563 68
/**
 * Extracts the nth subfile into a file with the given name.
 */
70
bool ZipArchive::extract_subfile(int index, Filename const &filename);

1277 18 extract_subfile_to 0 4 1465 30 ZipArchive::extract_subfile_to 0 1 564 61
/**
 * Extracts the nth subfile to the indicated ostream.
 */
66
bool ZipArchive::extract_subfile_to(int index, std::ostream &out);

1278 15 compare_subfile 0 4 1465 27 ZipArchive::compare_subfile 0 1 565 509
/**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */
70
bool ZipArchive::compare_subfile(int index, Filename const &filename);

1279 6 output 0 4 1465 18 ZipArchive::output 0 1 566 10
/**
 *
 */
49
void ZipArchive::output(std::ostream &out) const;

1280 2 ls 0 4 1465 14 ZipArchive::ls 0 1 567 62
/**
 * Shows a list of all subfiles within the ZipArchive.
 */
59
void ZipArchive::ls(std::ostream &out = ::std::cout) const;

1281 11 set_comment 0 4 1465 23 ZipArchive::set_comment 0 1 568 136
/**
 * Sets the string which is appended to the very end of the ZIP archive.
 * This string may not be longer than 65535 characters.
 */
57
void ZipArchive::set_comment(std::string const &comment);

1282 11 get_comment 0 4 1465 23 ZipArchive::get_comment 0 1 569 126
/**
 * Returns the comment string that was at the end of the ZIP end-of-directory
 * record, if any.
 * See set_comment().
 */
62
inline std::string const &ZipArchive::get_comment(void) const;

1283 19 VirtualFileMountZip 0 4 1466 40 VirtualFileMountZip::VirtualFileMountZip 0 1 570 10
/**
 *
 */
109
inline VirtualFileMountZip::VirtualFileMountZip(ZipArchive *archive, Filename const &directory = Filename());

1284 11 get_archive 0 4 1466 32 VirtualFileMountZip::get_archive 0 1 571 77
/**
 * Returns the ZipArchive pointer that this mount object is based on.
 */
64
inline ZipArchive *VirtualFileMountZip::get_archive(void) const;

1285 14 get_class_type 0 4 1466 35 VirtualFileMountZip::get_class_type 0 1 572 0
60
static TypeHandle VirtualFileMountZip::get_class_type(void);

1286 9 get_mount 0 4 1467 28 VirtualFileSimple::get_mount 0 1 573 69
/**
 * Returns the VirtualFileMount this file is associated with.
 */
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

1287 19 is_implicit_pz_file 0 4 1467 38 VirtualFileSimple::is_implicit_pz_file 0 1 574 174
/**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

1288 14 get_class_type 0 4 1467 33 VirtualFileSimple::get_class_type 0 1 575 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

1289 18 ~VirtualFileSimple 0 4 1467 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

1290 13 TemporaryFile 0 4 1468 28 TemporaryFile::TemporaryFile 0 2 576 577 10
/**
 *
 */
141
inline explicit TemporaryFile::TemporaryFile(Filename const &filename);
inline TemporaryFile::TemporaryFile(TemporaryFile const &) = default;

1291 14 get_class_type 0 4 1468 29 TemporaryFile::get_class_type 0 1 578 0
54
static TypeHandle TemporaryFile::get_class_type(void);

1292 17 IDecompressStream 0 4 1469 36 IDecompressStream::IDecompressStream 0 2 579 580 22
/**
 *
 */

/**
 *
 */
200
inline IDecompressStream::IDecompressStream(void);
inline explicit IDecompressStream::IDecompressStream(std::istream *source, bool owns_source, std::streamsize source_length = -1, bool header = true);

1293 4 open 0 4 1469 23 IDecompressStream::open 0 1 581 10
/**
 *
 */
146
inline IDecompressStream &IDecompressStream::open(std::istream *source, bool owns_source, std::streamsize source_length = -1, bool header = true);

1294 5 close 0 4 1469 24 IDecompressStream::close 0 1 582 118
/**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */
57
inline IDecompressStream &IDecompressStream::close(void);

1295 18 ~IDecompressStream 0 4 1469 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

1296 15 OCompressStream 0 4 1470 32 OCompressStream::OCompressStream 0 2 583 584 22
/**
 *
 */

/**
 *
 */
179
inline OCompressStream::OCompressStream(void);
inline explicit OCompressStream::OCompressStream(std::ostream *dest, bool owns_dest, int compression_level = 6, bool header = true);

1297 4 open 0 4 1470 21 OCompressStream::open 0 1 585 10
/**
 *
 */
129
inline OCompressStream &OCompressStream::open(std::ostream *dest, bool owns_dest, int compression_level = 6, bool header = true);

1298 5 close 0 4 1470 22 OCompressStream::close 0 1 586 114
/**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */
53
inline OCompressStream &OCompressStream::close(void);

1299 16 ~OCompressStream 0 4 1470 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

1300 13 get_num_files 0 4 1471 30 VirtualFileList::get_num_files 0 1 588 51
/**
 * Returns the number of files in the list.
 */
62
inline std::size_t VirtualFileList::get_num_files(void) const;

1301 8 get_file 0 4 1471 25 VirtualFileList::get_file 0 1 589 44
/**
 * Returns the nth file in the list.
 */
67
inline VirtualFile *VirtualFileList::get_file(std::size_t n) const;

1302 11 operator [] 0 4 1471 28 VirtualFileList::operator [] 0 1 590 44
/**
 * Returns the nth file in the list.
 */
70
inline VirtualFile *VirtualFileList::operator [](std::size_t n) const;

1303 4 size 0 4 1471 21 VirtualFileList::size 0 1 591 51
/**
 * Returns the number of files in the list.
 */
53
inline std::size_t VirtualFileList::size(void) const;

1304 11 operator += 0 4 1471 28 VirtualFileList::operator += 0 1 592 0
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

1305 10 operator + 0 4 1471 27 VirtualFileList::operator + 0 1 593 0
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

1306 15 VirtualFileList 0 4 1471 32 VirtualFileList::VirtualFileList 0 1 587 10
/**
 *
 */
75
inline VirtualFileList::VirtualFileList(VirtualFileList const &) = default;

1307 17 VirtualFileSystem 0 4 1472 36 VirtualFileSystem::VirtualFileSystem 0 1 594 10
/**
 *
 */
43
VirtualFileSystem::VirtualFileSystem(void);

1308 18 ~VirtualFileSystem 0 4 1472 37 VirtualFileSystem::~VirtualFileSystem 0 0 10
/**
 *
 */
44
VirtualFileSystem::~VirtualFileSystem(void);

1309 5 mount 0 4 1472 24 VirtualFileSystem::mount 0 4 595 596 597 598 1358
/**
 * Mounts the indicated Multifile at the given mount point.
 */

/**
 * Mounts the indicated ZipArchive at the given mount point.
 */

/**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */

/**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function than the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */
420
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(ZipArchive *archive, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, std::string const &password = "");
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

1310 10 mount_loop 0 4 1472 29 VirtualFileSystem::mount_loop 0 1 599 587
/**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */
143
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, std::string const &password = "");

1311 7 unmount 0 4 1472 26 VirtualFileSystem::unmount 0 4 600 601 602 603 554
/**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */

/**
 * Unmounts all appearances of the indicated ZipArchive from the file system.
 * Returns the number of appearances unmounted.
 */

/**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */

/**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */
230
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(ZipArchive *archive);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

1312 13 unmount_point 0 4 1472 32 VirtualFileSystem::unmount_point 0 1 604 136
/**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

1313 11 unmount_all 0 4 1472 30 VirtualFileSystem::unmount_all 0 1 605 96
/**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */
41
int VirtualFileSystem::unmount_all(void);

1314 14 get_num_mounts 0 4 1472 33 VirtualFileSystem::get_num_mounts 0 1 606 65
/**
 * Returns the number of individual mounts in the system.
 */
50
int VirtualFileSystem::get_num_mounts(void) const;

1315 9 get_mount 0 4 1472 28 VirtualFileSystem::get_mount 0 1 607 47
/**
 * Returns the nth mount in the system.
 */
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

1316 5 clear 0 4 1475 40 PointerToBase< VirtualFileMount >::clear 0 1 647 0
59
inline void PointerToBase< VirtualFileMount >::clear(void);

1317 6 output 0 4 1475 41 PointerToBase< VirtualFileMount >::output 0 1 648 0
72
void PointerToBase< VirtualFileMount >::output(std::ostream &out) const;

1318 9 PointerTo 0 4 1474 40 PointerTo< VirtualFileMount >::PointerTo 0 4 638 639 640 641 0
353
inline constexpr PointerTo< VirtualFileMount >::PointerTo(void) noexcept = default;
inline explicit constexpr PointerTo< VirtualFileMount >::PointerTo(decltype(nullptr) ) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(VirtualFileMount *ptr) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(PointerTo< VirtualFileMount > const &copy);

1319 1 p 0 4 1474 32 PointerTo< VirtualFileMount >::p 0 1 642 289
// If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness.
82
constexpr VirtualFileMount *PointerTo< VirtualFileMount >::p(void) const noexcept;

1320 10 operator = 0 4 1474 41 PointerTo< VirtualFileMount >::operator = 0 2 643 644 0
175
inline void PointerTo< VirtualFileMount >::operator =(VirtualFileMount *ptr);
inline void PointerTo< VirtualFileMount >::operator =(PointerTo< VirtualFileMount > const &copy);

1321 7 is_null 0 4 1474 38 PointerTo< VirtualFileMount >::is_null 0 1 645 0
63
inline bool PointerTo< VirtualFileMount >::is_null(void) const;

1322 5 clear 0 4 1474 36 PointerTo< VirtualFileMount >::clear 0 1 646 0
55
inline void PointerTo< VirtualFileMount >::clear(void);

1323 10 ~PointerTo 0 4 1474 41 PointerTo< VirtualFileMount >::~PointerTo 0 0 0
48
PointerTo< VirtualFileMount >::~PointerTo(void);

1324 5 chdir 0 4 1472 24 VirtualFileSystem::chdir 0 1 608 171
/**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

1325 7 get_cwd 0 4 1472 26 VirtualFileSystem::get_cwd 0 1 609 60
/**
 * Returns the current directory name.  See chdir().
 */
48
Filename VirtualFileSystem::get_cwd(void) const;

1326 14 make_directory 0 4 1472 33 VirtualFileSystem::make_directory 0 1 610 263
/**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */
65
bool VirtualFileSystem::make_directory(Filename const &filename);

1327 19 make_directory_full 0 4 1472 38 VirtualFileSystem::make_directory_full 0 1 611 169
/**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */
70
bool VirtualFileSystem::make_directory_full(Filename const &filename);

1328 8 get_file 0 4 1472 27 VirtualFileSystem::get_file 0 1 612 537
/**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */
111
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = false) const;

1329 11 create_file 0 4 1472 30 VirtualFileSystem::create_file 0 1 613 298
/**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */
82
PointerTo< VirtualFile > VirtualFileSystem::create_file(Filename const &filename);

1330 9 find_file 0 4 1472 28 VirtualFileSystem::find_file 0 1 614 173
/**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */
143
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = false) const;

1331 11 delete_file 0 4 1472 30 VirtualFileSystem::delete_file 0 1 615 208
/**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */
62
bool VirtualFileSystem::delete_file(Filename const &filename);

1332 11 rename_file 0 4 1472 30 VirtualFileSystem::rename_file 0 1 616 599
/**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
97
bool VirtualFileSystem::rename_file(Filename const &orig_filename, Filename const &new_filename);

1333 9 copy_file 0 4 1472 28 VirtualFileSystem::copy_file 0 1 617 131
/**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */
95
bool VirtualFileSystem::copy_file(Filename const &orig_filename, Filename const &new_filename);

1334 16 resolve_filename 0 4 1472 35 VirtualFileSystem::resolve_filename 0 1 618 174
/**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */
147
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, std::string const &default_extension = string()) const;

1335 14 find_all_files 0 4 1472 33 VirtualFileSystem::find_all_files 0 1 619 363
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

1336 6 exists 0 4 1472 25 VirtualFileSystem::exists 0 1 620 71
/**
 * Convenience function; returns true if the named file exists.
 */
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

1337 12 is_directory 0 4 1472 31 VirtualFileSystem::is_directory 0 1 621 93
/**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

1338 15 is_regular_file 0 4 1472 34 VirtualFileSystem::is_regular_file 0 1 622 96
/**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

1339 14 scan_directory 0 4 1472 33 VirtualFileSystem::scan_directory 0 1 623 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

1340 2 ls 0 4 1472 21 VirtualFileSystem::ls 0 1 624 80
/**
 * Convenience function; lists the files within the indicated directory.
 */
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

1341 6 ls_all 0 4 1472 25 VirtualFileSystem::ls_all 0 1 625 117
/**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

1342 5 write 0 4 1472 24 VirtualFileSystem::write 0 1 626 75
/**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */
55
void VirtualFileSystem::write(std::ostream &out) const;

1343 14 get_global_ptr 0 4 1472 33 VirtualFileSystem::get_global_ptr 0 1 627 423
/**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

1344 9 read_file 0 4 1472 28 VirtualFileSystem::read_file 0 1 628 1244
/**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the string up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the pvector up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
89
PyObject *VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

1345 14 open_read_file 0 4 1472 33 VirtualFileSystem::open_read_file 0 1 629 424
/**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
98
std::istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

1346 15 close_read_file 0 4 1472 34 VirtualFileSystem::close_read_file 0 1 630 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
69
static void VirtualFileSystem::close_read_file(std::istream *stream);

1347 10 write_file 0 4 1472 29 VirtualFileSystem::write_file 0 1 631 409
/**
 * Convenience function; writes the entire contents of the indicated file as a
 * string.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */

/**
 * Convenience function; writes the entire contents of the indicated file as a
 * block of data.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */
98
PyObject *VirtualFileSystem::write_file(Filename const &filename, PyObject *data, bool auto_wrap);

1348 15 open_write_file 0 4 1472 34 VirtualFileSystem::open_write_file 0 1 632 345
/**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */
106
std::ostream *VirtualFileSystem::open_write_file(Filename const &filename, bool auto_wrap, bool truncate);

1349 16 open_append_file 0 4 1472 35 VirtualFileSystem::open_append_file 0 1 633 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
76
std::ostream *VirtualFileSystem::open_append_file(Filename const &filename);

1350 16 close_write_file 0 4 1472 35 VirtualFileSystem::close_write_file 0 1 634 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
70
static void VirtualFileSystem::close_write_file(std::ostream *stream);

1351 20 open_read_write_file 0 4 1472 39 VirtualFileSystem::open_read_write_file 0 1 635 169
/**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */
96
std::iostream *VirtualFileSystem::open_read_write_file(Filename const &filename, bool truncate);

1352 21 open_read_append_file 0 4 1472 40 VirtualFileSystem::open_read_append_file 0 1 636 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
82
std::iostream *VirtualFileSystem::open_read_append_file(Filename const &filename);

1353 21 close_read_write_file 0 4 1472 40 VirtualFileSystem::close_read_write_file 0 1 637 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
76
static void VirtualFileSystem::close_read_write_file(std::iostream *stream);

1354 12 StringStream 0 4 1476 26 StringStream::StringStream 0 2 649 650 194
/**
 *
 */

/**
 * This version of the constructor preloads the buffer with the indicated
 * data.
 */

/**
 * This version of the constructor preloads the buffer with the indicated
 * data.
 */
86
StringStream::StringStream(PyObject *source);
inline StringStream::StringStream(void);

1355 10 clear_data 0 4 1476 24 StringStream::clear_data 0 1 651 30
/**
 * Empties the buffer.
 */
43
inline void StringStream::clear_data(void);

1356 13 get_data_size 0 4 1476 27 StringStream::get_data_size 0 1 652 86
/**
 * Returns the number of characters available to be read from the data stream.
 */
53
inline std::size_t StringStream::get_data_size(void);

1357 8 get_data 0 4 1476 22 StringStream::get_data 0 1 653 63
/**
 * Returns the contents of the data stream as a string.
 */
39
PyObject *StringStream::get_data(void);

1358 8 set_data 0 4 1476 22 StringStream::set_data 0 1 654 168
/**
 * Replaces the contents of the data stream.  This implicitly reseeks to 0.
 */

/**
 * Replaces the contents of the data stream.  This implicitly reseeks to 0.
 */
44
void StringStream::set_data(PyObject *data);

1359 13 ~StringStream 0 4 1476 27 StringStream::~StringStream 0 0 0
34
StringStream::~StringStream(void);

1360 13 get_long_time 0 4 1480 24 TrueClock::get_long_time 0 1 655 420
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

/**
 *
 */
38
double TrueClock::get_long_time(void);

1361 14 get_short_time 0 4 1480 25 TrueClock::get_short_time 0 1 656 426
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

/**
 *
 */
46
inline double TrueClock::get_short_time(void);

1362 18 get_short_raw_time 0 4 1480 29 TrueClock::get_short_raw_time 0 1 657 302
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

/**
 *
 */
43
double TrueClock::get_short_raw_time(void);

1363 15 get_error_count 0 4 1480 26 TrueClock::get_error_count 0 1 658 369
/**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */
50
inline int TrueClock::get_error_count(void) const;

1364 14 get_global_ptr 0 4 1480 25 TrueClock::get_global_ptr 0 1 659 70
/**
 * Returns a pointer to the one TrueClock object in the world.
 */
57
static inline TrueClock *TrueClock::get_global_ptr(void);

1365 16 set_cpu_affinity 0 4 1480 27 TrueClock::set_cpu_affinity 0 1 660 10
/**
 *
 */
54
bool TrueClock::set_cpu_affinity(uint32_t mask) const;

1366 9 Patchfile 0 4 1482 20 Patchfile::Patchfile 0 2 661 662 111
/**
 * Create a patch file and initializes internal data
 */

/**
 * Create patch file with buffer to patch
 */
86
Patchfile::Patchfile(void);
explicit Patchfile::Patchfile(PointerTo< Buffer > buffer);

1367 10 ~Patchfile 0 4 1482 21 Patchfile::~Patchfile 0 0 10
/**
 *
 */
28
Patchfile::~Patchfile(void);

1368 5 build 0 4 1482 16 Patchfile::build 0 1 663 359
/**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

1369 11 read_header 0 4 1482 22 Patchfile::read_header 0 1 664 193
/**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */
55
int Patchfile::read_header(Filename const &patch_file);

1370 8 initiate 0 4 1482 19 Patchfile::initiate 0 2 665 666 236
/**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */

/**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

1371 3 run 0 4 1482 14 Patchfile::run 0 1 667 390
/**
 * Perform one buffer's worth of patching.
 * Returns one of the following values:
 * @li @c EU_ok : while patching
 * @li @c EU_success : when done
 * @li @c EU_error_abort : Patching has not been initiated
 * @li @c EU_error_file_invalid : file is corrupted
 * @li @c EU_error_invalid_checksum : incompatible patch file
 * @li @c EU_error_write_file_rename : could not rename file
 */
25
int Patchfile::run(void);

1372 5 apply 0 4 1482 16 Patchfile::apply 0 2 668 669 311
/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */

/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

1373 12 get_progress 0 4 1482 23 Patchfile::get_progress 0 1 670 125
/**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */
55
inline PN_stdfloat Patchfile::get_progress(void) const;

1374 19 set_allow_multifile 0 4 1482 30 Patchfile::set_allow_multifile 0 1 671 362
/**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

1375 19 get_allow_multifile 0 4 1482 30 Patchfile::get_allow_multifile 0 1 672 37
/**
 * See set_allow_multifile().
 */
49
inline bool Patchfile::get_allow_multifile(void);

1376 20 set_footprint_length 0 4 1482 31 Patchfile::set_footprint_length 0 1 673 10
/**
 *
 */
56
inline void Patchfile::set_footprint_length(int length);

1377 20 get_footprint_length 0 4 1482 31 Patchfile::get_footprint_length 0 1 674 10
/**
 *
 */
49
inline int Patchfile::get_footprint_length(void);

1378 22 reset_footprint_length 0 4 1482 33 Patchfile::reset_footprint_length 0 1 675 10
/**
 *
 */
52
inline void Patchfile::reset_footprint_length(void);

1379 15 has_source_hash 0 4 1482 26 Patchfile::has_source_hash 0 1 676 145
/**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */
51
inline bool Patchfile::has_source_hash(void) const;

1380 15 get_source_hash 0 4 1482 26 Patchfile::get_source_hash 0 1 677 52
/**
 * Returns the MD5 hash for the source file.
 */
61
inline HashVal const &Patchfile::get_source_hash(void) const;

1381 15 get_result_hash 0 4 1482 26 Patchfile::get_result_hash 0 1 678 78
/**
 * Returns the MD5 hash for the file after the patch has been applied.
 */
61
inline HashVal const &Patchfile::get_result_hash(void) const;

1382 13 password_hash 0 1 0 13 password_hash 0 1 705 0
103
std::string password_hash(std::string const &password, std::string const &salt, int iters, int keylen);

1383 11 was_deleted 0 4 1486 30 WeakPointerToVoid::was_deleted 0 1 679 384
/**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.  If this returns true, it means that the pointer can not yet be
 * reused, but it does not guarantee that it can be safely accessed.  See the
 * lock() method for a safe way to access the underlying pointer.
 *
 * This will always return true for a null pointer, unlike is_valid_pointer().
 */
55
inline bool WeakPointerToVoid::was_deleted(void) const;

1384 16 is_valid_pointer 0 4 1486 35 WeakPointerToVoid::is_valid_pointer 0 1 680 122
/**
 * Returns true if the pointer is not null and the object has not been
 * deleted.  See was_deleted() for caveats.
 */
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

1385 18 ~WeakPointerToVoid 0 4 1486 37 WeakPointerToVoid::~WeakPointerToVoid 0 0 0
44
WeakPointerToVoid::~WeakPointerToVoid(void);

1386 16 set_string_value 0 4 1487 33 WindowsRegistry::set_string_value 0 1 683 302
/**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */
183
static bool WindowsRegistry::set_string_value(std::string const &key, std::string const &name, std::string const &value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1387 13 set_int_value 0 4 1487 30 WindowsRegistry::set_int_value 0 1 684 142
/**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */
165
static bool WindowsRegistry::set_int_value(std::string const &key, std::string const &name, int value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1388 12 get_key_type 0 4 1487 29 WindowsRegistry::get_key_type 0 1 685 115
/**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */
170
static WindowsRegistry::Type WindowsRegistry::get_key_type(std::string const &key, std::string const &name, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1389 16 get_string_value 0 4 1487 33 WindowsRegistry::get_string_value 0 1 686 291
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */
198
static std::string WindowsRegistry::get_string_value(std::string const &key, std::string const &name, std::string const &default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1390 13 get_int_value 0 4 1487 30 WindowsRegistry::get_int_value 0 1 687 206
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */
172
static int WindowsRegistry::get_int_value(std::string const &key, std::string const &name, int default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1391 15 WindowsRegistry 0 4 1487 32 WindowsRegistry::WindowsRegistry 0 2 681 682 0
132
inline WindowsRegistry::WindowsRegistry(void) = default;
inline WindowsRegistry::WindowsRegistry(WindowsRegistry const &) = default;

1392 16 ~WindowsRegistry 0 4 1487 33 WindowsRegistry::~WindowsRegistry 0 0 0
40
WindowsRegistry::~WindowsRegistry(void);

705
1 0 0 7 15 1494 727 0 0 1 4 copy 1 1492  
2 0 0 7 15 1494 727 0 0 1 4 copy 1 1495  
3 0 0 4 16 1497 0 0 0 1 4 this 3 1494  
4 0 0 6 17 1423 0 0 0 1 4 this 3 1492  
5 0 0 6 18 1481 0 0 0 2 4 this 3 1492  1 n 1 1423  
6 0 0 6 19 1481 0 0 0 2 4 this 3 1492  1 n 1 1423  
7 0 0 6 20 1477 0 0 0 1 4 this 3 1492  
8 0 0 6 21 1477 0 0 0 3 4 this 3 1492  1 n 1 1423  5 count 1 1423  
9 0 0 6 22 1425 0 0 0 1 4 this 3 1492  
10 0 0 6 23 1425 0 0 0 1 4 this 3 1492  
11 0 0 6 24 1423 0 0 0 2 4 this 3 1492  6 param0 0 1481  
12 0 0 6 25 1477 0 0 0 1 4 this 3 1492  
13 0 0 6 26 1425 0 0 0 3 4 this 3 1492  4 view 1 1498  5 flags 1 1425  
14 0 0 4 27 1497 0 0 0 2 4 this 3 1492  4 view 1 1498  
15 0 0 6 13 1421 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1501  5 other 1 1501  
16 0 0 6 14 1421 0 0 0 2 4 this 3 1501  5 other 1 1501  
17 0 0 4 10 1497 0 0 0 1 4 this 3 1503  
18 0 0 4 11 1497 0 0 0 2 4 this 3 1504  3 out 1 1506  
19 0 0 6 7 1421 0 0 130 /**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */ 1 4 this 3 1507  
20 0 0 6 8 1422 0 0 10 /**
 *
 */ 1 4 this 3 1507  
21 0 0 7 38 1511 746 0 0 1 4 copy 1 1509  
22 0 0 7 38 1511 746 0 0 1 4 copy 1 1512  
23 0 0 4 39 1497 0 0 0 1 4 this 3 1511  
24 0 0 6 40 1423 0 0 0 1 4 this 3 1509  
25 0 0 6 41 1484 0 0 0 2 4 this 3 1509  1 n 1 1423  
26 0 0 6 42 1484 0 0 0 2 4 this 3 1509  1 n 1 1423  
27 0 0 6 43 1477 0 0 0 1 4 this 3 1509  
28 0 0 6 44 1477 0 0 0 3 4 this 3 1509  1 n 1 1423  5 count 1 1423  
29 0 0 6 45 1425 0 0 0 1 4 this 3 1509  
30 0 0 6 46 1425 0 0 0 1 4 this 3 1509  
31 0 0 6 47 1423 0 0 0 2 4 this 3 1509  6 param0 0 1484  
32 0 0 6 48 1477 0 0 0 1 4 this 3 1509  
33 0 0 6 49 1425 0 0 0 3 4 this 3 1509  4 view 1 1498  5 flags 1 1425  
34 0 0 4 50 1497 0 0 0 2 4 this 3 1509  4 view 1 1498  
35 0 0 6 36 1421 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1514  5 other 1 1514  
36 0 0 6 37 1421 0 0 0 2 4 this 3 1514  5 other 1 1514  
37 0 0 4 33 1497 0 0 0 1 4 this 3 1516  
38 0 0 4 34 1497 0 0 0 2 4 this 3 1517  3 out 1 1506  
39 0 0 7 61 1521 765 0 0 1 4 copy 1 1519  
40 0 0 7 61 1521 765 0 0 1 4 copy 1 1522  
41 0 0 4 62 1497 0 0 0 1 4 this 3 1521  
42 0 0 6 63 1423 0 0 0 1 4 this 3 1519  
43 0 0 6 64 1425 0 0 0 2 4 this 3 1519  1 n 1 1423  
44 0 0 6 65 1425 0 0 0 2 4 this 3 1519  1 n 1 1423  
45 0 0 6 66 1477 0 0 0 1 4 this 3 1519  
46 0 0 6 67 1477 0 0 0 3 4 this 3 1519  1 n 1 1423  5 count 1 1423  
47 0 0 6 68 1425 0 0 0 1 4 this 3 1519  
48 0 0 6 69 1425 0 0 0 1 4 this 3 1519  
49 0 0 6 70 1423 0 0 0 2 4 this 3 1519  6 param0 0 1425  
50 0 0 6 71 1477 0 0 0 1 4 this 3 1519  
51 0 0 6 72 1425 0 0 0 3 4 this 3 1519  4 view 1 1498  5 flags 1 1425  
52 0 0 4 73 1497 0 0 0 2 4 this 3 1519  4 view 1 1498  
53 0 0 6 59 1421 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1524  5 other 1 1524  
54 0 0 6 60 1421 0 0 0 2 4 this 3 1524  5 other 1 1524  
55 0 0 4 56 1497 0 0 0 1 4 this 3 1526  
56 0 0 4 57 1497 0 0 0 2 4 this 3 1527  3 out 1 1506  
57 0 0 7 84 1531 784 0 0 1 4 copy 1 1529  
58 0 0 7 84 1531 784 0 0 1 4 copy 1 1532  
59 0 0 4 85 1497 0 0 0 1 4 this 3 1531  
60 0 0 6 86 1423 0 0 0 1 4 this 3 1529  
61 0 0 6 87 1534 0 0 0 2 4 this 3 1529  1 n 1 1423  
62 0 0 6 88 1534 0 0 0 2 4 this 3 1529  1 n 1 1423  
63 0 0 6 89 1477 0 0 0 1 4 this 3 1529  
64 0 0 6 90 1477 0 0 0 3 4 this 3 1529  1 n 1 1423  5 count 1 1423  
65 0 0 6 91 1425 0 0 0 1 4 this 3 1529  
66 0 0 6 92 1425 0 0 0 1 4 this 3 1529  
67 0 0 6 93 1423 0 0 0 2 4 this 3 1529  6 param0 0 1534  
68 0 0 6 94 1477 0 0 0 1 4 this 3 1529  
69 0 0 6 95 1425 0 0 0 3 4 this 3 1529  4 view 1 1498  5 flags 1 1425  
70 0 0 4 96 1497 0 0 0 2 4 this 3 1529  4 view 1 1498  
71 0 0 6 82 1421 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1535  5 other 1 1535  
72 0 0 6 83 1421 0 0 0 2 4 this 3 1535  5 other 1 1535  
73 0 0 4 79 1497 0 0 0 1 4 this 3 1537  
74 0 0 4 80 1497 0 0 0 2 4 this 3 1538  3 out 1 1506  
75 0 0 7 100 1540 805 0 0 1 4 copy 1 1495  
76 0 0 7 100 1540 805 0 0 1 6 source 1 1477  
77 0 0 7 100 1540 805 0 0 1 11 type_handle 1 1541  
78 0 0 7 101 1540 805 0 0 2 1 n 1 1423  11 type_handle 1 1541  
79 0 0 4 102 1497 0 0 0 1 4 this 3 1540  
80 0 0 6 103 1423 0 0 0 1 4 this 3 1495  
81 0 0 4 104 1497 0 0 0 2 4 this 3 1540  1 x 1 1481  
82 0 0 4 105 1497 0 0 0 1 4 this 3 1540  
83 0 0 6 106 1481 0 0 0 2 4 this 3 1495  1 n 1 1423  
84 0 0 4 107 1497 0 0 0 3 4 this 3 1540  1 n 1 1423  5 value 1 1481  
85 0 0 6 108 1481 0 0 0 2 4 this 3 1495  1 n 1 1423  
86 0 0 4 109 1497 0 0 0 3 4 this 3 1540  1 n 1 1423  5 value 1 1481  
87 0 0 6 110 1477 0 0 0 1 4 this 3 1495  
88 0 0 4 111 1497 0 0 0 2 4 this 3 1540  4 data 1 1477  
89 0 0 6 112 1477 0 0 0 3 4 this 3 1495  1 n 1 1423  5 count 1 1423  
90 0 0 4 113 1497 0 0 0 4 4 this 3 1540  1 n 1 1423  5 count 1 1423  4 data 1 1543  
91 0 0 6 114 1425 0 0 0 1 4 this 3 1495  
92 0 0 6 115 1425 0 0 0 1 4 this 3 1495  
93 0 0 6 116 1423 0 0 0 2 4 this 3 1495  6 param0 0 1481  
94 0 0 6 117 1477 0 0 0 1 4 this 3 1495  
95 0 0 6 118 1425 0 0 0 3 4 this 3 1540  4 view 1 1498  5 flags 1 1425  
96 0 0 4 119 1497 0 0 0 2 4 this 3 1495  4 view 1 1498  
97 0 0 7 123 1544 826 0 0 1 4 copy 1 1512  
98 0 0 7 123 1544 826 0 0 1 6 source 1 1477  
99 0 0 7 123 1544 826 0 0 1 11 type_handle 1 1541  
100 0 0 7 124 1544 826 0 0 2 1 n 1 1423  11 type_handle 1 1541  
101 0 0 4 125 1497 0 0 0 1 4 this 3 1544  
102 0 0 6 126 1423 0 0 0 1 4 this 3 1512  
103 0 0 4 127 1497 0 0 0 2 4 this 3 1544  1 x 1 1484  
104 0 0 4 128 1497 0 0 0 1 4 this 3 1544  
105 0 0 6 129 1484 0 0 0 2 4 this 3 1512  1 n 1 1423  
106 0 0 4 130 1497 0 0 0 3 4 this 3 1544  1 n 1 1423  5 value 1 1484  
107 0 0 6 131 1484 0 0 0 2 4 this 3 1512  1 n 1 1423  
108 0 0 4 132 1497 0 0 0 3 4 this 3 1544  1 n 1 1423  5 value 1 1484  
109 0 0 6 133 1477 0 0 0 1 4 this 3 1512  
110 0 0 4 134 1497 0 0 0 2 4 this 3 1544  4 data 1 1477  
111 0 0 6 135 1477 0 0 0 3 4 this 3 1512  1 n 1 1423  5 count 1 1423  
112 0 0 4 136 1497 0 0 0 4 4 this 3 1544  1 n 1 1423  5 count 1 1423  4 data 1 1543  
113 0 0 6 137 1425 0 0 0 1 4 this 3 1512  
114 0 0 6 138 1425 0 0 0 1 4 this 3 1512  
115 0 0 6 139 1423 0 0 0 2 4 this 3 1512  6 param0 0 1484  
116 0 0 6 140 1477 0 0 0 1 4 this 3 1512  
117 0 0 6 141 1425 0 0 0 3 4 this 3 1544  4 view 1 1498  5 flags 1 1425  
118 0 0 4 142 1497 0 0 0 2 4 this 3 1512  4 view 1 1498  
119 0 0 7 146 1545 847 0 0 1 4 copy 1 1522  
120 0 0 7 146 1545 847 0 0 1 6 source 1 1477  
121 0 0 7 146 1545 847 0 0 1 11 type_handle 1 1541  
122 0 0 7 147 1545 847 0 0 2 1 n 1 1423  11 type_handle 1 1541  
123 0 0 4 148 1497 0 0 0 1 4 this 3 1545  
124 0 0 6 149 1423 0 0 0 1 4 this 3 1522  
125 0 0 4 150 1497 0 0 0 2 4 this 3 1545  1 x 1 1425  
126 0 0 4 151 1497 0 0 0 1 4 this 3 1545  
127 0 0 6 152 1425 0 0 0 2 4 this 3 1522  1 n 1 1423  
128 0 0 4 153 1497 0 0 0 3 4 this 3 1545  1 n 1 1423  5 value 1 1425  
129 0 0 6 154 1425 0 0 0 2 4 this 3 1522  1 n 1 1423  
130 0 0 4 155 1497 0 0 0 3 4 this 3 1545  1 n 1 1423  5 value 1 1425  
131 0 0 6 156 1477 0 0 0 1 4 this 3 1522  
132 0 0 4 157 1497 0 0 0 2 4 this 3 1545  4 data 1 1477  
133 0 0 6 158 1477 0 0 0 3 4 this 3 1522  1 n 1 1423  5 count 1 1423  
134 0 0 4 159 1497 0 0 0 4 4 this 3 1545  1 n 1 1423  5 count 1 1423  4 data 1 1543  
135 0 0 6 160 1425 0 0 0 1 4 this 3 1522  
136 0 0 6 161 1425 0 0 0 1 4 this 3 1522  
137 0 0 6 162 1423 0 0 0 2 4 this 3 1522  6 param0 0 1425  
138 0 0 6 163 1477 0 0 0 1 4 this 3 1522  
139 0 0 6 164 1425 0 0 0 3 4 this 3 1545  4 view 1 1498  5 flags 1 1425  
140 0 0 4 165 1497 0 0 0 2 4 this 3 1522  4 view 1 1498  
141 0 0 7 169 1546 868 0 0 1 4 copy 1 1532  
142 0 0 7 169 1546 868 0 0 1 6 source 1 1477  
143 0 0 7 169 1546 868 0 0 1 11 type_handle 1 1541  
144 0 0 7 170 1546 868 0 0 2 1 n 1 1423  11 type_handle 1 1541  
145 0 0 4 171 1497 0 0 0 1 4 this 3 1546  
146 0 0 6 172 1423 0 0 0 1 4 this 3 1532  
147 0 0 4 173 1497 0 0 0 2 4 this 3 1546  1 x 1 1534  
148 0 0 4 174 1497 0 0 0 1 4 this 3 1546  
149 0 0 6 175 1534 0 0 0 2 4 this 3 1532  1 n 1 1423  
150 0 0 4 176 1497 0 0 0 3 4 this 3 1546  1 n 1 1423  5 value 1 1534  
151 0 0 6 177 1534 0 0 0 2 4 this 3 1532  1 n 1 1423  
152 0 0 4 178 1497 0 0 0 3 4 this 3 1546  1 n 1 1423  5 value 1 1534  
153 0 0 6 179 1477 0 0 0 1 4 this 3 1532  
154 0 0 4 180 1497 0 0 0 2 4 this 3 1546  4 data 1 1477  
155 0 0 6 181 1477 0 0 0 3 4 this 3 1532  1 n 1 1423  5 count 1 1423  
156 0 0 4 182 1497 0 0 0 4 4 this 3 1546  1 n 1 1423  5 count 1 1423  4 data 1 1543  
157 0 0 6 183 1425 0 0 0 1 4 this 3 1532  
158 0 0 6 184 1425 0 0 0 1 4 this 3 1532  
159 0 0 6 185 1423 0 0 0 2 4 this 3 1532  6 param0 0 1534  
160 0 0 6 186 1477 0 0 0 1 4 this 3 1532  
161 0 0 6 187 1425 0 0 0 3 4 this 3 1546  4 view 1 1498  5 flags 1 1425  
162 0 0 4 188 1497 0 0 0 2 4 this 3 1532  4 view 1 1498  
163 0 0 7 225 1549 890 0 0 1 6 param0 0 1547  
164 0 0 6 192 1421 0 0 125 /**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */ 0 
165 0 0 6 193 1421 0 0 168 /**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */ 0 
166 0 0 6 194 1422 0 0 136 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */ 0 
167 0 0 6 195 1422 0 0 132 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */ 0 
168 0 0 6 196 1422 0 0 119 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */ 0 
169 0 0 6 197 1422 0 0 107 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */ 0 
170 0 0 6 198 1422 0 0 190 /**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */ 0 
171 0 0 6 199 1422 0 0 110 /**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */ 0 
172 0 0 6 200 1422 0 0 496 /**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */ 0 
173 0 0 6 201 1422 0 0 113 /**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */ 0 
174 0 0 6 202 1425 0 0 59 /**
 * Returns the number of pointers currently active.
 */ 0 
175 0 0 4 203 1497 0 0 100 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */ 1 6 result 1 1550  
176 0 0 4 204 1497 0 0 122 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */ 2 6 result 1 1550  4 type 1 1541  
177 0 0 4 205 1497 0 0 159 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */ 3 6 result 1 1550  4 from 1 1481  2 to 1 1481  
178 0 0 4 206 1497 0 0 852 /**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */ 1 6 result 1 1550  
179 0 0 4 207 1497 0 0 285 /**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */ 0 
180 0 0 4 208 1497 0 0 70 /**
 * Shows the breakdown of types of all of the active pointers.
 */ 0 
181 0 0 4 209 1497 0 0 118 /**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
182 0 0 4 210 1497 0 0 69 /**
 * Shows the breakdown of ages of all of the active pointers.
 */ 0 
183 0 0 4 211 1497 0 0 117 /**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
184 0 0 6 231 1425 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 1551  
185 0 0 4 232 1497 0 0 538 /**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 1551  
186 0 0 6 233 1421 0 0 865 /**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 1551  
187 0 0 6 236 1421 0 0 135 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 1551  
188 0 0 6 237 1421 0 0 144 /**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 1551  
189 0 0 7 238 1541 0 0 0 0 
190 0 0 6 228 1554 0 0 0 1 4 this 3 1553  
191 0 0 7 241 1557 893 0 0 1 6 param0 0 1555  
192 0 0 6 240 1425 0 0 10 /**
 *
 */ 1 4 this 3 1555  
193 0 0 4 250 1497 0 0 0 2 4 this 3 1558  5 level 1 1481  
194 0 0 6 252 1425 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 1559  
195 0 0 4 253 1497 0 0 107 /**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 1559  
196 0 0 6 254 1421 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 1559  
197 0 0 6 255 1421 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 1559  
198 0 0 4 256 1497 0 0 186 /**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */ 1 4 this 3 1559  
199 0 0 7 257 1541 0 0 0 0 
200 0 0 7 260 1561 0 0 0 0 
201 0 0 7 260 1561 0 0 0 1 4 from 1 1561  
202 0 0 7 260 1561 0 0 0 1 4 copy 1 1562  
203 0 0 7 260 1561 0 0 64 /**
 * Constructs a datagram from an existing block of data.
 */ 1 4 data 1 1564  
204 0 0 6 261 1561 0 0 0 2 4 this 3 1561  4 from 1 1561  
205 0 0 6 261 1561 0 0 0 2 4 this 3 1561  4 copy 1 1562  
206 0 0 4 262 1497 0 0 90 /**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */ 1 4 this 3 1561  
207 0 0 4 263 1497 0 0 111 /**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */ 3 4 this 3 1562  3 out 1 1506  6 indent 1 1566  
208 0 0 4 264 1497 0 0 48 /**
 * Adds a boolean value to the datagram.
 */ 2 4 this 3 1561  5 value 1 1421  
209 0 0 4 265 1497 0 0 55 /**
 * Adds a signed 8-bit integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1567  
210 0 0 4 266 1497 0 0 58 /**
 * Adds an unsigned 8-bit integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1569  
211 0 0 4 267 1497 0 0 56 /**
 * Adds a signed 16-bit integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1570  
212 0 0 4 268 1497 0 0 56 /**
 * Adds a signed 32-bit integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1572  
213 0 0 4 269 1497 0 0 56 /**
 * Adds a signed 64-bit integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1573  
214 0 0 4 270 1497 0 0 59 /**
 * Adds an unsigned 16-bit integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1574  
215 0 0 4 271 1497 0 0 59 /**
 * Adds an unsigned 32-bit integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1576  
216 0 0 4 272 1497 0 0 59 /**
 * Adds an unsigned 64-bit integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1577  
217 0 0 4 273 1497 0 0 197 /**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 1561  5 value 1 1578  
218 0 0 4 274 1497 0 0 63 /**
 * Adds a 64-bit floating-point number to the datagram.
 */ 2 4 this 3 1561  5 value 1 1579  
219 0 0 4 275 1497 0 0 105 /**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */ 2 4 this 3 1561  5 value 1 1483  
220 0 0 4 276 1497 0 0 67 // These functions pack numbers big-endian, in case that's desired. 2 4 this 3 1561  5 value 1 1570  
221 0 0 4 277 1497 0 0 67 /**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1572  
222 0 0 4 278 1497 0 0 67 /**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1573  
223 0 0 4 279 1497 0 0 70 /**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1574  
224 0 0 4 280 1497 0 0 70 /**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1576  
225 0 0 4 281 1497 0 0 70 /**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 1561  5 value 1 1577  
226 0 0 4 282 1497 0 0 94 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */ 2 4 this 3 1561  5 value 1 1578  
227 0 0 4 283 1497 0 0 74 /**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */ 2 4 this 3 1561  5 value 1 1579  
228 0 0 4 284 1497 0 0 109 /**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 1561  3 str 1 1543  
229 0 0 4 285 1497 0 0 116 /**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */ 2 4 this 3 1561  3 str 1 1543  
230 0 0 4 286 1497 0 0 86 /**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */ 2 4 this 3 1561  3 str 1 1543  
231 0 0 4 287 1497 0 0 238 /**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 1561  3 str 1 1543  4 size 1 1422  
232 0 0 4 288 1497 0 0 58 /**
 * Adds a variable-length wstring to the datagram.
 */ 2 4 this 3 1561  3 str 1 1543  
233 0 0 4 289 1497 0 0 114 /**
 * Adds a variable-length binary blob to the datagram.  This actually adds a
 * count followed by n bytes.
 */ 2 4 this 3 1561  6 param0 0 1564  
234 0 0 4 290 1497 0 0 119 /**
 * Adds a variable-length binary blob to the datagram, using a 32-bit length
 * field to allow very long blobs.
 */ 2 4 this 3 1561  6 param0 0 1564  
235 0 0 4 291 1497 0 0 67 /**
 * Adds the indicated number of zero bytes to the datagram.
 */ 2 4 this 3 1561  4 size 1 1422  
236 0 0 4 292 1497 0 0 65 /**
 * Appends some more raw data to the end of the datagram.
 */ 2 4 this 3 1561  4 data 1 1564  
237 0 0 6 293 1477 0 0 51 /**
 * Returns the datagram's data as a string.
 */ 1 4 this 3 1562  
238 0 0 6 294 1477 0 0 0 1 4 this 3 1562  
239 0 0 6 295 1477 0 0 0 1 4 this 3 1562  
240 0 0 6 296 1422 0 0 55 /**
 * Returns the number of bytes in the datagram.
 */ 1 4 this 3 1562  
241 0 0 4 297 1497 0 0 199 /**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */ 2 4 this 3 1561  4 data 1 1580  
242 0 0 4 298 1497 0 0 237 /**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */ 2 4 this 3 1561  4 data 1 1581  
243 0 0 7 299 1581 0 0 70 /**
 * Returns a const pointer to the actual data in the Datagram.
 */ 1 4 this 3 1562  
244 0 0 7 300 1580 0 0 75 /**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */ 1 4 this 3 1561  
245 0 0 4 301 1497 0 0 343 /**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */ 2 4 this 3 1561  15 stdfloat_double 1 1421  
246 0 0 6 302 1421 0 0 72 /**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */ 1 4 this 3 1562  
247 0 0 6 303 1421 0 0 0 2 4 this 3 1562  5 other 1 1562  
248 0 0 6 304 1421 0 0 0 2 4 this 3 1562  5 other 1 1562  
249 0 0 6 305 1421 0 0 0 2 4 this 3 1562  5 other 1 1562  
250 0 0 4 306 1497 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 1562  3 out 1 1506  
251 0 0 4 307 1497 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 1562  3 out 1 1506  6 indent 1 1566  
252 0 0 7 308 1541 0 0 0 0 
253 0 0 6 311 1421 0 0 0 2 4 this 3 1582  4 data 1 1561  
254 0 0 6 312 1421 0 0 391 /**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */ 2 4 this 3 1582  4 info 1 1583  
255 0 0 6 313 1421 0 0 0 1 4 this 3 1582  
256 0 0 6 314 1421 0 0 0 1 4 this 3 1582  
257 0 0 6 315 1584 0 0 159 /**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 1582  
258 0 0 6 316 1587 0 0 138 /**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */ 1 4 this 3 1585  
259 0 0 7 317 1436 0 0 156 /**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 1582  
260 0 0 7 318 1589 1224 0 153 /**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */ 1 4 this 3 1582  
261 0 0 6 319 1440 0 0 327 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */ 1 4 this 3 1582  
262 0 0 7 321 1590 1012 0 10 /**
 *
 */ 0 
263 0 0 7 321 1590 1012 0 10 /**
 *
 */ 2 8 datagram 1 1562  6 offset 1 1422  
264 0 0 7 321 1590 1012 0 0 1 6 param0 0 1591  
265 0 0 6 322 1421 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 1590  
266 0 0 6 323 1567 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 1590  
267 0 0 6 324 1569 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 1590  
268 0 0 6 325 1570 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 1590  
269 0 0 6 326 1572 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 1590  
270 0 0 6 327 1573 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 1590  
271 0 0 6 328 1574 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 1590  
272 0 0 6 329 1576 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 1590  
273 0 0 6 330 1577 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 1590  
274 0 0 6 331 1578 0 0 68 /**
 * Extracts a 32-bit single-precision floating-point number.
 */ 1 4 this 3 1590  
275 0 0 6 332 1579 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 1590  
276 0 0 6 333 1483 0 0 119 /**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */ 1 4 this 3 1590  
277 0 0 6 334 1570 0 0 55 /**
 * Extracts a signed 16-bit big-endian integer.
 */ 1 4 this 3 1590  
278 0 0 6 335 1572 0 0 55 /**
 * Extracts a signed 32-bit big-endian integer.
 */ 1 4 this 3 1590  
279 0 0 6 336 1573 0 0 55 /**
 * Extracts a signed 64-bit big-endian integer.
 */ 1 4 this 3 1590  
280 0 0 6 337 1574 0 0 58 /**
 * Extracts an unsigned 16-bit big-endian integer.
 */ 1 4 this 3 1590  
281 0 0 6 338 1576 0 0 58 /**
 * Extracts an unsigned 32-bit big-endian integer.
 */ 1 4 this 3 1590  
282 0 0 6 339 1577 0 0 58 /**
 * Extracts an unsigned 64-bit big-endian integer.
 */ 1 4 this 3 1590  
283 0 0 6 340 1578 0 0 79 /**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */ 1 4 this 3 1590  
284 0 0 6 341 1579 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 1590  
285 0 0 6 342 1543 0 0 45 /**
 * Extracts a variable-length string.
 */ 1 4 this 3 1590  
286 0 0 6 343 1543 0 0 72 /**
 * Extracts a variable-length string with a 32-bit length field.
 */ 1 4 this 3 1590  
287 0 0 6 344 1543 0 0 74 /**
 * Extracts a variable-length string, as a NULL-terminated string.
 */ 1 4 this 3 1590  
288 0 0 6 345 1543 0 0 128 /**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */ 2 4 this 3 1590  4 size 1 1422  
289 0 0 6 346 1543 0 0 75 /**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */ 1 4 this 3 1590  
290 0 0 6 347 1564 0 0 50 /**
 * Extracts a variable-length binary blob.
 */ 1 4 this 3 1590  
291 0 0 6 348 1564 0 0 75 /**
 * Extracts a variable-length binary blob with a 32-bit size field.
 */ 1 4 this 3 1590  
292 0 0 4 349 1497 0 0 68 /**
 * Skips over the indicated number of bytes in the datagram.
 */ 2 4 this 3 1590  4 size 1 1422  
293 0 0 6 350 1564 0 0 98 /**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */ 2 4 this 3 1590  4 size 1 1422  
294 0 0 6 351 1564 0 0 115 /**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */ 1 4 this 3 1591  
295 0 0 6 352 1422 0 0 49 /**
 * Return the bytes left in the datagram.
 */ 1 4 this 3 1591  
296 0 0 6 353 1562 0 0 48 /**
 * Return the datagram of this iterator.
 */ 1 4 this 3 1591  
297 0 0 6 354 1422 0 0 100 /**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */ 1 4 this 3 1591  
298 0 0 4 355 1497 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 1591  3 out 1 1506  
299 0 0 4 356 1497 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 1591  3 out 1 1506  6 indent 1 1566  
300 0 0 7 357 1541 0 0 0 0 
301 0 0 6 361 1421 0 0 0 2 4 this 3 1593  4 data 1 1562  
302 0 0 6 362 1421 0 0 349 /**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 1593  6 result 1 1583  8 filename 1 1584  
303 0 0 6 362 1421 0 0 362 /**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 1593  6 result 1 1583  6 source 1 1594  
304 0 0 6 363 1421 0 0 0 1 4 this 3 1593  
305 0 0 4 364 1497 0 0 0 1 4 this 3 1593  
306 0 0 6 365 1584 0 0 159 /**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */ 1 4 this 3 1593  
307 0 0 7 366 1436 0 0 152 /**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */ 1 4 this 3 1593  
308 0 0 6 367 1440 0 0 322 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */ 1 4 this 3 1593  
309 0 0 7 382 1596 1030 0 0 1 6 param0 0 1436  
310 0 0 7 382 1596 1030 0 10 /**
 *
 */ 1 8 filename 1 1584  
311 0 0 6 383 1584 0 0 49 /**
 * Returns the filename of the reference.
 */ 1 4 this 3 1436  
312 0 0 7 384 1541 0 0 0 0 
313 0 0 7 380 1541 0 0 0 0 
314 0 0 6 376 1598 0 0 0 1 4 this 3 1597  
315 0 0 7 378 1553 893 0 0 1 4 this 3 1597  
316 0 0 7 401 1599 1052 0 10 /**
 *
 */ 0 
317 0 0 7 401 1599 1052 0 0 1 6 param0 0 1600  
318 0 0 4 402 1497 0 0 130 /**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */ 2 4 this 3 1599  3 pos 1 1422  
319 0 0 6 403 1422 0 0 106 /**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */ 1 4 this 3 1600  
320 0 0 6 404 1477 0 0 319 /**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */ 2 4 this 3 1599  6 length 1 1422  
321 0 0 6 405 1477 0 0 303 /**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */ 1 4 this 3 1599  
322 0 0 6 406 1477 0 0 0 1 4 this 3 1599  
323 0 0 6 407 1477 0 0 101 /**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */ 1 4 this 3 1600  
324 0 0 6 408 1422 0 0 58 /**
 * Returns the size of the entire buffer contents.
 */ 1 4 this 3 1600  
325 0 0 4 409 1497 0 0 47 /**
 * Empties the current buffer contents.
 */ 1 4 this 3 1599  
326 0 0 6 410 1477 0 0 0 1 4 this 3 1600  
327 0 0 4 411 1497 0 0 0 2 4 this 3 1599  5 state 1 1477  
328 0 0 7 414 1602 1083 0 10 /**
 *
 */ 0 
329 0 0 7 414 1602 1083 0 10 /**
 *
 */ 1 4 copy 1 1603  
330 0 0 6 415 1602 0 0 0 2 4 this 3 1602  4 copy 1 1603  
331 0 0 6 416 1421 0 0 0 2 4 this 3 1603  5 other 1 1603  
332 0 0 6 417 1421 0 0 0 2 4 this 3 1603  5 other 1 1603  
333 0 0 6 418 1421 0 0 0 2 4 this 3 1603  5 other 1 1603  
334 0 0 6 419 1425 0 0 10 /**
 *
 */ 2 4 this 3 1603  5 other 1 1603  
335 0 0 4 420 1497 0 0 86 /**
 * Generates a new HashVal representing the xor of this one and the other one.
 */ 2 4 this 3 1602  5 other 1 1603  
336 0 0 4 421 1497 0 0 65 /**
 * Outputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 1603  3 out 1 1506  
337 0 0 4 422 1497 0 0 64 /**
 * Inputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 1602  2 in 1 1604  
338 0 0 4 423 1497 0 0 64 /**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 1603  3 out 1 1506  
339 0 0 4 424 1497 0 0 63 /**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 1602  2 in 1 1604  
340 0 0 4 425 1497 0 0 128 /**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */ 2 4 this 3 1603  3 out 1 1506  
341 0 0 4 426 1497 0 0 125 /**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */ 2 4 this 3 1602  2 in 1 1604  
342 0 0 4 427 1497 0 0 10 /**
 *
 */ 2 4 this 3 1603  3 out 1 1506  
343 0 0 6 428 1543 0 0 69 /**
 * Returns the HashVal as a string with four decimal numbers.
 */ 1 4 this 3 1603  
344 0 0 6 429 1421 0 0 112 /**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */ 2 4 this 3 1602  4 text 1 1543  
345 0 0 6 430 1543 0 0 63 /**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */ 1 4 this 3 1603  
346 0 0 6 431 1421 0 0 111 /**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */ 2 4 this 3 1602  4 text 1 1543  
347 0 0 6 432 1564 0 0 58 /**
 * Returns the HashVal as a 16-byte binary string.
 */ 1 4 this 3 1603  
348 0 0 6 433 1421 0 0 106 /**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */ 2 4 this 3 1602  4 text 1 1564  
349 0 0 4 434 1497 0 0 10 /**
 *
 */ 2 4 this 3 1603  11 destination 1 1561  
350 0 0 4 435 1497 0 0 10 /**
 *
 */ 2 4 this 3 1602  6 source 1 1590  
351 0 0 4 436 1497 0 0 10 /**
 *
 */ 2 4 this 3 1603  11 destination 1 1605  
352 0 0 4 437 1497 0 0 10 /**
 *
 */ 2 4 this 3 1602  6 source 1 1607  
353 0 0 6 438 1421 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 1602  8 filename 1 1584  
354 0 0 6 439 1421 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 1602  6 stream 1 1604  
355 0 0 4 440 1497 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1602  7 ramfile 1 1600  
356 0 0 4 441 1497 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1602  4 data 1 1543  
357 0 0 4 442 1497 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1602  4 data 1 1564  
358 0 0 4 443 1497 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 3 4 this 3 1602  6 buffer 1 1543  6 length 1 1425  
359 0 0 7 446 1550 1085 0 10 /**
 *
 */ 0 
360 0 0 7 446 1550 1085 0 0 1 6 param0 0 1609  
361 0 0 6 448 1422 0 0 53 /**
 * Returns the number of pointers in the set.
 */ 1 4 this 3 1609  
362 0 0 7 449 1553 893 0 46 /**
 * Returns the nth pointer of the set.
 */ 2 4 this 3 1609  1 n 1 1422  
363 0 0 6 451 1598 0 0 175 /**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * nullptr.
 */ 2 4 this 3 1609  1 n 1 1422  
364 0 0 7 453 1541 0 0 70 /**
 * Returns the actual type of the nth pointer, if it is known.
 */ 2 4 this 3 1609  1 n 1 1422  
365 0 0 6 454 1543 0 0 68 /**
 * Returns the type name of the nth pointer, if it is known.
 */ 2 4 this 3 1609  1 n 1 1422  
366 0 0 6 455 1481 0 0 197 /**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */ 2 4 this 3 1609  1 n 1 1422  
367 0 0 6 456 1477 0 0 0 2 4 this 3 1609  1 n 1 1422  
368 0 0 4 457 1497 0 0 39 /**
 * Empties the set of pointers.
 */ 1 4 this 3 1550  
369 0 0 4 458 1497 0 0 10 /**
 *
 */ 2 4 this 3 1609  3 out 1 1506  
370 0 0 7 461 1611 1098 0 10 /**
 *
 */ 0 
371 0 0 7 461 1611 1098 0 10 /**
 *
 */ 3 6 source 1 1612  5 start 1 1440  3 end 1 1440  
372 0 0 6 462 1611 0 0 391 /**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */ 4 4 this 3 1611  6 source 1 1612  5 start 1 1440  3 end 1 1440  
373 0 0 6 463 1611 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */ 1 4 this 3 1611  
374 0 0 7 467 1614 1102 0 10 /**
 *
 */ 0 
375 0 0 7 467 1614 1102 0 10 /**
 *
 */ 4 4 dest 1 1615  5 start 1 1440  3 end 1 1440  6 append 1 1421  
376 0 0 6 468 1614 0 0 383 /**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */ 5 4 this 3 1614  4 dest 1 1615  5 start 1 1440  3 end 1 1440  6 append 1 1421  
377 0 0 6 469 1614 0 0 90 /**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */ 1 4 this 3 1614  
378 0 0 7 473 1617 1106 0 10 /**
 *
 */ 0 
379 0 0 7 473 1617 1106 0 10 /**
 *
 */ 4 6 nested 1 1618  5 start 1 1440  3 end 1 1440  6 append 1 1421  
380 0 0 6 474 1617 0 0 278 /**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */ 5 4 this 3 1617  6 nested 1 1618  5 start 1 1440  3 end 1 1440  6 append 1 1421  
381 0 0 6 475 1617 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */ 1 4 this 3 1617  
382 0 0 7 478 1620 893 0 10 /**
 *
 */ 0 
383 0 0 6 479 1421 0 0 352 /**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */ 3 4 this 3 1620  14 multifile_name 1 1584  6 offset 1 1440  
384 0 0 6 479 1421 0 0 333 /**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 4 4 this 3 1620  16 multifile_stream 1 1612  12 owns_pointer 1 1421  6 offset 1 1440  
385 0 0 6 480 1421 0 0 420 /**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1620  14 multifile_name 1 1584  
386 0 0 6 480 1421 0 0 333 /**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 1620  16 multifile_stream 1 1506  12 owns_pointer 1 1421  
387 0 0 6 481 1421 0 0 360 /**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */ 2 4 this 3 1620  14 multifile_name 1 1584  
388 0 0 6 481 1421 0 0 365 /**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 1620  16 multifile_stream 1 1621  12 owns_pointer 1 1421  
389 0 0 4 482 1497 0 0 169 /**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */ 1 4 this 3 1620  
390 0 0 6 483 1584 0 0 69 /**
 * Returns the filename of the Multifile, if it is available.
 */ 1 4 this 3 1622  
391 0 0 4 484 1497 0 0 209 /**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */ 2 4 this 3 1620  14 multifile_name 1 1584  
392 0 0 6 485 1421 0 0 154 /**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */ 1 4 this 3 1622  
393 0 0 6 486 1421 0 0 162 /**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */ 1 4 this 3 1622  
394 0 0 6 487 1421 0 0 118 /**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */ 1 4 this 3 1622  
395 0 0 6 488 1587 0 0 299 /**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */ 1 4 this 3 1622  
396 0 0 4 489 1497 0 0 206 /**
 * Changes the overall mudification timestamp of the multifile.  Note that this
 * will be reset to the current time every time you modify a subfile.
 * Only set this if you know what you are doing!
 */ 2 4 this 3 1620  9 timestamp 1 1587  
397 0 0 4 490 1497 0 0 529 /**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */ 2 4 this 3 1620  16 record_timestamp 1 1421  
398 0 0 6 491 1421 0 0 137 /**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */ 1 4 this 3 1622  
399 0 0 4 492 1497 0 0 782 /**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */ 2 4 this 3 1620  12 scale_factor 1 1422  
400 0 0 6 493 1422 0 0 92 /**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */ 1 4 this 3 1622  
401 0 0 4 494 1497 0 0 461 /**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */ 2 4 this 3 1620  4 flag 1 1421  
402 0 0 6 495 1421 0 0 163 /**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */ 1 4 this 3 1622  
403 0 0 4 496 1497 0 0 369 /**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */ 2 4 this 3 1620  19 encryption_password 1 1543  
404 0 0 6 497 1543 0 0 141 /**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */ 1 4 this 3 1622  
405 0 0 4 498 1497 0 0 659 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */ 2 4 this 3 1620  20 encryption_algorithm 1 1543  
406 0 0 6 499 1543 0 0 96 /**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */ 1 4 this 3 1622  
407 0 0 4 500 1497 0 0 611 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */ 2 4 this 3 1620  21 encryption_key_length 1 1425  
408 0 0 6 501 1425 0 0 108 /**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */ 1 4 this 3 1622  
409 0 0 4 502 1497 0 0 740 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */ 2 4 this 3 1620  26 encryption_iteration_count 1 1425  
410 0 0 6 503 1425 0 0 84 /**
 * Returns the value that was specified by set_encryption_iteration_count().
 */ 1 4 this 3 1622  
411 0 0 6 504 1543 0 0 618 /**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1620  12 subfile_name 1 1543  8 filename 1 1584  17 compression_level 1 1425  
412 0 0 6 504 1543 0 0 777 /**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1620  12 subfile_name 1 1543  12 subfile_data 1 1604  17 compression_level 1 1425  
413 0 0 6 505 1543 0 0 451 /**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */ 4 4 this 3 1620  12 subfile_name 1 1543  8 filename 1 1584  17 compression_level 1 1425  
414 0 0 6 506 1421 0 0 1292 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */ 5 4 this 3 1620  11 certificate 1 1584  5 chain 1 1584  4 pkey 1 1584  8 password 1 1543  
415 0 0 6 506 1421 0 0 724 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */ 3 4 this 3 1620  9 composite 1 1584  8 password 1 1543  
416 0 0 6 507 1425 0 0 555 /**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */ 1 4 this 3 1622  
417 0 0 6 508 1543 0 0 352 /**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */ 2 4 this 3 1622  1 n 1 1425  
418 0 0 6 509 1543 0 0 299 /**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */ 2 4 this 3 1622  1 n 1 1425  
419 0 0 6 510 1543 0 0 379 /**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */ 2 4 this 3 1622  1 n 1 1425  
420 0 0 4 511 1497 0 0 158 /**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 1622  1 n 1 1425  3 out 1 1506  
421 0 0 4 512 1497 0 0 140 /**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 1622  1 n 1 1425  3 out 1 1506  
422 0 0 6 513 1425 0 0 289 /**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */ 2 4 this 3 1622  1 n 1 1425  
423 0 0 6 514 1421 0 0 691 /**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1620  
424 0 0 6 515 1421 0 0 587 /**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1620  
425 0 0 6 516 1425 0 0 169 /**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */ 1 4 this 3 1622  
426 0 0 6 517 1425 0 0 127 /**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */ 2 4 this 3 1622  12 subfile_name 1 1543  
427 0 0 6 518 1421 0 0 203 /**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */ 2 4 this 3 1622  12 subfile_name 1 1543  
428 0 0 6 519 1421 0 0 420 /**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */ 3 4 this 3 1622  8 contents 1 1624  12 subfile_name 1 1543  
429 0 0 4 520 1497 0 0 435 /**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1620  5 index 1 1425  
430 0 0 6 520 1421 0 0 475 /**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1620  12 subfile_name 1 1543  
431 0 0 6 521 1543 0 0 47 /**
 * Returns the name of the nth subfile.
 */ 2 4 this 3 1622  5 index 1 1425  
432 0 0 6 523 1422 0 0 170 /**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */ 2 4 this 3 1622  5 index 1 1425  
433 0 0 6 524 1587 0 0 270 /**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */ 2 4 this 3 1622  5 index 1 1425  
434 0 0 6 525 1421 0 0 120 /**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */ 2 4 this 3 1622  5 index 1 1425  
435 0 0 6 526 1421 0 0 119 /**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */ 2 4 this 3 1622  5 index 1 1425  
436 0 0 6 527 1421 0 0 343 /**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */ 2 4 this 3 1622  5 index 1 1425  
437 0 0 6 528 1440 0 0 371 /**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */ 1 4 this 3 1622  
438 0 0 6 529 1440 0 0 338 /**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */ 2 4 this 3 1622  5 index 1 1425  
439 0 0 6 530 1422 0 0 322 /**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */ 2 4 this 3 1622  5 index 1 1425  
440 0 0 6 531 1564 0 0 96 /**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */ 2 4 this 3 1620  5 index 1 1425  
441 0 0 6 532 1604 0 0 745 /**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */ 2 4 this 3 1620  5 index 1 1425  
442 0 0 4 533 1497 0 0 246 /**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1604  
443 0 0 6 534 1421 0 0 68 /**
 * Extracts the nth subfile into a file with the given name.
 */ 3 4 this 3 1620  5 index 1 1425  8 filename 1 1584  
444 0 0 6 535 1421 0 0 61 /**
 * Extracts the nth subfile to the indicated ostream.
 */ 3 4 this 3 1620  5 index 1 1425  3 out 1 1506  
445 0 0 6 536 1421 0 0 509 /**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */ 3 4 this 3 1620  5 index 1 1425  8 filename 1 1584  
446 0 0 4 537 1497 0 0 10 /**
 *
 */ 2 4 this 3 1622  3 out 1 1506  
447 0 0 4 538 1497 0 0 61 /**
 * Shows a list of all subfiles within the Multifile.
 */ 2 4 this 3 1622  3 out 1 1506  
448 0 0 6 539 1543 0 0 108 /**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */ 0 
449 0 0 4 543 1497 0 0 644 /**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */ 2 4 this 3 1620  13 header_prefix 1 1543  
450 0 0 6 544 1543 0 0 113 /**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */ 1 4 this 3 1622  
451 0 0 7 546 1629 1177 0 0 1 6 param0 0 1627  
452 0 0 7 546 1629 1177 0 10 /**
 *
 */ 1 12 initial_name 1 1543  
453 0 0 4 547 1497 0 0 10 /**
 *
 */ 2 4 this 3 1629  4 name 1 1543  
454 0 0 4 548 1497 0 0 46 /**
 * Resets the Namable's name to empty.
 */ 1 4 this 3 1629  
455 0 0 6 549 1421 0 0 94 /**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */ 1 4 this 3 1627  
456 0 0 6 550 1543 0 0 10 /**
 *
 */ 1 4 this 3 1627  
457 0 0 4 553 1497 0 0 148 /**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */ 2 4 this 3 1627  3 out 1 1506  
458 0 0 7 554 1541 0 0 0 0 
459 0 0 4 557 1497 0 0 200 /**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */ 1 4 this 3 1630  
460 0 0 6 558 1425 0 0 436 /**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1630  8 filename 1 1584  
461 0 0 6 559 1425 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 1630  4 data 1 1543  9 data_size 1 1422  
462 0 0 6 559 1425 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1630  4 data 1 1543  
463 0 0 6 560 1425 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 1630  4 data 1 1543  9 data_size 1 1422  
464 0 0 6 560 1425 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1630  4 data 1 1543  
465 0 0 6 561 1631 0 0 378 /**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */ 1 4 this 3 1630  
466 0 0 4 562 1497 0 0 277 /**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */ 1 4 this 3 1630  
467 0 0 4 563 1497 0 0 84 /**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */ 1 4 this 3 1630  
468 0 0 6 564 1630 0 0 10 /**
 *
 */ 0 
469 0 0 7 566 1583 1194 0 10 /**
 *
 */ 0 
470 0 0 7 566 1583 1194 0 10 /**
 *
 */ 3 4 file 1 1436  5 start 1 1440  4 size 1 1634  
471 0 0 7 566 1583 1194 0 10 /**
 *
 */ 3 8 filename 1 1584  5 start 1 1440  4 size 1 1634  
472 0 0 7 566 1583 1194 0 10 /**
 *
 */ 1 4 copy 1 1594  
473 0 0 6 567 1583 0 0 0 2 4 this 3 1583  4 copy 1 1594  
474 0 0 6 568 1421 0 0 98 /**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */ 1 4 this 3 1594  
475 0 0 7 569 1436 0 0 63 /**
 * Returns the FileReference that represents this file.
 */ 1 4 this 3 1594  
476 0 0 6 570 1584 0 0 38 /**
 * A shortcut to the filename.
 */ 1 4 this 3 1594  
477 0 0 6 571 1440 0 0 77 /**
 * Returns the offset within the file at which this file data begins.
 */ 1 4 this 3 1594  
478 0 0 6 572 1634 0 0 115 /**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */ 1 4 this 3 1594  
479 0 0 4 573 1497 0 0 10 /**
 *
 */ 2 4 this 3 1594  3 out 1 1506  
480 0 0 6 576 1637 0 0 0 1 4 this 3 1635  
481 0 0 7 577 1638 0 0 0 1 4 this 3 1635  
482 0 0 6 578 1584 0 0 166 /**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */ 1 4 this 3 1635  
483 0 0 6 579 1421 0 0 61 /**
 * Returns true if this file exists, false otherwise.
 */ 1 4 this 3 1635  
484 0 0 6 580 1421 0 0 117 /**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */ 1 4 this 3 1635  
485 0 0 6 581 1421 0 0 115 /**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */ 1 4 this 3 1635  
486 0 0 6 582 1421 0 0 153 /**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */ 1 4 this 3 1635  
487 0 0 6 583 1421 0 0 199 /**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */ 1 4 this 3 1589  
488 0 0 6 584 1421 0 0 589 /**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 2 4 this 3 1589  8 new_file 1 1589  
489 0 0 6 585 1421 0 0 123 /**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1589  8 new_file 1 1589  
490 0 0 7 586 1639 893 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 1 4 this 3 1635  
491 0 0 4 587 1497 0 0 10 /**
 *
 */ 2 4 this 3 1635  3 out 1 1506  
492 0 0 4 588 1497 0 0 66 /**
 * If the file represents a directory, lists its contents.
 */ 2 4 this 3 1635  3 out 1 1506  
493 0 0 4 589 1497 0 0 113 /**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */ 2 4 this 3 1635  3 out 1 1506  
494 0 0 6 590 1477 0 0 63 /**
 * Returns the entire contents of the file as a string.
 */ 2 4 this 3 1635  11 auto_unwrap 1 1421  
495 0 0 6 591 1604 0 0 179 /**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */ 2 4 this 3 1635  11 auto_unwrap 1 1421  
496 0 0 4 592 1497 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1635  6 stream 1 1604  
497 0 0 6 593 1421 0 0 324 /**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */ 1 4 this 3 1635  
498 0 0 6 594 1477 0 0 0 3 4 this 3 1589  4 data 1 1477  9 auto_wrap 1 1421  
499 0 0 6 595 1506 0 0 179 /**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 3 4 this 3 1589  9 auto_wrap 1 1421  8 truncate 1 1421  
500 0 0 6 596 1506 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 1 4 this 3 1589  
501 0 0 4 597 1497 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1589  6 stream 1 1506  
502 0 0 6 598 1621 0 0 180 /**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 2 4 this 3 1589  8 truncate 1 1421  
503 0 0 6 599 1621 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 1 4 this 3 1589  
504 0 0 4 600 1497 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1589  6 stream 1 1621  
505 0 0 6 601 1634 0 0 105 /**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */ 1 4 this 3 1635  
506 0 0 6 601 1634 0 0 222 /**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */ 2 4 this 3 1635  6 stream 1 1604  
507 0 0 6 602 1587 0 0 434 /**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */ 1 4 this 3 1635  
508 0 0 6 603 1421 0 0 330 /**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */ 2 4 this 3 1589  4 info 1 1583  
509 0 0 7 604 1541 0 0 0 0 
510 0 0 7 607 1541 0 0 0 0 
511 0 0 6 610 1637 0 0 68 /**
 * Returns the file system this mount object is attached to.
 */ 1 4 this 3 1640  
512 0 0 6 611 1584 0 0 161 /**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */ 1 4 this 3 1640  
513 0 0 6 612 1425 0 0 100 /**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */ 1 4 this 3 1640  
514 0 0 4 613 1497 0 0 10 /**
 *
 */ 2 4 this 3 1640  3 out 1 1506  
515 0 0 4 614 1497 0 0 10 /**
 *
 */ 2 4 this 3 1640  3 out 1 1506  
516 0 0 7 615 1541 0 0 0 0 
517 0 0 7 617 1642 1026 0 10 /**
 *
 */ 1 9 multifile 1 1620  
518 0 0 7 618 1620 893 0 76 /**
 * Returns the Multifile pointer that this mount object is based on.
 */ 1 4 this 3 1643  
519 0 0 7 619 1541 0 0 0 0 
520 0 0 7 621 1645 1238 0 10 /**
 *
 */ 0 
521 0 0 7 622 1541 0 0 0 0 
522 0 0 7 625 1646 1242 0 10 /**
 *
 */ 1 17 physical_filename 1 1584  
523 0 0 6 626 1584 0 0 112 /**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */ 1 4 this 3 1647  
524 0 0 7 627 1541 0 0 0 0 
525 0 0 7 630 1649 893 0 10 /**
 *
 */ 0 
526 0 0 6 631 1421 0 0 354 /**
 * Opens the named ZipArchive on disk for reading.  The ZipArchive index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */ 2 4 this 3 1649  8 filename 1 1584  
527 0 0 6 631 1421 0 0 375 /**
 * Opens an anonymous ZipArchive for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 *
 * The given stream must be seekable.
 */ 3 4 this 3 1649  6 stream 1 1612  12 owns_pointer 1 1421  
528 0 0 6 632 1421 0 0 422 /**
 * Opens the named ZipArchive on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The ZipArchive is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1649  8 filename 1 1584  
529 0 0 6 632 1421 0 0 257 /**
 * Opens an anonymous ZipArchive for writing using an ostream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 */ 3 4 this 3 1649  6 stream 1 1506  12 owns_pointer 1 1421  
530 0 0 6 633 1421 0 0 361 /**
 * Opens the named ZipArchive on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */ 2 4 this 3 1649  8 filename 1 1584  
531 0 0 6 633 1421 0 0 366 /**
 * Opens an anonymous ZipArchive for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 */ 3 4 this 3 1649  6 stream 1 1621  12 owns_pointer 1 1421  
532 0 0 6 634 1421 0 0 69 /**
 * Verifies the integrity of the contents of the ZIP archive.
 */ 1 4 this 3 1649  
533 0 0 4 635 1497 0 0 170 /**
 * Closes the ZipArchive if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */ 1 4 this 3 1649  
534 0 0 6 636 1584 0 0 70 /**
 * Returns the filename of the ZipArchive, if it is available.
 */ 1 4 this 3 1650  
535 0 0 4 637 1497 0 0 210 /**
 * Replaces the filename of the ZipArchive.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */ 2 4 this 3 1649  8 filename 1 1584  
536 0 0 6 638 1421 0 0 155 /**
 * Returns true if the ZipArchive has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */ 1 4 this 3 1650  
537 0 0 6 639 1421 0 0 164 /**
 * Returns true if the ZipArchive has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the ZipArchive.
 */ 1 4 this 3 1650  
538 0 0 6 640 1421 0 0 150 /**
 * Returns true if the ZipArchive index is suboptimal and should be repacked.
 * Call repack() to achieve this.  It is not done automatically.
 */ 1 4 this 3 1650  
539 0 0 4 641 1497 0 0 488 /**
 * Sets the flag indicating whether timestamps should be recorded within the
 * ZipArchive or not.  The default is true, indicating the ZipArchive will
 * record timestamps for each subfile that is added.
 *
 * If this is false, the ZipArchive will not record timestamps internally.  In
 * this case, the return value from get_subfile_timestamp() will be zero.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated ZipArchives.
 */ 2 4 this 3 1649  16 record_timestamp 1 1421  
540 0 0 6 642 1421 0 0 138 /**
 * Returns the flag indicating whether timestamps should be recorded within
 * the ZipArchive or not.  See set_record_timestamp().
 */ 1 4 this 3 1650  
541 0 0 6 643 1543 0 0 464 /**
 * Adds a file on disk as a subfile to the ZipArchive.  The file named by
 * filename will be read and added to the ZipArchive immediately, but the index
 * will not be updated until you call flush().  If there already exists a
 * subfile with the indicated name, it is replaced without examining its
 * contents (but see also update_subfile).
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1649  12 subfile_name 1 1543  8 filename 1 1584  17 compression_level 1 1425  
542 0 0 6 643 1543 0 0 490 /**
 * Adds a file from a stream as a subfile to the ZipArchive.  The indicated
 * istream will be read and its contents added to the end of the current ZIP
 * file immediately.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the index of the ZIP archive will be
 * rewritten to the end of the file.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1649  12 subfile_name 1 1543  12 subfile_data 1 1604  17 compression_level 1 1425  
543 0 0 6 644 1543 0 0 450 /**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the ZIP file is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */ 4 4 this 3 1649  12 subfile_name 1 1543  8 filename 1 1584  17 compression_level 1 1425  
544 0 0 6 645 1421 0 0 848 /**
 * Adds a new JAR-style signature to the .zip file.  The file must have been
 * opened in read/write mode.
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_jar_signature() reads the certificate and private key
 * from a PEM-formatted file, for instance as generated by the openssl command.
 * If the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 *
 * It's possible to add multiple signatures, by providing multiple unique
 * aliases.  Note that aliases are considered case-insensitively and only the
 * first 8 characters are considered.
 *
 * There is no separate parameter to pass a certificate chain.  Instead, any
 * necessary certificates are expected to be in the certificate file.
 */ 5 4 this 3 1649  11 certificate 1 1584  4 pkey 1 1584  8 password 1 1543  5 alias 1 1543  
545 0 0 6 646 1421 0 0 596 /**
 * Ensures that any changes made to the ZIP archive have been synchronized to
 * disk.  In particular, this causes the central directory to be rewritten at
 * the end of the file.
 *
 * This may result in a suboptimal packing in the ZIP file, especially if
 * existing files were changed or files were removed.  To guarantee that the
 * file is as compact as it can be, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1649  
546 0 0 6 647 1421 0 0 515 /**
 * Forces a complete rewrite of the ZipArchive and all of its contents, so that
 * the files are tightly packed in the file without any gaps.  This is useful to
 * do after removing files, to ensure that the file size is minimized.
 *
 * It is only valid to call this if the ZipArchive was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the ZipArchive.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1649  
547 0 0 6 648 1425 0 0 170 /**
 * Returns the number of subfiles within the ZipArchive.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */ 1 4 this 3 1650  
548 0 0 6 649 1425 0 0 128 /**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the ZipArchive.
 */ 2 4 this 3 1650  12 subfile_name 1 1543  
549 0 0 6 650 1421 0 0 205 /**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the ZipArchive.  That is, the ZipArchive contains at
 * least one file named "subfile_name/...".
 */ 2 4 this 3 1650  12 subfile_name 1 1543  
550 0 0 6 651 1421 0 0 422 /**
 * Considers subfile_name to be the name of a subdirectory within the
 * ZipArchive, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a ZipArchive; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */ 3 4 this 3 1650  8 contents 1 1624  12 subfile_name 1 1543  
551 0 0 4 652 1497 0 0 437 /**
 * Removes the nth subfile from the ZipArchive.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The ZipArchive will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1649  5 index 1 1425  
552 0 0 6 652 1421 0 0 477 /**
 * Removes the named subfile from the ZipArchive, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The ZipArchive will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1649  12 subfile_name 1 1543  
553 0 0 6 653 1543 0 0 47 /**
 * Returns the name of the nth subfile.
 */ 2 4 this 3 1650  5 index 1 1425  
554 0 0 6 655 1422 0 0 67 /**
 * Returns the uncompressed data length of the nth subfile.
 */ 2 4 this 3 1650  5 index 1 1425  
555 0 0 6 656 1587 0 0 270 /**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .zip file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall ZIP file.
 */ 2 4 this 3 1650  5 index 1 1425  
556 0 0 6 657 1421 0 0 120 /**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */ 2 4 this 3 1650  5 index 1 1425  
557 0 0 6 658 1421 0 0 119 /**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */ 2 4 this 3 1650  5 index 1 1425  
558 0 0 6 659 1440 0 0 339 /**
 * Returns the starting byte position within the ZipArchive at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */ 2 4 this 3 1650  5 index 1 1425  
559 0 0 6 660 1422 0 0 322 /**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */ 2 4 this 3 1650  5 index 1 1425  
560 0 0 6 661 1564 0 0 96 /**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */ 2 4 this 3 1649  5 index 1 1425  
561 0 0 6 662 1604 0 0 747 /**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the ZipArchive itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the ZipArchive destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */ 2 4 this 3 1649  5 index 1 1425  
562 0 0 4 663 1497 0 0 246 /**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1604  
563 0 0 6 664 1421 0 0 68 /**
 * Extracts the nth subfile into a file with the given name.
 */ 3 4 this 3 1649  5 index 1 1425  8 filename 1 1584  
564 0 0 6 665 1421 0 0 61 /**
 * Extracts the nth subfile to the indicated ostream.
 */ 3 4 this 3 1649  5 index 1 1425  3 out 1 1506  
565 0 0 6 666 1421 0 0 509 /**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */ 3 4 this 3 1649  5 index 1 1425  8 filename 1 1584  
566 0 0 4 667 1497 0 0 10 /**
 *
 */ 2 4 this 3 1650  3 out 1 1506  
567 0 0 4 668 1497 0 0 62 /**
 * Shows a list of all subfiles within the ZipArchive.
 */ 2 4 this 3 1650  3 out 1 1506  
568 0 0 4 669 1497 0 0 136 /**
 * Sets the string which is appended to the very end of the ZIP archive.
 * This string may not be longer than 65535 characters.
 */ 2 4 this 3 1649  7 comment 1 1543  
569 0 0 6 670 1543 0 0 126 /**
 * Returns the comment string that was at the end of the ZIP end-of-directory
 * record, if any.
 * See set_comment().
 */ 1 4 this 3 1650  
570 0 0 7 672 1652 1026 0 10 /**
 *
 */ 2 7 archive 1 1649  9 directory 1 1584  
571 0 0 7 673 1649 893 0 77 /**
 * Returns the ZipArchive pointer that this mount object is based on.
 */ 1 4 this 3 1653  
572 0 0 7 674 1541 0 0 0 0 
573 0 0 7 676 1657 1026 0 69 /**
 * Returns the VirtualFileMount this file is associated with.
 */ 1 4 this 3 1655  
574 0 0 6 677 1421 0 0 174 /**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */ 1 4 this 3 1655  
575 0 0 7 678 1541 0 0 0 0 
576 0 0 7 681 1658 1030 0 10 /**
 *
 */ 1 8 filename 1 1584  
577 0 0 7 681 1658 1030 0 0 1 6 param0 0 1659  
578 0 0 7 682 1541 0 0 0 0 
579 0 0 7 684 1661 1295 0 10 /**
 *
 */ 0 
580 0 0 7 684 1661 1295 0 10 /**
 *
 */ 4 6 source 1 1604  11 owns_source 1 1421  13 source_length 1 1634  6 header 1 1421  
581 0 0 6 685 1661 0 0 10 /**
 *
 */ 5 4 this 3 1661  6 source 1 1604  11 owns_source 1 1421  13 source_length 1 1634  6 header 1 1421  
582 0 0 6 686 1661 0 0 118 /**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */ 1 4 this 3 1661  
583 0 0 7 689 1662 1299 0 10 /**
 *
 */ 0 
584 0 0 7 689 1662 1299 0 10 /**
 *
 */ 4 4 dest 1 1506  9 owns_dest 1 1421  17 compression_level 1 1425  6 header 1 1421  
585 0 0 6 690 1662 0 0 10 /**
 *
 */ 5 4 this 3 1662  4 dest 1 1506  9 owns_dest 1 1421  17 compression_level 1 1425  6 header 1 1421  
586 0 0 6 691 1662 0 0 114 /**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */ 1 4 this 3 1662  
587 0 0 7 701 1639 893 0 0 1 6 param0 0 1663  
588 0 0 6 694 1422 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 1663  
589 0 0 7 695 1589 1224 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 1663  1 n 1 1422  
590 0 0 7 697 1589 1224 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 1663  1 n 1 1422  
591 0 0 6 698 1422 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 1663  
592 0 0 7 699 1639 893 0 0 2 4 this 3 1639  5 other 1 1663  
593 0 0 7 700 1639 893 0 0 2 4 this 3 1663  5 other 1 1663  
594 0 0 7 703 1637 1308 0 10 /**
 *
 */ 0 
595 0 0 6 706 1421 0 0 1009 /**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */ 5 4 this 3 1637  17 physical_filename 1 1584  11 mount_point 1 1584  5 flags 1 1425  8 password 1 1543  
596 0 0 6 706 1421 0 0 67 /**
 * Mounts the indicated Multifile at the given mount point.
 */ 4 4 this 3 1637  9 multifile 1 1620  11 mount_point 1 1584  5 flags 1 1425  
597 0 0 6 706 1421 0 0 208 /**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function than the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */ 4 4 this 3 1637  5 mount 1 1657  11 mount_point 1 1584  5 flags 1 1425  
598 0 0 6 706 1421 0 0 68 /**
 * Mounts the indicated ZipArchive at the given mount point.
 */ 4 4 this 3 1637  7 archive 1 1649  11 mount_point 1 1584  5 flags 1 1425  
599 0 0 6 707 1421 0 0 587 /**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */ 5 4 this 3 1637  16 virtual_filename 1 1584  11 mount_point 1 1584  5 flags 1 1425  8 password 1 1543  
600 0 0 6 708 1425 0 0 156 /**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 1637  17 physical_filename 1 1584  
601 0 0 6 708 1425 0 0 132 /**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1637  9 multifile 1 1620  
602 0 0 6 708 1425 0 0 127 /**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1637  5 mount 1 1657  
603 0 0 6 708 1425 0 0 133 /**
 * Unmounts all appearances of the indicated ZipArchive from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1637  7 archive 1 1649  
604 0 0 6 709 1425 0 0 136 /**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 1637  11 mount_point 1 1584  
605 0 0 6 710 1425 0 0 96 /**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */ 1 4 this 3 1637  
606 0 0 6 711 1425 0 0 65 /**
 * Returns the number of individual mounts in the system.
 */ 1 4 this 3 1665  
607 0 0 7 712 1657 1026 0 47 /**
 * Returns the nth mount in the system.
 */ 2 4 this 3 1665  1 n 1 1425  
608 0 0 6 725 1421 0 0 171 /**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */ 2 4 this 3 1637  13 new_directory 1 1584  
609 0 0 7 726 1638 0 0 60 /**
 * Returns the current directory name.  See chdir().
 */ 1 4 this 3 1665  
610 0 0 6 727 1421 0 0 263 /**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */ 2 4 this 3 1637  8 filename 1 1584  
611 0 0 6 728 1421 0 0 169 /**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */ 2 4 this 3 1637  8 filename 1 1584  
612 0 0 7 729 1589 1224 0 537 /**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */ 3 4 this 3 1665  8 filename 1 1584  11 status_only 1 1421  
613 0 0 7 730 1589 1224 0 298 /**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */ 2 4 this 3 1637  8 filename 1 1584  
614 0 0 7 731 1589 1224 0 173 /**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */ 4 4 this 3 1665  8 filename 1 1584  10 searchpath 1 1667  11 status_only 1 1421  
615 0 0 6 732 1421 0 0 208 /**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */ 2 4 this 3 1637  8 filename 1 1584  
616 0 0 6 733 1421 0 0 599 /**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 3 4 this 3 1637  13 orig_filename 1 1584  12 new_filename 1 1584  
617 0 0 6 734 1421 0 0 131 /**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */ 3 4 this 3 1637  13 orig_filename 1 1584  12 new_filename 1 1584  
618 0 0 6 735 1421 0 0 174 /**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */ 4 4 this 3 1665  8 filename 1 1638  10 searchpath 1 1667  17 default_extension 1 1543  
619 0 0 6 736 1425 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 4 4 this 3 1665  8 filename 1 1584  10 searchpath 1 1667  7 results 1 1670  
620 0 0 6 737 1421 0 0 71 /**
 * Convenience function; returns true if the named file exists.
 */ 2 4 this 3 1665  8 filename 1 1584  
621 0 0 6 738 1421 0 0 93 /**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */ 2 4 this 3 1665  8 filename 1 1584  
622 0 0 6 739 1421 0 0 96 /**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */ 2 4 this 3 1665  8 filename 1 1584  
623 0 0 7 740 1639 893 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 2 4 this 3 1665  8 filename 1 1584  
624 0 0 4 741 1497 0 0 80 /**
 * Convenience function; lists the files within the indicated directory.
 */ 2 4 this 3 1665  8 filename 1 1584  
625 0 0 4 742 1497 0 0 117 /**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */ 2 4 this 3 1665  8 filename 1 1584  
626 0 0 4 743 1497 0 0 75 /**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */ 2 4 this 3 1665  3 out 1 1506  
627 0 0 6 744 1637 0 0 423 /**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */ 0 
628 0 0 6 745 1477 0 0 365 /**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 1665  8 filename 1 1584  11 auto_unwrap 1 1421  
629 0 0 6 746 1604 0 0 424 /**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 1665  8 filename 1 1584  11 auto_unwrap 1 1421  
630 0 0 4 747 1497 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1604  
631 0 0 6 748 1477 0 0 0 4 4 this 3 1637  8 filename 1 1584  4 data 1 1477  9 auto_wrap 1 1421  
632 0 0 6 749 1506 0 0 345 /**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */ 4 4 this 3 1637  8 filename 1 1584  9 auto_wrap 1 1421  8 truncate 1 1421  
633 0 0 6 750 1506 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 2 4 this 3 1637  8 filename 1 1584  
634 0 0 4 751 1497 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1506  
635 0 0 6 752 1621 0 0 169 /**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */ 3 4 this 3 1637  8 filename 1 1584  8 truncate 1 1421  
636 0 0 6 753 1621 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 2 4 this 3 1637  8 filename 1 1584  
637 0 0 4 754 1497 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1621  
638 0 0 7 719 1672 1323 0 0 0 
639 0 0 7 719 1672 1323 0 0 1 4 copy 1 1657  
640 0 0 7 719 1672 1323 0 0 1 3 ptr 1 1657  
641 0 0 7 719 1672 1323 0 0 1 6 param0 0 1673  
642 0 0 7 720 1657 1026 0 289 // If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness. 1 4 this 3 1674  
643 0 0 6 721 1672 0 0 0 2 4 this 3 1672  4 copy 1 1657  
644 0 0 6 721 1672 0 0 0 2 4 this 3 1672  3 ptr 1 1657  
645 0 0 6 722 1421 0 0 0 1 4 this 3 1674  
646 0 0 4 723 1497 0 0 0 1 4 this 3 1672  
647 0 0 4 717 1497 0 0 0 1 4 this 3 1676  
648 0 0 4 718 1497 0 0 0 2 4 this 3 1677  3 out 1 1506  
649 0 0 7 756 1679 1359 0 10 /**
 *
 */ 0 
650 0 0 7 756 1679 1359 0 0 1 6 source 1 1477  
651 0 0 4 757 1497 0 0 30 /**
 * Empties the buffer.
 */ 1 4 this 3 1679  
652 0 0 6 758 1422 0 0 86 /**
 * Returns the number of characters available to be read from the data stream.
 */ 1 4 this 3 1679  
653 0 0 6 759 1477 0 0 63 /**
 * Returns the contents of the data stream as a string.
 */ 1 4 this 3 1679  
654 0 0 4 760 1497 0 0 0 2 4 this 3 1679  4 data 1 1477  
655 0 0 6 767 1481 0 0 203 // get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul. 1 4 this 3 1680  
656 0 0 6 770 1481 0 0 206 // get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely. 1 4 this 3 1680  
657 0 0 6 772 1481 0 0 144 // get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS. 1 4 this 3 1680  
658 0 0 6 774 1425 0 0 369 /**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */ 1 4 this 3 1681  
659 0 0 6 776 1680 0 0 70 /**
 * Returns a pointer to the one TrueClock object in the world.
 */ 0 
660 0 0 6 777 1421 0 0 10 /**
 *
 */ 2 4 this 3 1681  4 mask 1 1576  
661 0 0 7 779 1683 1367 0 60 /**
 * Create a patch file and initializes internal data
 */ 0 
662 0 0 7 779 1683 1367 0 49 /**
 * Create patch file with buffer to patch
 */ 1 6 buffer 1 1557  
663 0 0 6 781 1421 0 0 359 /**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */ 4 4 this 3 1683  9 file_orig 1 1638  8 file_new 1 1638  10 patch_name 1 1638  
664 0 0 6 782 1425 0 0 193 /**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */ 2 4 this 3 1683  10 patch_file 1 1584  
665 0 0 6 783 1425 0 0 107 /**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */ 3 4 this 3 1683  10 patch_file 1 1584  4 file 1 1584  
666 0 0 6 783 1425 0 0 127 /**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */ 4 4 this 3 1683  10 patch_file 1 1584  9 orig_file 1 1584  11 target_file 1 1584  
667 0 0 6 784 1425 0 0 390 /**
 * Perform one buffer's worth of patching.
 * Returns one of the following values:
 * @li @c EU_ok : while patching
 * @li @c EU_success : when done
 * @li @c EU_error_abort : Patching has not been initiated
 * @li @c EU_error_file_invalid : file is corrupted
 * @li @c EU_error_invalid_checksum : incompatible patch file
 * @li @c EU_error_write_file_rename : could not rename file
 */ 1 4 this 3 1683  
668 0 0 6 785 1421 0 0 171 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */ 3 4 this 3 1683  10 patch_file 1 1638  4 file 1 1638  
669 0 0 6 785 1421 0 0 138 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */ 4 4 this 3 1683  10 patch_file 1 1638  9 orig_file 1 1638  11 target_file 1 1584  
670 0 0 6 786 1483 0 0 125 /**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */ 1 4 this 3 1684  
671 0 0 4 790 1497 0 0 362 /**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */ 2 4 this 3 1683  15 allow_multifile 1 1421  
672 0 0 6 791 1421 0 0 37 /**
 * See set_allow_multifile().
 */ 1 4 this 3 1683  
673 0 0 4 793 1497 0 0 10 /**
 *
 */ 2 4 this 3 1683  6 length 1 1425  
674 0 0 6 794 1425 0 0 10 /**
 *
 */ 1 4 this 3 1683  
675 0 0 4 795 1497 0 0 10 /**
 *
 */ 1 4 this 3 1683  
676 0 0 6 797 1421 0 0 145 /**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */ 1 4 this 3 1684  
677 0 0 6 798 1603 0 0 52 /**
 * Returns the MD5 hash for the source file.
 */ 1 4 this 3 1684  
678 0 0 6 799 1603 0 0 78 /**
 * Returns the MD5 hash for the file after the patch has been applied.
 */ 1 4 this 3 1684  
679 0 0 6 805 1421 0 0 384 /**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.  If this returns true, it means that the pointer can not yet be
 * reused, but it does not guarantee that it can be safely accessed.  See the
 * lock() method for a safe way to access the underlying pointer.
 *
 * This will always return true for a null pointer, unlike is_valid_pointer().
 */ 1 4 this 3 1686  
680 0 0 6 806 1421 0 0 122 /**
 * Returns true if the pointer is not null and the object has not been
 * deleted.  See was_deleted() for caveats.
 */ 1 4 this 3 1686  
681 0 0 7 816 1688 1392 0 0 0 
682 0 0 7 816 1688 1392 0 0 1 6 param0 0 1689  
683 0 0 6 810 1421 0 0 302 /**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */ 4 3 key 1 1543  4 name 1 1543  5 value 1 1543  2 rl 1 1488  
684 0 0 6 811 1421 0 0 142 /**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */ 4 3 key 1 1543  4 name 1 1543  5 value 1 1425  2 rl 1 1488  
685 0 0 6 813 1489 0 0 115 /**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */ 3 3 key 1 1543  4 name 1 1543  2 rl 1 1488  
686 0 0 6 814 1543 0 0 291 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */ 4 3 key 1 1543  4 name 1 1543  13 default_value 1 1543  2 rl 1 1488  
687 0 0 6 815 1425 0 0 206 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */ 4 3 key 1 1543  4 name 1 1543  13 default_value 1 1425  2 rl 1 1488  
688 0 0 6 242 1543 0 0 0 2 6 source 1 1543  17 compression_level 1 1425  
689 0 0 6 243 1543 0 0 0 1 6 source 1 1543  
690 0 0 6 244 1421 0 0 0 3 6 source 1 1584  4 dest 1 1584  17 compression_level 1 1425  
691 0 0 6 245 1421 0 0 0 2 6 source 1 1584  4 dest 1 1584  
692 0 0 6 246 1421 0 0 0 3 6 source 1 1604  4 dest 1 1506  17 compression_level 1 1425  
693 0 0 6 247 1421 0 0 0 2 6 source 1 1604  4 dest 1 1506  
694 0 0 6 248 1421 0 0 0 2 6 source 1 1604  4 dest 1 1506  
695 0 0 6 389 1564 0 0 0 5 6 source 1 1543  8 password 1 1543  9 algorithm 1 1543  10 key_length 1 1425  15 iteration_count 1 1425  
696 0 0 6 390 1543 0 0 0 2 6 source 1 1564  8 password 1 1543  
697 0 0 6 391 1421 0 0 0 6 6 source 1 1584  4 dest 1 1584  8 password 1 1543  9 algorithm 1 1543  10 key_length 1 1425  15 iteration_count 1 1425  
698 0 0 6 392 1421 0 0 0 3 6 source 1 1584  4 dest 1 1584  8 password 1 1543  
699 0 0 6 393 1421 0 0 0 6 6 source 1 1604  4 dest 1 1506  8 password 1 1543  9 algorithm 1 1543  10 key_length 1 1425  15 iteration_count 1 1425  
700 0 0 6 394 1421 0 0 0 3 6 source 1 1604  4 dest 1 1506  8 password 1 1543  
701 0 0 6 396 1543 0 0 10 /**
 *
 */ 1 3 err 1 1442  
702 0 0 6 397 1425 0 0 0 0 
703 0 0 6 398 1543 0 0 10 /**
 *
 */ 0 
704 0 0 6 399 1425 0 0 0 0 
705 0 0 6 803 1543 0 0 0 4 8 password 1 1543  4 salt 1 1543  5 iters 1 1425  6 keylen 1 1425  
298
1393 11 CPTA_double 0 2105345 11 CPTA_double 11 CPTA_double 0 0 1394 0 0 0 0 0 0 0 0 0 0

1394 29 ConstPointerToArray< double > 0 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 714 727 0 12 715 716 717 718 719 720 721 722 723 724 725 726 0 0 1 0 1395 0 0 0 0 0

1395 28 PointerToArrayBase< double > 0 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 711 0 2 712 713 0 0 1 0 1396 0 0 0 0 0

1396 49 PointerToBase< ReferenceCountedVector< double > > 0 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 709 710 0 0 1 0 1397 0 0 0 0 0

1397 13 PointerToVoid 0 141313 13 PointerToVoid 13 PointerToVoid 0 0 0 0 708 0 2 706 707 0 0 1 0 1398 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1398 10 MemoryBase 0 2048 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

1399 10 CPTA_float 0 2105345 10 CPTA_float 10 CPTA_float 0 0 1400 0 0 0 0 0 0 0 0 0 0

1400 28 ConstPointerToArray< float > 0 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 733 746 0 12 734 735 736 737 738 739 740 741 742 743 744 745 0 0 1 0 1401 0 0 0 0 0

1401 27 PointerToArrayBase< float > 0 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 730 0 2 731 732 0 0 1 0 1402 0 0 0 0 0

1402 48 PointerToBase< ReferenceCountedVector< float > > 0 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 728 729 0 0 1 0 1397 0 0 0 0 0

1403 8 CPTA_int 0 2105345 8 CPTA_int 8 CPTA_int 0 0 1404 0 0 0 0 0 0 0 0 0 0

1404 26 ConstPointerToArray< int > 0 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 752 765 0 12 753 754 755 756 757 758 759 760 761 762 763 764 0 0 1 0 1405 0 0 0 0 0

1405 25 PointerToArrayBase< int > 0 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 749 0 2 750 751 0 0 1 0 1406 0 0 0 0 0

1406 46 PointerToBase< ReferenceCountedVector< int > > 0 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 747 748 0 0 1 0 1397 0 0 0 0 0

1407 10 CPTA_uchar 0 2105345 10 CPTA_uchar 10 CPTA_uchar 0 0 1408 0 0 0 0 0 0 0 0 0 0

1408 36 ConstPointerToArray< unsigned char > 0 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 771 784 0 12 772 773 774 775 776 777 778 779 780 781 782 783 0 0 1 0 1409 0 0 0 0 0

1409 35 PointerToArrayBase< unsigned char > 0 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 768 0 2 769 770 0 0 1 0 1410 0 0 0 0 0

1410 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 766 767 0 0 1 0 1397 0 0 0 0 0

1411 10 PTA_double 0 2105345 10 PTA_double 10 PTA_double 0 0 1412 0 0 0 0 0 0 0 0 0 0

1412 24 PointerToArray< double > 0 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 785 805 0 19 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 0 0 1 0 1395 0 0 0 0 0

1413 9 PTA_float 0 2105345 9 PTA_float 9 PTA_float 0 0 1414 0 0 0 0 0 0 0 0 0 0

1414 23 PointerToArray< float > 0 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 806 826 0 19 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 0 0 1 0 1401 0 0 0 0 0

1415 7 PTA_int 0 2105345 7 PTA_int 7 PTA_int 0 0 1416 0 0 0 0 0 0 0 0 0 0

1416 21 PointerToArray< int > 0 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 827 847 0 19 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 0 0 1 0 1405 0 0 0 0 0

1417 9 PTA_uchar 0 2105345 9 PTA_uchar 9 PTA_uchar 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 31 PointerToArray< unsigned char > 0 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 848 868 0 19 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 0 0 1 0 1409 0 0 0 0 0

1419 11 MemoryUsage 0 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 1 889 890 10 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 20 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 0 0 1 0 1420 0 0 0 0 292
/**
 * This class is used strictly for debugging purposes, specifically for
 * tracking memory leaks of reference-counted objects: it keeps a record of
 * every such object currently allocated.
 *
 * When compiled with NDEBUG set, this entire class does nothing and compiles
 * to a stub.
 */

1420 10 MemoryHook 0 2048 10 MemoryHook 10 MemoryHook 0 0 0 0 0 0 0 0 0 0 0 0 641
/**
 * This class provides a wrapper around the various possible malloc schemes
 * Panda might employ.  It also exists to allow the MemoryUsage class in Panda
 * to insert callback hooks to track the size of allocated pointers.
 *
 * The PANDA_MALLOC_* and PANDA_FREE_* macros are defined to vector through
 * through this class (except in production builds) to facilitate that.  Every
 * memory allocation call in Panda should therefore use these macros instead
 * of direct calls to malloc or free.  (C++ new and delete operators may be
 * employed for classes which inherit from MemoryBase; otherwise, use the
 * PANDA_MALLOC macros.)
 */

1421 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1422 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1423 0 0 0 0 0 0 0 0 0 0

1423 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1424 14 ReferenceCount 0 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 893 1 1701 6 894 895 896 897 898 899 0 0 1 3 1398 891 892 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1425 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1426 6 Buffer 0 75777 6 Buffer 6 Buffer 0 0 0 1 901 893 0 1 900 0 0 1 0 1424 0 0 0 0 10
/**
 *
 */

1427 25 PStatCollectorForwardBase 0 75777 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 0 893 0 1 909 0 0 1 0 1424 0 0 0 0 282
/**
 * This class serves as a cheap forward reference to a PStatCollector, which
 * is defined in the pstatclient module (and is not directly accessible here
 * in the express module).
 *
 * This is subclassed as PStatCollectorForward, which defines the actual
 * functionality.
 */

1428 18 NodeReferenceCount 0 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 6 910 911 912 913 914 915 0 0 1 0 1424 0 0 0 0 603
/**
 * This class specializes ReferenceCount to add an additional counter, called
 * node_ref_count, for the purposes of counting the number of times the object
 * is referenced by a "node", whatever that may mean in context.
 *
 * The new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  There also exists a
 * NodePointerTo<> class to maintain the node_ref counters automatically.
 *
 * See also CachedTypedWritableReferenceCount, which is similar in principle,
 * as well as NodeCachedReferenceCount, which combines both of these.
 */

1429 8 Datagram 0 75777 8 Datagram 8 Datagram 0 0 0 1 916 0 0 48 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 0 0 1 0 1430 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1430 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1431 17 DatagramGenerator 0 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 965 0 9 966 967 968 969 970 971 972 973 974 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1432 16 DatagramIterator 0 141313 16 DatagramIterator 16 DatagramIterator 0 0 0 1 975 1012 0 36 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

1433 12 DatagramSink 0 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 1013 3 1702 1703 1704 7 1014 1015 1016 1017 1018 1019 1020 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1434 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1435 0 0 0 0 0 0 0 0 0 0

1435 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1436 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 1437 0 0 0 0 0 0 0 0 0 0

1437 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 13 FileReference 0 141313 13 FileReference 13 FileReference 0 0 0 1 1027 1030 0 2 1028 1029 0 0 1 0 1439 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

1439 19 TypedReferenceCount 0 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 1026 0 1 1025 0 0 2 3 1430 1021 1022 3 1424 1023 1024 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1440 9 streamoff 0 2105344 14 std::streamoff 14 std::streamoff 0 0 1441 0 0 0 0 0 0 0 0 0 0

1441 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1442 13 ErrorUtilCode 0 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 0
7 6 EU_eof 6 EU_eof 0
6 18 EU_network_no_data 18 EU_network_no_data 0
5 12 EU_write_ram 12 EU_write_ram 0
4 8 EU_write 8 EU_write 0
3 5 EU_ok 5 EU_ok 0
2 10 EU_success 10 EU_success 0
1 14 EU_error_abort 14 EU_error_abort 17
// General errors
-1 19 EU_error_file_empty 19 EU_error_file_empty 0
-2 21 EU_error_file_invalid 21 EU_error_file_invalid 0
-3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum 0
-4 21 EU_error_network_dead 21 EU_error_network_dead 25
// General network errors
-30 28 EU_error_network_unreachable 28 EU_error_network_unreachable 0
-31 29 EU_error_network_disconnected 29 EU_error_network_disconnected 0
-32 24 EU_error_network_timeout 24 EU_error_network_timeout 0
-33 24 EU_error_network_no_data 24 EU_error_network_no_data 0
-34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally 23
// Local network errors
-40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow 0
-41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded 0
-42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected 29
// Remote host network errors
-50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down 0
-51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable 0
-52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found 0
-53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response 0
-54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files 23
// General local errors
-60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory 0
-61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation 0
-62 24 EU_error_write_disk_full 24 EU_error_write_disk_full 0
-63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found 0
-64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found 0
-65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault 0
-66 26 EU_error_write_file_rename 26 EU_error_write_file_rename 0
-67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout 14
// HTTP errors
-70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout 0
-71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable 0
-72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication 0
-73 13 EU_error_zlib 13 EU_error_zlib 14
// Zlib errors
-80 0 0

1443 7 Ramfile 0 141313 7 Ramfile 7 Ramfile 0 0 0 1 1041 1052 0 10 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 0 0 0 0 0 85
/**
 * An in-memory buffer specifically designed for downloading files to memory.
 */

1444 7 HashVal 0 141313 7 HashVal 7 HashVal 0 0 0 1 1053 1083 0 29 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 0 0 0 0 0 109
/**
 * Stores a 128-bit value that represents the hashed contents (typically MD5)
 * of a file or buffer.
 */

1445 19 MemoryUsagePointers 0 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 1084 1085 0 9 1086 1087 1088 1089 1090 1091 1092 1093 1094 2 1718 1719 0 0 0 0 785
/**
 * This is a list of pointers returned by a MemoryUsage object in response to
 * some query.
 *
 * Warning: once pointers are stored in a MemoryUsagePointers object, they are
 * reference-counted, and will not be freed until the MemoryUsagePointers
 * object is freed (or clear() is called on the object).  However, they may
 * not even be freed then; pointers may leak once they have been added to this
 * structure.  This is because we don't store enough information in this
 * structure to correctly free the pointers that have been added.  Since this
 * is intended primarily as a debugging tool, this is not a major issue.
 *
 * This class is just a user interface to talk about pointers stored in a
 * MemoryUsage object.  It doesn't even exist when compiled with NDEBUG.
 */

1446 10 ISubStream 0 141313 10 ISubStream 10 ISubStream 0 0 0 1 1095 1098 0 2 1096 1097 0 0 1 0 1447 0 0 0 0 392
/**
 * An istream object that presents a subwindow into another istream.  The
 * first character read from this stream will be the "start" character from
 * the source istream; just before the file pointer reaches the "end"
 * character, eof is returned.
 *
 * The source stream must be one that we can randomly seek within.  The
 * resulting ISubStream will also support arbitrary seeks.
 */

1447 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

1448 10 OSubStream 0 141313 10 OSubStream 10 OSubStream 0 0 0 1 1099 1102 0 2 1100 1101 0 0 1 0 1449 0 0 0 0 391
/**
 * An ostream object that presents a subwindow into another ostream.  The
 * first character written to this stream will be the "start" character in the
 * dest istream; no characters may be written to character "end" or later
 * (unless end is zero).
 *
 * The dest stream must be one that we can randomly seek within.  The
 * resulting OSubStream will also support arbitrary seeks.
 */

1449 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1450 9 SubStream 0 141313 9 SubStream 9 SubStream 0 0 0 1 1103 1106 0 2 1104 1105 0 0 1 0 1451 0 0 0 0 68
/**
 * Combined ISubStream and OSubStream for bidirectional I/O.
 */

1451 8 iostream 0 2048 13 std::iostream 13 std::iostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1452 9 Multifile 0 75777 9 Multifile 9 Multifile 0 0 0 1 1107 893 1 1705 62 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1 1720 0 1 0 1424 0 0 0 0 47
/**
 * A file that contains a set of files.
 */

1453 6 string 0 2105344 11 std::string 11 std::string 0 0 1454 0 0 0 0 0 0 0 0 0 0

1454 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1455 7 Namable 0 141313 7 Namable 7 Namable 0 0 0 1 1170 1177 1 1706 6 1171 1172 1173 1174 1175 1176 0 0 1 0 1398 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

1456 12 string const 0 8832 17 std::string const 17 std::string const 0 0 1453 0 0 0 0 0 0 0 0 0 0

1457 14 OpenSSLWrapper 0 43009 14 OpenSSLWrapper 14 OpenSSLWrapper 0 0 0 0 0 0 8 1178 1179 1180 1181 1182 1183 1184 1185 0 0 0 0 0 205
/**
 * Provides an interface wrapper around the OpenSSL library, to ensure that
 * the library is properly initialized in the application, and to provide some
 * hooks into global OpenSSL context data.
 */

1458 11 SubfileInfo 0 141313 11 SubfileInfo 11 SubfileInfo 0 0 0 1 1186 1194 0 7 1187 1188 1189 1190 1191 1192 1193 0 0 0 0 0 200
/**
 * This class records a particular byte sub-range within an existing file on
 * disk.  Generally, the filename is understood as a physical file on disk,
 * and not to be looked up via the vfs.
 */

1459 11 VirtualFile 0 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 1224 0 29 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 0 0 1 0 1439 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

1460 20 VirtualFileComposite 0 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 1226 0 1 1225 0 0 1 0 1459 0 0 0 0 223
/**
 * A composite directory within the VirtualFileSystem: this maps to more than
 * one directory on different mount points.  The resulting directory appears
 * to be the union of all the individual simple directories.
 */

1461 16 VirtualFileMount 0 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 1026 0 6 1227 1228 1229 1230 1231 1232 0 0 1 0 1439 0 0 0 0 159
/**
 * The abstract base class for a mount definition used within a
 * VirtualFileSystem.  Normally users don't need to monkey with this class
 * directly.
 */

1462 25 VirtualFileMountMultifile 0 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 1233 1026 0 2 1234 1235 0 0 1 0 1461 0 0 0 0 66
/**
 * Maps a Multifile's contents into the VirtualFileSystem.
 */

1463 23 VirtualFileMountRamdisk 0 141313 23 VirtualFileMountRamdisk 23 VirtualFileMountRamdisk 0 0 0 1 1236 1238 0 1 1237 0 0 1 0 1461 0 0 0 0 384
/**
 * Simulates an actual directory on disk with in-memory storage.  This is
 * useful mainly for performing high level functions that expect disk I/O
 * without actually writing files to disk.  Naturally, there are significant
 * limits to the size of the files that may be written with this system; and
 * "files" written here are not automatically persistent between sessions.
 */

1464 22 VirtualFileMountSystem 0 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 1239 1242 0 2 1240 1241 0 0 1 0 1461 0 0 0 0 66
/**
 * Maps an actual OS directory into the VirtualFileSystem.
 */

1465 10 ZipArchive 0 75777 10 ZipArchive 10 ZipArchive 0 0 0 1 1243 893 0 39 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1 1721 0 1 0 1424 0 0 0 0 47
/**
 * A file that contains a set of files.
 */

1466 19 VirtualFileMountZip 0 75777 19 VirtualFileMountZip 19 VirtualFileMountZip 0 0 0 1 1283 1026 0 2 1284 1285 0 0 1 0 1461 0 0 0 0 58
/**
 * Maps a .zip archive into the VirtualFileSystem.
 */

1467 17 VirtualFileSimple 0 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 1289 0 3 1286 1287 1288 0 0 1 0 1459 0 0 0 0 183
/**
 * A simple file or directory within the VirtualFileSystem: this maps to
 * exactly one file on one mount point.  Most directories, and all regular
 * files, are of this kind.
 */

1468 13 TemporaryFile 0 75777 13 TemporaryFile 13 TemporaryFile 0 0 0 1 1290 1030 0 1 1291 0 0 1 0 1438 0 0 0 0 206
/**
 * This is a special kind of FileReference class that automatically deletes
 * the file in question when it is deleted.  It is not responsible for
 * creating, opening, or closing the file, however.
 */

1469 17 IDecompressStream 0 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 1292 1295 0 2 1293 1294 0 0 1 0 1447 0 0 0 0 323
/**
 * An input stream object that uses zlib to decompress (inflate) the input
 * from another source stream on-the-fly.
 *
 * Attach an IDecompressStream to an existing istream that provides compressed
 * data, and read the corresponding uncompressed data from the
 * IDecompressStream.
 *
 * Seeking is not supported.
 */

1470 15 OCompressStream 0 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 1296 1299 0 2 1297 1298 0 0 1 0 1449 0 0 0 0 311
/**
 * An input stream object that uses zlib to compress (deflate) data to another
 * destination stream on-the-fly.
 *
 * Attach an OCompressStream to an existing ostream that will accept
 * compressed data, and write your uncompressed source data to the
 * OCompressStream.
 *
 * Seeking is not supported.
 */

1471 15 VirtualFileList 0 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 1 1306 893 0 6 1300 1301 1302 1303 1304 1305 1 1722 0 1 0 1424 0 0 0 0 80
/**
 * A list of VirtualFiles, as returned by VirtualFile::scan_directory().
 */

1472 17 VirtualFileSystem 0 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 1307 1308 1 1707 37 1309 1310 1311 1312 1313 1314 1315 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1 1723 0 0 0 1 1473 352
/**
 * A hierarchy of directories and files that appears to be one continuous file
 * system, even though the files may originate from several different sources
 * that may not be related to the actual OS's file system.
 *
 * For instance, a VirtualFileSystem can transparently mount one or more
 * Multifiles as their own subdirectory hierarchies.
 */

1473 10 MountFlags 0 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 1472 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 0
2 0 0

1474 29 PointerTo< VirtualFileMount > 0 141313 29 PointerTo< VirtualFileMount > 29 PointerTo< VirtualFileMount > 0 0 0 1 1318 1323 0 4 1319 1320 1321 1322 0 0 1 0 1475 0 0 0 0 0

1475 33 PointerToBase< VirtualFileMount > 0 43009 33 PointerToBase< VirtualFileMount > 33 PointerToBase< VirtualFileMount > 0 0 0 0 0 0 2 1316 1317 0 0 1 0 1397 0 0 0 0 0

1476 12 StringStream 0 141313 12 StringStream 12 StringStream 0 0 0 1 1354 1359 1 1708 4 1355 1356 1357 1358 0 0 1 0 1451 0 0 0 0 186
/**
 * A bi-directional stream object that reads and writes data to an internal
 * buffer, which can be retrieved and/or set as a string in Python 2 or a
 * bytes object in Python 3.
 */

1477 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1478 0 0 0 0 0 0 0 0 0 0

1478 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1479 0 0 0 0 0 0 0 0 0 0

1479 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1480 9 TrueClock 0 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 4 1709 1710 1711 1712 6 1360 1361 1362 1363 1364 1365 0 0 0 0 0 467
/**
 * An interface to whatever real-time clock we might have available in the
 * current environment.  There is only one TrueClock in existence, and it
 * constructs itself.
 *
 * The TrueClock returns elapsed real time in seconds since some undefined
 * epoch.  Since it is not defined at what time precisely the clock indicates
 * zero, this value can only be meaningfully used to measure elapsed time, by
 * sampling it at two different times and subtracting.
 */

1481 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1482 9 Patchfile 0 26625 9 Patchfile 9 Patchfile 0 0 0 1 1366 1367 5 1713 1714 1715 1716 1717 14 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 0 0 0 0 0 10
/**
 *
 */

1483 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1484 0 0 0 0 0 0 0 0 0 0

1484 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1485 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 1444 0 0 0 0 0 0 0 0 0 0

1486 17 WeakPointerToVoid 0 141313 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 1385 0 2 1383 1384 0 0 1 0 1397 0 0 0 0 152
/**
 * This is the specialization of PointerToVoid for weak pointers.  It needs an
 * additional flag to indicate that the pointer has been deleted.
 */

1487 15 WindowsRegistry 0 141313 15 WindowsRegistry 15 WindowsRegistry 0 0 0 1 1391 1392 0 5 1386 1387 1388 1389 1390 0 0 0 0 2 1488 1489 249
/**
 * This class provides a hook to Python to read and write strings and integers
 * to the windows registry.  It automatically converts strings from utf-8
 * encoding and stores them in Unicode (and conversely reconverts them on
 * retrieval).
 */

1488 8 RegLevel 0 794624 25 WindowsRegistry::RegLevel 25 WindowsRegistry::RegLevel 1487 0 0 0 0 0 0 0 0 0 2 10 rl_machine 27 WindowsRegistry::rl_machine 0
0 7 rl_user 24 WindowsRegistry::rl_user 0
1 0 0

1489 4 Type 0 794624 21 WindowsRegistry::Type 21 WindowsRegistry::Type 1487 0 0 0 0 0 0 0 0 0 3 6 T_none 23 WindowsRegistry::T_none 0
0 5 T_int 22 WindowsRegistry::T_int 0
1 8 T_string 25 WindowsRegistry::T_string 0
2 0 0

1490 12 PTA_stdfloat 0 2105345 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1413 0 0 0 0 0 0 0 0 0 0

1491 13 CPTA_stdfloat 0 2105345 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 1399 0 0 0 0 0 0 0 0 0 0

1492 37 ConstPointerToArray< double > const * 0 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 1493 0 0 0 0 0 0 0 0 0 0

1493 35 ConstPointerToArray< double > const 0 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 1394 0 0 0 0 0 0 0 0 0 0

1494 31 ConstPointerToArray< double > * 0 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 1394 0 0 0 0 0 0 0 0 0 0

1495 32 PointerToArray< double > const * 0 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1496 30 PointerToArray< double > const 0 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 1412 0 0 0 0 0 0 0 0 0 0

1497 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1498 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1499 0 0 0 0 0 0 0 0 0 0

1499 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1500 0 0 0 0 0 0 0 0 0 0

1500 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1501 36 PointerToArrayBase< double > const * 0 8576 36 PointerToArrayBase< double > const * 36 PointerToArrayBase< double > const * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1502 34 PointerToArrayBase< double > const 0 8832 34 PointerToArrayBase< double > const 34 PointerToArrayBase< double > const 0 0 1395 0 0 0 0 0 0 0 0 0 0

1503 51 PointerToBase< ReferenceCountedVector< double > > * 0 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 1396 0 0 0 0 0 0 0 0 0 0

1504 57 PointerToBase< ReferenceCountedVector< double > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 1505 0 0 0 0 0 0 0 0 0 0

1505 55 PointerToBase< ReferenceCountedVector< double > > const 0 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 1396 0 0 0 0 0 0 0 0 0 0

1506 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1449 0 0 0 0 0 0 0 0 0 0

1507 21 PointerToVoid const * 0 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1508 19 PointerToVoid const 0 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 1397 0 0 0 0 0 0 0 0 0 0

1509 36 ConstPointerToArray< float > const * 0 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1510 34 ConstPointerToArray< float > const 0 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 1400 0 0 0 0 0 0 0 0 0 0

1511 30 ConstPointerToArray< float > * 0 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1512 31 PointerToArray< float > const * 0 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1513 29 PointerToArray< float > const 0 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 1414 0 0 0 0 0 0 0 0 0 0

1514 35 PointerToArrayBase< float > const * 0 8576 35 PointerToArrayBase< float > const * 35 PointerToArrayBase< float > const * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1515 33 PointerToArrayBase< float > const 0 8832 33 PointerToArrayBase< float > const 33 PointerToArrayBase< float > const 0 0 1401 0 0 0 0 0 0 0 0 0 0

1516 50 PointerToBase< ReferenceCountedVector< float > > * 0 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 1402 0 0 0 0 0 0 0 0 0 0

1517 56 PointerToBase< ReferenceCountedVector< float > > const * 0 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 54 PointerToBase< ReferenceCountedVector< float > > const 0 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 1402 0 0 0 0 0 0 0 0 0 0

1519 34 ConstPointerToArray< int > const * 0 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 32 ConstPointerToArray< int > const 0 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 1404 0 0 0 0 0 0 0 0 0 0

1521 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 1404 0 0 0 0 0 0 0 0 0 0

1522 29 PointerToArray< int > const * 0 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 27 PointerToArray< int > const 0 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 1416 0 0 0 0 0 0 0 0 0 0

1524 33 PointerToArrayBase< int > const * 0 8576 33 PointerToArrayBase< int > const * 33 PointerToArrayBase< int > const * 0 0 1525 0 0 0 0 0 0 0 0 0 0

1525 31 PointerToArrayBase< int > const 0 8832 31 PointerToArrayBase< int > const 31 PointerToArrayBase< int > const 0 0 1405 0 0 0 0 0 0 0 0 0 0

1526 48 PointerToBase< ReferenceCountedVector< int > > * 0 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 1406 0 0 0 0 0 0 0 0 0 0

1527 54 PointerToBase< ReferenceCountedVector< int > > const * 0 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 1528 0 0 0 0 0 0 0 0 0 0

1528 52 PointerToBase< ReferenceCountedVector< int > > const 0 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 1406 0 0 0 0 0 0 0 0 0 0

1529 44 ConstPointerToArray< unsigned char > const * 0 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 1530 0 0 0 0 0 0 0 0 0 0

1530 42 ConstPointerToArray< unsigned char > const 0 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 1408 0 0 0 0 0 0 0 0 0 0

1531 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 1408 0 0 0 0 0 0 0 0 0 0

1532 39 PointerToArray< unsigned char > const * 0 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1533 37 PointerToArray< unsigned char > const 0 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 1418 0 0 0 0 0 0 0 0 0 0

1534 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1535 43 PointerToArrayBase< unsigned char > const * 0 8576 43 PointerToArrayBase< unsigned char > const * 43 PointerToArrayBase< unsigned char > const * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 41 PointerToArrayBase< unsigned char > const 0 8832 41 PointerToArrayBase< unsigned char > const 41 PointerToArrayBase< unsigned char > const 0 0 1409 0 0 0 0 0 0 0 0 0 0

1537 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1538 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 1539 0 0 0 0 0 0 0 0 0 0

1539 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 1410 0 0 0 0 0 0 0 0 0 0

1540 26 PointerToArray< double > * 0 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1541 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1542 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1543 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1544 25 PointerToArray< float > * 0 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1545 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1546 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1547 19 MemoryUsage const * 0 8576 19 MemoryUsage const * 19 MemoryUsage const * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1548 17 MemoryUsage const 0 8832 17 MemoryUsage const 17 MemoryUsage const 0 0 1419 0 0 0 0 0 0 0 0 0 0

1549 13 MemoryUsage * 0 8576 13 MemoryUsage * 13 MemoryUsage * 0 0 1419 0 0 0 0 0 0 0 0 0 0

1550 21 MemoryUsagePointers * 0 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1551 22 ReferenceCount const * 0 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 1552 0 0 0 0 0 0 0 0 0 0

1552 20 ReferenceCount const 0 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 1424 0 0 0 0 0 0 0 0 0 0

1553 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1424 0 0 0 0 0 0 0 0 0 0

1554 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1555 14 Buffer const * 0 8576 14 Buffer const * 14 Buffer const * 0 0 1556 0 0 0 0 0 0 0 0 0 0

1556 12 Buffer const 0 8832 12 Buffer const 12 Buffer const 0 0 1426 0 0 0 0 0 0 0 0 0 0

1557 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 1426 0 0 0 0 0 0 0 0 0 0

1558 27 PStatCollectorForwardBase * 0 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1559 26 NodeReferenceCount const * 0 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1560 24 NodeReferenceCount const 0 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 1428 0 0 0 0 0 0 0 0 0 0

1561 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1429 0 0 0 0 0 0 0 0 0 0

1562 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 1563 0 0 0 0 0 0 0 0 0 0

1563 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 1429 0 0 0 0 0 0 0 0 0 0

1564 12 vector_uchar 0 2105344 12 vector_uchar 12 vector_uchar 0 0 1565 0 0 0 0 0 0 0 0 0 0

1565 24 pvector< unsigned char > 0 2048 24 pvector< unsigned char > 24 pvector< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1566 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1567 6 int8_t 0 2105344 6 int8_t 6 int8_t 0 0 1568 0 0 0 0 0 0 0 0 0 0

1568 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

1569 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 1534 0 0 0 0 0 0 0 0 0 0

1570 7 int16_t 0 2105344 7 int16_t 7 int16_t 0 0 1571 0 0 0 0 0 0 0 0 0 0

1571 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1572 7 int32_t 0 2105344 7 int32_t 7 int32_t 0 0 1425 0 0 0 0 0 0 0 0 0 0

1573 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 1441 0 0 0 0 0 0 0 0 0 0

1574 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 1575 0 0 0 0 0 0 0 0 0 0

1575 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1576 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 1566 0 0 0 0 0 0 0 0 0 0

1577 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 1423 0 0 0 0 0 0 0 0 0 0

1578 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 1484 0 0 0 0 0 0 0 0 0 0

1579 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 1481 0 0 0 0 0 0 0 0 0 0

1580 11 PTA_uchar * 0 8576 11 PTA_uchar * 11 PTA_uchar * 0 0 1417 0 0 0 0 0 0 0 0 0 0

1581 12 CPTA_uchar * 0 8576 12 CPTA_uchar * 12 CPTA_uchar * 0 0 1407 0 0 0 0 0 0 0 0 0 0

1582 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1431 0 0 0 0 0 0 0 0 0 0

1583 13 SubfileInfo * 0 8576 13 SubfileInfo * 13 SubfileInfo * 0 0 1458 0 0 0 0 0 0 0 0 0 0

1584 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1585 25 DatagramGenerator const * 0 8576 25 DatagramGenerator const * 25 DatagramGenerator const * 0 0 1586 0 0 0 0 0 0 0 0 0 0

1586 23 DatagramGenerator const 0 8832 23 DatagramGenerator const 23 DatagramGenerator const 0 0 1431 0 0 0 0 0 0 0 0 0 0

1587 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1588 0 0 0 0 0 0 0 0 0 0

1588 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1589 13 VirtualFile * 0 8576 13 VirtualFile * 13 VirtualFile * 0 0 1459 0 0 0 0 0 0 0 0 0 0

1590 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1591 24 DatagramIterator const * 0 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 1592 0 0 0 0 0 0 0 0 0 0

1592 22 DatagramIterator const 0 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 1432 0 0 0 0 0 0 0 0 0 0

1593 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1433 0 0 0 0 0 0 0 0 0 0

1594 19 SubfileInfo const * 0 8576 19 SubfileInfo const * 19 SubfileInfo const * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1595 17 SubfileInfo const 0 8832 17 SubfileInfo const 17 SubfileInfo const 0 0 1458 0 0 0 0 0 0 0 0 0 0

1596 15 FileReference * 0 8576 15 FileReference * 15 FileReference * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1597 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1439 0 0 0 0 0 0 0 0 0 0

1598 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1599 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 1443 0 0 0 0 0 0 0 0 0 0

1600 15 Ramfile const * 0 8576 15 Ramfile const * 15 Ramfile const * 0 0 1601 0 0 0 0 0 0 0 0 0 0

1601 13 Ramfile const 0 8832 13 Ramfile const 13 Ramfile const 0 0 1443 0 0 0 0 0 0 0 0 0 0

1602 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 1444 0 0 0 0 0 0 0 0 0 0

1603 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 1485 0 0 0 0 0 0 0 0 0 0

1604 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 1447 0 0 0 0 0 0 0 0 0 0

1605 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 1606 0 0 0 0 0 0 0 0 0 0

1606 12 StreamWriter 0 2048 12 StreamWriter 12 StreamWriter 0 0 0 0 0 0 0 0 0 0 0 0 300
/**
 * A StreamWriter object is used to write sequential binary data directly to
 * an ostream.  Its interface is very similar to Datagram by design; it's
 * primarily intended as a convenience to eliminate the overhead of writing
 * bytes to a Datagram and then writing the Datagram to a stream.
 */

1607 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 1608 0 0 0 0 0 0 0 0 0 0

1608 12 StreamReader 0 2048 12 StreamReader 12 StreamReader 0 0 0 0 0 0 0 0 0 0 0 0 158
/**
 * A class to read sequential binary data directly from an istream.  Its
 * interface is similar to DatagramIterator by design; see also StreamWriter.
 */

1609 27 MemoryUsagePointers const * 0 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1610 25 MemoryUsagePointers const 0 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 1445 0 0 0 0 0 0 0 0 0 0

1611 12 ISubStream * 0 8576 12 ISubStream * 12 ISubStream * 0 0 1446 0 0 0 0 0 0 0 0 0 0

1612 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1613 14 IStreamWrapper 0 2048 14 IStreamWrapper 14 IStreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * This class provides a locking wrapper around an arbitrary istream pointer.
 * A thread may use this class to perform an atomic seek/read/gcount
 * operation.
 */

1614 12 OSubStream * 0 8576 12 OSubStream * 12 OSubStream * 0 0 1448 0 0 0 0 0 0 0 0 0 0

1615 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1616 14 OStreamWrapper 0 2048 14 OStreamWrapper 14 OStreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 159
/**
 * This class provides a locking wrapper around an arbitrary ostream pointer.
 * A thread may use this class to perform an atomic seek/write operation.
 */

1617 11 SubStream * 0 8576 11 SubStream * 11 SubStream * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1618 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 1619 0 0 0 0 0 0 0 0 0 0

1619 13 StreamWrapper 0 2048 13 StreamWrapper 13 StreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 97
/**
 * This class provides a locking wrapper around a combination ostream/istream
 * pointer.
 */

1620 11 Multifile * 0 8576 11 Multifile * 11 Multifile * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1621 10 iostream * 0 8576 15 std::iostream * 15 std::iostream * 0 0 1451 0 0 0 0 0 0 0 0 0 0

1622 17 Multifile const * 0 8576 17 Multifile const * 17 Multifile const * 0 0 1623 0 0 0 0 0 0 0 0 0 0

1623 15 Multifile const 0 8832 15 Multifile const 15 Multifile const 0 0 1452 0 0 0 0 0 0 0 0 0 0

1624 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 1626 0 0 0 0 0 0 0 0 0 0

1626 17 pvector< string > 0 2048 22 pvector< std::string > 22 pvector< std::string > 0 0 0 0 0 0 0 0 0 0 0 0 0

1627 15 Namable const * 0 8576 15 Namable const * 15 Namable const * 0 0 1628 0 0 0 0 0 0 0 0 0 0

1628 13 Namable const 0 8832 13 Namable const 13 Namable const 0 0 1455 0 0 0 0 0 0 0 0 0 0

1629 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1455 0 0 0 0 0 0 0 0 0 0

1630 16 OpenSSLWrapper * 0 8576 16 OpenSSLWrapper * 16 OpenSSLWrapper * 0 0 1457 0 0 0 0 0 0 0 0 0 0

1631 12 X509_STORE * 0 8576 12 X509_STORE * 12 X509_STORE * 0 0 1632 0 0 0 0 0 0 0 0 0 0

1632 10 X509_STORE 0 2105344 10 X509_STORE 10 X509_STORE 0 0 1633 0 0 0 0 0 0 0 0 0 0

1633 13 x509_store_st 0 1024 13 x509_store_st 13 x509_store_st 0 0 0 0 0 0 0 0 0 0 0 0 0

1634 10 streamsize 0 2105344 15 std::streamsize 15 std::streamsize 0 0 1441 0 0 0 0 0 0 0 0 0 0

1635 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 1636 0 0 0 0 0 0 0 0 0 0

1636 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 1459 0 0 0 0 0 0 0 0 0 0

1637 19 VirtualFileSystem * 0 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 1472 0 0 0 0 0 0 0 0 0 0

1638 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1435 0 0 0 0 0 0 0 0 0 0

1639 17 VirtualFileList * 0 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 1471 0 0 0 0 0 0 0 0 0 0

1640 24 VirtualFileMount const * 0 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 1641 0 0 0 0 0 0 0 0 0 0

1641 22 VirtualFileMount const 0 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 1461 0 0 0 0 0 0 0 0 0 0

1642 27 VirtualFileMountMultifile * 0 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1643 33 VirtualFileMountMultifile const * 0 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 31 VirtualFileMountMultifile const 0 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 1462 0 0 0 0 0 0 0 0 0 0

1645 25 VirtualFileMountRamdisk * 0 8576 25 VirtualFileMountRamdisk * 25 VirtualFileMountRamdisk * 0 0 1463 0 0 0 0 0 0 0 0 0 0

1646 24 VirtualFileMountSystem * 0 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1647 30 VirtualFileMountSystem const * 0 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1648 28 VirtualFileMountSystem const 0 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 1464 0 0 0 0 0 0 0 0 0 0

1649 12 ZipArchive * 0 8576 12 ZipArchive * 12 ZipArchive * 0 0 1465 0 0 0 0 0 0 0 0 0 0

1650 18 ZipArchive const * 0 8576 18 ZipArchive const * 18 ZipArchive const * 0 0 1651 0 0 0 0 0 0 0 0 0 0

1651 16 ZipArchive const 0 8832 16 ZipArchive const 16 ZipArchive const 0 0 1465 0 0 0 0 0 0 0 0 0 0

1652 21 VirtualFileMountZip * 0 8576 21 VirtualFileMountZip * 21 VirtualFileMountZip * 0 0 1466 0 0 0 0 0 0 0 0 0 0

1653 27 VirtualFileMountZip const * 0 8576 27 VirtualFileMountZip const * 27 VirtualFileMountZip const * 0 0 1654 0 0 0 0 0 0 0 0 0 0

1654 25 VirtualFileMountZip const 0 8832 25 VirtualFileMountZip const 25 VirtualFileMountZip const 0 0 1466 0 0 0 0 0 0 0 0 0 0

1655 25 VirtualFileSimple const * 0 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 1656 0 0 0 0 0 0 0 0 0 0

1656 23 VirtualFileSimple const 0 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 1467 0 0 0 0 0 0 0 0 0 0

1657 18 VirtualFileMount * 0 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 1461 0 0 0 0 0 0 0 0 0 0

1658 15 TemporaryFile * 0 8576 15 TemporaryFile * 15 TemporaryFile * 0 0 1468 0 0 0 0 0 0 0 0 0 0

1659 21 TemporaryFile const * 0 8576 21 TemporaryFile const * 21 TemporaryFile const * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1660 19 TemporaryFile const 0 8832 19 TemporaryFile const 19 TemporaryFile const 0 0 1468 0 0 0 0 0 0 0 0 0 0

1661 19 IDecompressStream * 0 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 1469 0 0 0 0 0 0 0 0 0 0

1662 17 OCompressStream * 0 8576 17 OCompressStream * 17 OCompressStream * 0 0 1470 0 0 0 0 0 0 0 0 0 0

1663 23 VirtualFileList const * 0 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 1664 0 0 0 0 0 0 0 0 0 0

1664 21 VirtualFileList const 0 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 1471 0 0 0 0 0 0 0 0 0 0

1665 25 VirtualFileSystem const * 0 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 23 VirtualFileSystem const 0 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 1472 0 0 0 0 0 0 0 0 0 0

1667 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 1668 0 0 0 0 0 0 0 0 0 0

1668 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 1669 0 0 0 0 0 0 0 0 0 0

1669 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

1670 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 1671 0 0 0 0 0 0 0 0 0 0

1671 7 Results 0 264192 20 DSearchPath::Results 20 DSearchPath::Results 1669 0 0 0 0 0 0 0 0 0 0 0 0

1672 31 PointerTo< VirtualFileMount > * 0 8576 31 PointerTo< VirtualFileMount > * 31 PointerTo< VirtualFileMount > * 0 0 1474 0 0 0 0 0 0 0 0 0 0

1673 17 decltype(nullptr) 0 8194 17 decltype(nullptr) 17 decltype(nullptr) 0 9 0 0 0 0 0 0 0 0 0 0 0

1674 37 PointerTo< VirtualFileMount > const * 0 8576 37 PointerTo< VirtualFileMount > const * 37 PointerTo< VirtualFileMount > const * 0 0 1675 0 0 0 0 0 0 0 0 0 0

1675 35 PointerTo< VirtualFileMount > const 0 8832 35 PointerTo< VirtualFileMount > const 35 PointerTo< VirtualFileMount > const 0 0 1474 0 0 0 0 0 0 0 0 0 0

1676 35 PointerToBase< VirtualFileMount > * 0 8576 35 PointerToBase< VirtualFileMount > * 35 PointerToBase< VirtualFileMount > * 0 0 1475 0 0 0 0 0 0 0 0 0 0

1677 41 PointerToBase< VirtualFileMount > const * 0 8576 41 PointerToBase< VirtualFileMount > const * 41 PointerToBase< VirtualFileMount > const * 0 0 1678 0 0 0 0 0 0 0 0 0 0

1678 39 PointerToBase< VirtualFileMount > const 0 8832 39 PointerToBase< VirtualFileMount > const 39 PointerToBase< VirtualFileMount > const 0 0 1475 0 0 0 0 0 0 0 0 0 0

1679 14 StringStream * 0 8576 14 StringStream * 14 StringStream * 0 0 1476 0 0 0 0 0 0 0 0 0 0

1680 11 TrueClock * 0 8576 11 TrueClock * 11 TrueClock * 0 0 1480 0 0 0 0 0 0 0 0 0 0

1681 17 TrueClock const * 0 8576 17 TrueClock const * 17 TrueClock const * 0 0 1682 0 0 0 0 0 0 0 0 0 0

1682 15 TrueClock const 0 8832 15 TrueClock const 15 TrueClock const 0 0 1480 0 0 0 0 0 0 0 0 0 0

1683 11 Patchfile * 0 8576 11 Patchfile * 11 Patchfile * 0 0 1482 0 0 0 0 0 0 0 0 0 0

1684 17 Patchfile const * 0 8576 17 Patchfile const * 17 Patchfile const * 0 0 1685 0 0 0 0 0 0 0 0 0 0

1685 15 Patchfile const 0 8832 15 Patchfile const 15 Patchfile const 0 0 1482 0 0 0 0 0 0 0 0 0 0

1686 25 WeakPointerToVoid const * 0 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 23 WeakPointerToVoid const 0 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 1486 0 0 0 0 0 0 0 0 0 0

1688 17 WindowsRegistry * 0 8576 17 WindowsRegistry * 17 WindowsRegistry * 0 0 1487 0 0 0 0 0 0 0 0 0 0

1689 23 WindowsRegistry const * 0 8576 23 WindowsRegistry const * 23 WindowsRegistry const * 0 0 1690 0 0 0 0 0 0 0 0 0 0

1690 21 WindowsRegistry const 0 8832 21 WindowsRegistry const 21 WindowsRegistry const 0 0 1487 0 0 0 0 0 0 0 0 0 0

0
27
1691 8 tracking 0 2 1421 869 0 0 0 0 0 0 0 21 MemoryUsage::tracking 0

1692 8 counting 0 2 1421 870 0 0 0 0 0 0 0 21 MemoryUsage::counting 0

1693 16 current_cpp_size 0 2 1422 871 0 0 0 0 0 0 0 29 MemoryUsage::current_cpp_size 0

1694 14 total_cpp_size 0 2 1422 872 0 0 0 0 0 0 0 27 MemoryUsage::total_cpp_size 0

1695 22 panda_heap_single_size 0 2 1422 873 0 0 0 0 0 0 0 35 MemoryUsage::panda_heap_single_size 0

1696 21 panda_heap_array_size 0 2 1422 874 0 0 0 0 0 0 0 34 MemoryUsage::panda_heap_array_size 0

1697 19 panda_heap_overhead 0 2 1422 875 0 0 0 0 0 0 0 32 MemoryUsage::panda_heap_overhead 0

1698 15 panda_mmap_size 0 2 1422 876 0 0 0 0 0 0 0 28 MemoryUsage::panda_mmap_size 0

1699 13 external_size 0 2 1422 877 0 0 0 0 0 0 0 26 MemoryUsage::external_size 0

1700 10 total_size 0 2 1422 878 0 0 0 0 0 0 0 23 MemoryUsage::total_size 0

1701 9 ref_count 0 2 1425 894 0 0 0 0 0 0 0 25 ReferenceCount::ref_count 31
// The current reference count.

1702 8 filename 0 2 1434 1018 0 0 0 0 0 0 0 22 DatagramSink::filename 0

1703 4 file 0 2 1436 1019 0 0 0 0 0 0 0 18 DatagramSink::file 0

1704 8 file_pos 0 2 1440 1020 0 0 0 0 0 0 0 22 DatagramSink::file_pos 0

1705 12 magic_number 0 2 1453 1167 0 0 0 0 0 0 0 23 Multifile::magic_number 0

1706 4 name 0 6 1456 1174 1171 0 0 0 0 0 0 13 Namable::name 0

1707 6 mounts 0 66 1474 1315 0 0 0 0 1314 0 0 25 VirtualFileSystem::mounts 0

1708 4 data 0 6 1477 1357 1358 0 0 0 0 0 0 18 StringStream::data 0

1709 9 long_time 0 2 1481 1360 0 0 0 0 0 0 0 20 TrueClock::long_time 203
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

1710 10 short_time 0 2 1481 1361 0 0 0 0 0 0 0 21 TrueClock::short_time 206
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

1711 14 short_raw_time 0 2 1481 1362 0 0 0 0 0 0 0 25 TrueClock::short_raw_time 144
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

1712 11 error_count 0 2 1425 1363 0 0 0 0 0 0 0 22 TrueClock::error_count 0

1713 8 progress 0 2 1483 1373 0 0 0 0 0 0 0 19 Patchfile::progress 0

1714 15 allow_multifile 0 6 1421 1375 1374 0 0 0 0 0 0 26 Patchfile::allow_multifile 0

1715 16 footprint_length 0 6 1425 1377 1376 0 0 0 0 0 0 27 Patchfile::footprint_length 0

1716 11 source_hash 0 10 1485 1380 0 1379 0 0 0 0 0 22 Patchfile::source_hash 0

1717 11 result_hash 0 2 1485 1381 0 0 0 0 0 0 0 22 Patchfile::result_hash 0

6
1718 12 get_pointers 0 1086 1087 33 MemoryUsagePointers::get_pointers 0

1719 18 get_typed_pointers 0 1086 1088 39 MemoryUsagePointers::get_typed_pointers 0

1720 17 get_subfile_names 0 1145 1150 28 Multifile::get_subfile_names 0

1721 17 get_subfile_names 0 1261 1266 29 ZipArchive::get_subfile_names 0

1722 9 get_files 0 1300 1301 26 VirtualFileList::get_files 0

1723 10 get_mounts 0 1314 1315 29 VirtualFileSystem::get_mounts 0

