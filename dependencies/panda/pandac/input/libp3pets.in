1641927192
3 3
9 libp3pets 4 VNBN 16 panda3d.toontown 
12
15 9 CPetBrain 0 4 27 20 CPetBrain::CPetBrain 0 2 1 2 222
////////////////////////////////////////////////////////////////////
//     Function: CPetBrain::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
CPetBrain::CPetBrain(void);
inline CPetBrain::CPetBrain(CPetBrain const &) = default;

16 15 is_attending_us 0 4 27 26 CPetBrain::is_attending_us 0 1 3 302
////////////////////////////////////////////////////////////////////
//     Function: CPetBrain::is_attending_us
//       Access: Published
//  Description: Calculates whether another avatar is paying
//               attention to us
////////////////////////////////////////////////////////////////////
62
bool CPetBrain::is_attending_us(NodePath &us, NodePath &them);

17 10 ~CPetBrain 0 4 27 21 CPetBrain::~CPetBrain 0 0 0
28
CPetBrain::~CPetBrain(void);

18 9 CPetChase 0 4 28 20 CPetChase::CPetChase 0 2 4 5 219
////////////////////////////////////////////////////////////////////
//     Function: CPetChase::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
148
CPetChase::CPetChase(NodePath *target = 0, float min_dist = 5.0, float move_angle = 20.0);
inline CPetChase::CPetChase(CPetChase const &) = default;

19 10 set_target 0 4 28 21 CPetChase::set_target 0 1 6 265
////////////////////////////////////////////////////////////////////
//     Function: CPetChase::set_target
//       Access: Published
//  Description: Sets the NodePath that this pet should chase
////////////////////////////////////////////////////////////////////
58
inline void CPetChase::set_target(NodePath const &target);

20 10 get_target 0 4 28 21 CPetChase::get_target 0 1 7 266
////////////////////////////////////////////////////////////////////
//     Function: CPetChase::get_target
//       Access: Published
//  Description: Returns the NodePath that this pet is chasing
////////////////////////////////////////////////////////////////////
50
inline NodePath CPetChase::get_target(void) const;

21 12 set_min_dist 0 4 28 23 CPetChase::set_min_dist 0 1 8 325
////////////////////////////////////////////////////////////////////
//     Function: CPetChase::set_min_dist
//       Access: Published
//  Description: Sets the minimum distance for which the pet should
//               approach the target it is chasing.
////////////////////////////////////////////////////////////////////
52
inline void CPetChase::set_min_dist(float min_dist);

22 12 get_min_dist 0 4 28 23 CPetChase::get_min_dist 0 1 9 328
////////////////////////////////////////////////////////////////////
//     Function: CPetChase::get_min_dist
//       Access: Published
//  Description: returns the minimum distance for which the pet should
//               approach the target it is chasing.
////////////////////////////////////////////////////////////////////
49
inline float CPetChase::get_min_dist(void) const;

23 14 get_class_type 0 4 28 25 CPetChase::get_class_type 0 1 10 0
50
static TypeHandle CPetChase::get_class_type(void);

24 8 CPetFlee 0 4 30 18 CPetFlee::CPetFlee 0 2 11 12 218
////////////////////////////////////////////////////////////////////
//     Function: CPetFlee::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
144
CPetFlee::CPetFlee(NodePath *chaser = 0, float max_dist = 50.0, float move_angle = 20.0);
inline CPetFlee::CPetFlee(CPetFlee const &) = default;

25 10 set_chaser 0 4 30 20 CPetFlee::set_chaser 0 1 13 268
////////////////////////////////////////////////////////////////////
//     Function: CPetFlee::set_chaser
//       Access: Published
//  Description: Sets the NodePath that this pet should flee from
////////////////////////////////////////////////////////////////////
51
inline void CPetFlee::set_chaser(NodePath &chaser);

26 14 get_class_type 0 4 30 24 CPetFlee::get_class_type 0 1 14 0
49
static TypeHandle CPetFlee::get_class_type(void);

14
1 0 0 7 2 31 17 0 222 ////////////////////////////////////////////////////////////////////
//     Function: CPetBrain::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
2 0 0 7 2 31 17 0 0 1 6 param0 0 32  
3 0 0 6 3 36 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: CPetBrain::is_attending_us
//       Access: Published
//  Description: Calculates whether another avatar is paying
//               attention to us
//////////////////////////////////////////////////////////////////// 3 4 this 3 31  2 us 1 34  4 them 1 34  
4 0 0 7 7 39 0 0 0 1 6 param0 0 37  
5 0 0 7 7 39 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: CPetChase::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 6 target 1 34  8 min_dist 1 40  10 move_angle 1 40  
6 0 0 4 8 43 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: CPetChase::set_target
//       Access: Published
//  Description: Sets the NodePath that this pet should chase
//////////////////////////////////////////////////////////////////// 2 4 this 3 39  6 target 1 41  
7 0 0 7 9 34 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: CPetChase::get_target
//       Access: Published
//  Description: Returns the NodePath that this pet is chasing
//////////////////////////////////////////////////////////////////// 1 4 this 3 37  
8 0 0 4 10 43 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: CPetChase::set_min_dist
//       Access: Published
//  Description: Sets the minimum distance for which the pet should
//               approach the target it is chasing.
//////////////////////////////////////////////////////////////////// 2 4 this 3 39  8 min_dist 1 40  
9 0 0 6 11 40 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: CPetChase::get_min_dist
//       Access: Published
//  Description: returns the minimum distance for which the pet should
//               approach the target it is chasing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 37  
10 0 0 7 12 45 0 0 0 0 
11 0 0 7 14 48 0 0 0 1 6 param0 0 46  
12 0 0 7 14 48 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: CPetFlee::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 6 chaser 1 34  8 max_dist 1 40  10 move_angle 1 40  
13 0 0 4 15 43 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: CPetFlee::set_chaser
//       Access: Published
//  Description: Sets the NodePath that this pet should flee from
//////////////////////////////////////////////////////////////////// 2 4 this 3 48  6 chaser 1 34  
14 0 0 7 16 45 0 0 0 0 
22
27 9 CPetBrain 0 141313 9 CPetBrain 9 CPetBrain 0 0 0 1 15 17 0 1 16 0 0 0 0 0 0

28 9 CPetChase 0 75777 9 CPetChase 9 CPetChase 0 0 0 1 18 0 0 5 19 20 21 22 23 0 0 1 0 29 0 0 0 0 0

29 8 CImpulse 0 2048 8 CImpulse 8 CImpulse 0 0 0 0 0 0 0 0 0 0 0 0 0

30 8 CPetFlee 0 75777 8 CPetFlee 8 CPetFlee 0 0 0 1 24 0 0 2 25 26 0 0 1 0 29 0 0 0 0 0

31 11 CPetBrain * 0 8576 11 CPetBrain * 11 CPetBrain * 0 0 27 0 0 0 0 0 0 0 0 0 0

32 17 CPetBrain const * 0 8576 17 CPetBrain const * 17 CPetBrain const * 0 0 33 0 0 0 0 0 0 0 0 0 0

33 15 CPetBrain const 0 8832 15 CPetBrain const 15 CPetBrain const 0 0 27 0 0 0 0 0 0 0 0 0 0

34 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 35 0 0 0 0 0 0 0 0 0 0

35 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

36 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

37 17 CPetChase const * 0 8576 17 CPetChase const * 17 CPetChase const * 0 0 38 0 0 0 0 0 0 0 0 0 0

38 15 CPetChase const 0 8832 15 CPetChase const 15 CPetChase const 0 0 28 0 0 0 0 0 0 0 0 0 0

39 11 CPetChase * 0 8576 11 CPetChase * 11 CPetChase * 0 0 28 0 0 0 0 0 0 0 0 0 0

40 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

41 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 42 0 0 0 0 0 0 0 0 0 0

42 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 35 0 0 0 0 0 0 0 0 0 0

43 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

44 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

45 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 44 0 0 0 0 0 0 0 0 0 0

46 16 CPetFlee const * 0 8576 16 CPetFlee const * 16 CPetFlee const * 0 0 47 0 0 0 0 0 0 0 0 0 0

47 14 CPetFlee const 0 8832 14 CPetFlee const 14 CPetFlee const 0 0 30 0 0 0 0 0 0 0 0 0 0

48 10 CPetFlee * 0 8576 10 CPetFlee * 10 CPetFlee * 0 0 30 0 0 0 0 0 0 0 0 0 0

0
0
0
