1609527411
3 3
10 libp3putil 4 xqRv 12 panda3d.core 
960
972 5 clear 0 4 1934 56 PointerToBase< ReferenceCountedVector< ushort > >::clear 0 1 14 0
75
inline void PointerToBase< ReferenceCountedVector< ushort > >::clear(void);

973 6 output 0 4 1934 57 PointerToBase< ReferenceCountedVector< ushort > >::output 0 1 15 0
88
void PointerToBase< ReferenceCountedVector< ushort > >::output(std::ostream &out) const;

974 19 ~PointerToArrayBase 0 4 1933 49 PointerToArrayBase< ushort >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< ushort >::~PointerToArrayBase(void);

975 19 ConstPointerToArray 0 4 1932 50 ConstPointerToArray< ushort >::ConstPointerToArray 0 2 1 2 0
198
inline ConstPointerToArray< ushort >::ConstPointerToArray(PointerToArray< ushort > const &copy);
inline ConstPointerToArray< ushort >::ConstPointerToArray(ConstPointerToArray< ushort > const &copy);

976 5 clear 0 4 1932 36 ConstPointerToArray< ushort >::clear 0 1 3 0
55
inline void ConstPointerToArray< ushort >::clear(void);

977 4 size 0 4 1932 35 ConstPointerToArray< ushort >::size 0 1 4 0
78
inline unsigned long long int ConstPointerToArray< ushort >::size(void) const;

978 11 get_element 0 4 1932 42 ConstPointerToArray< ushort >::get_element 0 1 5 0
96
inline ushort const &ConstPointerToArray< ushort >::get_element(unsigned long long int n) const;

979 11 __getitem__ 0 4 1932 42 ConstPointerToArray< ushort >::__getitem__ 0 1 6 0
89
ushort const &ConstPointerToArray< ushort >::__getitem__(unsigned long long int n) const;

980 8 get_data 0 4 1932 39 ConstPointerToArray< ushort >::get_data 0 1 7 0
62
PyObject *ConstPointerToArray< ushort >::get_data(void) const;

981 11 get_subdata 0 4 1932 42 ConstPointerToArray< ushort >::get_subdata 0 1 8 0
115
PyObject *ConstPointerToArray< ushort >::get_subdata(unsigned long long int n, unsigned long long int count) const;

982 13 get_ref_count 0 4 1932 44 ConstPointerToArray< ushort >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< ushort >::get_ref_count(void) const;

983 18 get_node_ref_count 0 4 1932 49 ConstPointerToArray< ushort >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< ushort >::get_node_ref_count(void) const;

984 5 count 0 4 1932 36 ConstPointerToArray< ushort >::count 0 1 11 0
89
inline unsigned long long int ConstPointerToArray< ushort >::count(ushort const &) const;

985 13 __getbuffer__ 0 4 1932 44 ConstPointerToArray< ushort >::__getbuffer__ 0 1 12 0
99
int ConstPointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

986 17 __releasebuffer__ 0 4 1932 48 ConstPointerToArray< ushort >::__releasebuffer__ 0 1 13 0
93
void ConstPointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

987 20 ~ConstPointerToArray 0 4 1932 51 ConstPointerToArray< ushort >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< ushort >::~ConstPointerToArray(void);

988 14 PointerToArray 0 4 1936 40 PointerToArray< ushort >::PointerToArray 0 3 16 17 18 0
279
inline PointerToArray< ushort >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((ushort const *)(0))));
inline PointerToArray< ushort >::PointerToArray(PointerToArray< ushort > const &copy);
PointerToArray< ushort >::PointerToArray(PyObject *self, PyObject *source);

989 11 empty_array 0 4 1936 37 PointerToArray< ushort >::empty_array 0 1 19 0
171
static inline PointerToArray< ushort > PointerToArray< ushort >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((ushort const *)(0))));

990 5 clear 0 4 1936 31 PointerToArray< ushort >::clear 0 1 20 0
50
inline void PointerToArray< ushort >::clear(void);

991 4 size 0 4 1936 30 PointerToArray< ushort >::size 0 1 21 0
73
inline unsigned long long int PointerToArray< ushort >::size(void) const;

992 9 push_back 0 4 1936 35 PointerToArray< ushort >::push_back 0 1 22 0
65
inline void PointerToArray< ushort >::push_back(ushort const &x);

993 8 pop_back 0 4 1936 34 PointerToArray< ushort >::pop_back 0 1 23 0
53
inline void PointerToArray< ushort >::pop_back(void);

994 11 get_element 0 4 1936 37 PointerToArray< ushort >::get_element 0 1 24 0
91
inline ushort const &PointerToArray< ushort >::get_element(unsigned long long int n) const;

995 11 set_element 0 4 1936 37 PointerToArray< ushort >::set_element 0 1 25 0
97
inline void PointerToArray< ushort >::set_element(unsigned long long int n, ushort const &value);

996 11 __getitem__ 0 4 1936 37 PointerToArray< ushort >::__getitem__ 0 1 26 0
84
ushort const &PointerToArray< ushort >::__getitem__(unsigned long long int n) const;

997 11 __setitem__ 0 4 1936 37 PointerToArray< ushort >::__setitem__ 0 1 27 0
90
void PointerToArray< ushort >::__setitem__(unsigned long long int n, ushort const &value);

998 8 get_data 0 4 1936 34 PointerToArray< ushort >::get_data 0 1 28 0
57
PyObject *PointerToArray< ushort >::get_data(void) const;

999 8 set_data 0 4 1936 34 PointerToArray< ushort >::set_data 0 1 29 0
56
void PointerToArray< ushort >::set_data(PyObject *data);

1000 11 get_subdata 0 4 1936 37 PointerToArray< ushort >::get_subdata 0 1 30 0
110
PyObject *PointerToArray< ushort >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1001 11 set_subdata 0 4 1936 37 PointerToArray< ushort >::set_subdata 0 1 31 0
145
inline void PointerToArray< ushort >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1002 13 get_ref_count 0 4 1936 39 PointerToArray< ushort >::get_ref_count 0 1 32 0
63
inline int PointerToArray< ushort >::get_ref_count(void) const;

1003 18 get_node_ref_count 0 4 1936 44 PointerToArray< ushort >::get_node_ref_count 0 1 33 0
68
inline int PointerToArray< ushort >::get_node_ref_count(void) const;

1004 5 count 0 4 1936 31 PointerToArray< ushort >::count 0 1 34 0
84
inline unsigned long long int PointerToArray< ushort >::count(ushort const &) const;

1005 13 __getbuffer__ 0 4 1936 39 PointerToArray< ushort >::__getbuffer__ 0 1 35 0
88
int PointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1006 17 __releasebuffer__ 0 4 1936 43 PointerToArray< ushort >::__releasebuffer__ 0 1 36 0
88
void PointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1007 15 ~PointerToArray 0 4 1936 41 PointerToArray< ushort >::~PointerToArray 0 0 0
48
PointerToArray< ushort >::~PointerToArray(void);

1008 14 ~AnimInterface 0 6 1937 29 AnimInterface::~AnimInterface 0 0 10
/**
 *
 */
44
virtual AnimInterface::~AnimInterface(void);

1009 4 play 0 4 1937 19 AnimInterface::play 0 2 37 38 477
/**
 * Runs the entire animation from beginning to end and stops.
 */

/**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

1010 4 loop 0 4 1937 19 AnimInterface::loop 0 2 39 40 392
/**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

1011 8 pingpong 0 4 1937 23 AnimInterface::pingpong 0 2 41 42 369
/**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

1012 4 stop 0 4 1937 19 AnimInterface::stop 0 1 43 130
/**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */
38
inline void AnimInterface::stop(void);

1013 4 pose 0 4 1937 19 AnimInterface::pose 0 1 44 72
/**
 * Sets the animation to the indicated frame and holds it there.
 */
46
inline void AnimInterface::pose(double frame);

1014 13 set_play_rate 0 4 1937 28 AnimInterface::set_play_rate 0 1 45 243
/**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */
59
inline void AnimInterface::set_play_rate(double play_rate);

1015 13 get_play_rate 0 4 1937 28 AnimInterface::get_play_rate 0 1 46 79
/**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */
55
inline double AnimInterface::get_play_rate(void) const;

1016 14 get_frame_rate 0 4 1937 29 AnimInterface::get_frame_rate 0 1 47 234
/**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */
56
inline double AnimInterface::get_frame_rate(void) const;

1017 14 get_num_frames 0 6 1937 29 AnimInterface::get_num_frames 0 1 48 278
/**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */
54
virtual int AnimInterface::get_num_frames(void) const;

1018 9 get_frame 0 4 1937 24 AnimInterface::get_frame 0 1 49 116
/**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */
48
inline int AnimInterface::get_frame(void) const;

1019 14 get_next_frame 0 4 1937 29 AnimInterface::get_next_frame 0 1 50 330
/**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */
53
inline int AnimInterface::get_next_frame(void) const;

1020 8 get_frac 0 4 1937 23 AnimInterface::get_frac 0 1 51 314
/**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */
50
inline double AnimInterface::get_frac(void) const;

1021 14 get_full_frame 0 4 1937 29 AnimInterface::get_full_frame 0 1 52 372
/**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */
53
inline int AnimInterface::get_full_frame(void) const;

1022 15 get_full_fframe 0 4 1937 30 AnimInterface::get_full_fframe 0 1 53 490
/**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */
57
inline double AnimInterface::get_full_fframe(void) const;

1023 10 is_playing 0 4 1937 25 AnimInterface::is_playing 0 1 54 208
/**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */
50
inline bool AnimInterface::is_playing(void) const;

1024 6 output 0 6 1937 21 AnimInterface::output 0 1 55 10
/**
 *
 */
60
virtual void AnimInterface::output(std::ostream &out) const;

1025 14 get_class_type 0 4 1937 29 AnimInterface::get_class_type 0 1 56 0
54
static TypeHandle AnimInterface::get_class_type(void);

1026 9 UpdateSeq 0 4 1942 20 UpdateSeq::UpdateSeq 0 2 57 58 132
/**
 * Creates an UpdateSeq in the given state.
 */

/**
 * Creates an UpdateSeq in the 'initial' state.
 */

/**
 *
 */

/**
 *
 */
89
constexpr UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

1027 7 initial 0 4 1942 18 UpdateSeq::initial 0 1 59 0
52
static constexpr UpdateSeq UpdateSeq::initial(void);

1028 3 old 0 4 1942 14 UpdateSeq::old 0 1 60 0
48
static constexpr UpdateSeq UpdateSeq::old(void);

1029 5 fresh 0 4 1942 16 UpdateSeq::fresh 0 1 61 0
50
static constexpr UpdateSeq UpdateSeq::fresh(void);

1030 10 operator = 0 4 1942 21 UpdateSeq::operator = 0 1 62 10
/**
 *
 */
57
inline void UpdateSeq::operator =(UpdateSeq const &copy);

1031 5 clear 0 4 1942 16 UpdateSeq::clear 0 1 63 55
/**
 * Resets the UpdateSeq to the 'initial' state.
 */
35
inline void UpdateSeq::clear(void);

1032 10 is_initial 0 4 1942 21 UpdateSeq::is_initial 0 1 64 67
/**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */
46
inline bool UpdateSeq::is_initial(void) const;

1033 6 is_old 0 4 1942 17 UpdateSeq::is_old 0 1 65 63
/**
 * Returns true if the UpdateSeq is in the 'old' state.
 */
42
inline bool UpdateSeq::is_old(void) const;

1034 8 is_fresh 0 4 1942 19 UpdateSeq::is_fresh 0 1 66 65
/**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */
44
inline bool UpdateSeq::is_fresh(void) const;

1035 10 is_special 0 4 1942 21 UpdateSeq::is_special 0 1 67 105
/**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */
46
inline bool UpdateSeq::is_special(void) const;

1036 11 operator == 0 4 1942 22 UpdateSeq::operator == 0 1 68 0
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

1037 11 operator != 0 4 1942 22 UpdateSeq::operator != 0 1 69 0
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

1038 10 operator < 0 4 1942 21 UpdateSeq::operator < 0 1 70 0
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

1039 11 operator <= 0 4 1942 22 UpdateSeq::operator <= 0 1 71 0
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

1040 10 operator > 0 4 1942 21 UpdateSeq::operator > 0 1 72 0
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

1041 11 operator >= 0 4 1942 22 UpdateSeq::operator >= 0 1 73 0
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

1042 11 operator ++ 0 68 1942 22 UpdateSeq::operator ++ 0 1 74 0
46
inline UpdateSeq UpdateSeq::operator ++(void);

1043 11 operator ++ 0 4 1942 22 UpdateSeq::operator ++ 0 1 75 0
46
inline UpdateSeq UpdateSeq::operator ++(int );

1044 7 get_seq 0 4 1942 18 UpdateSeq::get_seq 0 1 76 107
/**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */
60
inline AtomicAdjust::Integer UpdateSeq::get_seq(void) const;

1045 6 output 0 4 1942 17 UpdateSeq::output 0 1 77 10
/**
 *
 */
55
inline void UpdateSeq::output(std::ostream &out) const;

1046 10 ~UpdateSeq 0 4 1942 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

1047 6 fillin 0 6 1946 21 TypedWritable::fillin 0 1 78 308
/**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */
79
virtual void TypedWritable::fillin(DatagramIterator &scan, BamReader *manager);

1048 17 mark_bam_modified 0 4 1946 32 TypedWritable::mark_bam_modified 0 1 79 345
/**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */
51
inline void TypedWritable::mark_bam_modified(void);

1049 16 get_bam_modified 0 4 1946 31 TypedWritable::get_bam_modified 0 1 80 140
/**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

1050 10 __reduce__ 0 4 1946 25 TypedWritable::__reduce__ 0 1 81 0
58
PyObject *TypedWritable::__reduce__(PyObject *self) const;

1051 18 __reduce_persist__ 0 4 1946 33 TypedWritable::__reduce_persist__ 0 1 82 0
85
PyObject *TypedWritable::__reduce_persist__(PyObject *self, PyObject *pickler) const;

1052 20 encode_to_bam_stream 0 4 1946 35 TypedWritable::encode_to_bam_stream 0 2 83 84 854
/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a bytes object.  Returns an empty bytes
 * object on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */

/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and stores that data in the indicated string.  Returns true on
 * success, false on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */
165
inline vector_uchar TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(vector_uchar &data, BamWriter *writer = nullptr) const;

1053 26 decode_raw_from_bam_stream 0 4 1946 41 TypedWritable::decode_raw_from_bam_stream 0 0 953
/**
 * Reads the bytes created by a previous call to encode_to_bam_stream(), and
 * extracts the single object on those bytes.  Returns true on success, false
 * on error.
 *
 * This variant sets the TypedWritable and ReferenceCount pointers separately;
 * both are pointers to the same object.  The reference count is not
 * incremented; it is the caller's responsibility to manage the reference
 * count.
 *
 * Note that this method cannot be used to retrieve objects that do not
 * inherit from ReferenceCount, because these objects cannot persist beyond
 * the lifetime of the BamReader that reads them.  To retrieve these objects
 * from a bam stream, you must construct a BamReader directly.
 *
 * If you happen to know that the particular object in question inherits from
 * TypedWritableReferenceCount or PandaNode, consider calling the variant of
 * decode_from_bam_stream() defined for those methods, which presents a
 * simpler interface.
 */
149
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, vector_uchar data, BamReader *reader = nullptr);

1054 14 get_class_type 0 4 1946 29 TypedWritable::get_class_type 0 1 85 0
54
static TypeHandle TypedWritable::get_class_type(void);

1055 23 upcast_to_TypedWritable 0 12 1948 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 88 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

1056 39 downcast_to_TypedWritableReferenceCount 0 12 1946 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 0 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

1057 24 upcast_to_ReferenceCount 0 12 1948 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 89 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

1058 39 downcast_to_TypedWritableReferenceCount 0 12 1949 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 0 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

1059 22 decode_from_bam_stream 0 4 1948 51 TypedWritableReferenceCount::decode_from_bam_stream 0 1 86 491
/**
 * Reads the bytes created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on those bytes.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */
148
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(vector_uchar data, BamReader *reader = nullptr);

1060 14 get_class_type 0 4 1948 43 TypedWritableReferenceCount::get_class_type 0 1 87 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

1061 28 ~TypedWritableReferenceCount 0 4 1948 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

1062 37 upcast_to_TypedWritableReferenceCount 0 12 1950 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 112 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

1063 26 downcast_to_BamCacheRecord 0 12 1948 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 0 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

1064 24 upcast_to_LinkedListNode 0 12 1950 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

1065 26 downcast_to_BamCacheRecord 0 12 1951 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

1066 15 ~BamCacheRecord 0 6 1950 31 BamCacheRecord::~BamCacheRecord 0 0 10
/**
 *
 */
46
virtual BamCacheRecord::~BamCacheRecord(void);

1067 9 make_copy 0 4 1950 25 BamCacheRecord::make_copy 0 1 90 179
/**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

1068 11 operator == 0 4 1950 27 BamCacheRecord::operator == 0 1 91 0
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

1069 19 get_source_pathname 0 4 1950 35 BamCacheRecord::get_source_pathname 0 1 92 237
/**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

1070 18 get_cache_filename 0 4 1950 34 BamCacheRecord::get_cache_filename 0 1 93 230
/**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1071 20 get_source_timestamp 0 4 1950 36 BamCacheRecord::get_source_timestamp 0 1 94 204
/**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */
63
inline time_t BamCacheRecord::get_source_timestamp(void) const;

1072 17 get_recorded_time 0 4 1950 33 BamCacheRecord::get_recorded_time 0 1 95 84
/**
 * Returns the time at which this particular record was recorded or updated.
 */
60
inline time_t BamCacheRecord::get_recorded_time(void) const;

1073 23 get_num_dependent_files 0 4 1950 39 BamCacheRecord::get_num_dependent_files 0 1 96 75
/**
 * Returns the number of source files that contribute to the cache.
 */
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1074 22 get_dependent_pathname 0 4 1950 38 BamCacheRecord::get_dependent_pathname 0 1 97 94
/**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1075 20 dependents_unchanged 0 4 1950 36 BamCacheRecord::dependents_unchanged 0 1 98 124
/**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */
54
bool BamCacheRecord::dependents_unchanged(void) const;

1076 21 clear_dependent_files 0 4 1950 37 BamCacheRecord::clear_dependent_files 0 1 99 80
/**
 * Empties the list of files that contribute to the data in this record.
 */
49
void BamCacheRecord::clear_dependent_files(void);

1077 18 add_dependent_file 0 4 1950 34 BamCacheRecord::add_dependent_file 0 2 100 101 309
/**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */

/**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */
132
void BamCacheRecord::add_dependent_file(Filename const &pathname);
void BamCacheRecord::add_dependent_file(VirtualFile const *file);

1078 8 has_data 0 4 1950 24 BamCacheRecord::has_data 0 1 102 130
/**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */
49
inline bool BamCacheRecord::has_data(void) const;

1079 10 clear_data 0 4 1950 26 BamCacheRecord::clear_data 0 1 103 147
/**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */
45
inline void BamCacheRecord::clear_data(void);

1080 8 get_data 0 4 1950 24 BamCacheRecord::get_data 0 1 104 139
/**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1081 12 extract_data 0 4 1950 28 BamCacheRecord::extract_data 0 0 416
/**
 * Fills ptr and ref_ptr with the two different-typed pointers to the same
 * object, the data stored within this record.  This transfers ownership of
 * the data pointer; the caller will be responsible for managing the reference
 * counts on this object subsequently.
 *
 * Returns true if the record contained any data (and the pointers have been
 * filled), false if it didn't (and the pointers are NULL).
 */
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1082 8 set_data 0 4 1950 24 BamCacheRecord::set_data 0 4 105 106 107 108 916
/**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */

/**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */
281
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr);
inline void BamCacheRecord::set_data(TypedWritableReferenceCount *ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1083 6 output 0 4 1950 22 BamCacheRecord::output 0 1 109 10
/**
 *
 */
53
void BamCacheRecord::output(std::ostream &out) const;

1084 5 write 0 4 1950 21 BamCacheRecord::write 0 1 110 10
/**
 *
 */
74
void BamCacheRecord::write(std::ostream &out, int indent_level = 0) const;

1085 14 get_class_type 0 4 1950 30 BamCacheRecord::get_class_type 0 1 111 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1086 8 BamCache 0 4 1956 18 BamCache::BamCache 0 1 113 10
/**
 *
 */
25
BamCache::BamCache(void);

1087 9 ~BamCache 0 4 1956 19 BamCache::~BamCache 0 0 10
/**
 *
 */
26
BamCache::~BamCache(void);

1088 10 set_active 0 4 1956 20 BamCache::set_active 0 1 114 347
/**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
44
inline void BamCache::set_active(bool flag);

1089 10 get_active 0 4 1956 20 BamCache::get_active 0 1 115 381
/**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
45
inline bool BamCache::get_active(void) const;

1090 16 set_cache_models 0 4 1956 26 BamCache::set_cache_models 0 1 116 118
/**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */
50
inline void BamCache::set_cache_models(bool flag);

1091 16 get_cache_models 0 4 1956 26 BamCache::get_cache_models 0 1 117 172
/**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */
51
inline bool BamCache::get_cache_models(void) const;

1092 18 set_cache_textures 0 4 1956 28 BamCache::set_cache_textures 0 1 118 101
/**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */
52
inline void BamCache::set_cache_textures(bool flag);

1093 18 get_cache_textures 0 4 1956 28 BamCache::get_cache_textures 0 1 119 174
/**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */
53
inline bool BamCache::get_cache_textures(void) const;

1094 29 set_cache_compressed_textures 0 4 1956 39 BamCache::set_cache_compressed_textures 0 1 120 722
/**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1095 29 get_cache_compressed_textures 0 4 1956 39 BamCache::get_cache_compressed_textures 0 1 121 202
/**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1096 26 set_cache_compiled_shaders 0 4 1956 36 BamCache::set_cache_compiled_shaders 0 1 122 184
/**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */
60
inline void BamCache::set_cache_compiled_shaders(bool flag);

1097 26 get_cache_compiled_shaders 0 4 1956 36 BamCache::get_cache_compiled_shaders 0 1 123 196
/**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */
61
inline bool BamCache::get_cache_compiled_shaders(void) const;

1098 8 set_root 0 4 1956 18 BamCache::set_root 0 1 124 372
/**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */
46
void BamCache::set_root(Filename const &root);

1099 8 get_root 0 4 1956 18 BamCache::get_root 0 1 125 75
/**
 * Returns the current root pathname of the cache.  See set_root().
 */
47
inline Filename BamCache::get_root(void) const;

1100 14 set_flush_time 0 4 1956 24 BamCache::set_flush_time 0 1 126 86
/**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */
53
inline void BamCache::set_flush_time(int flush_time);

1101 14 get_flush_time 0 4 1956 24 BamCache::get_flush_time 0 1 127 84
/**
 * Returns the time in seconds between automatic flushes of the cache index.
 */
48
inline int BamCache::get_flush_time(void) const;

1102 20 set_cache_max_kbytes 0 4 1956 30 BamCache::set_cache_max_kbytes 0 1 128 430
/**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1103 20 get_cache_max_kbytes 0 4 1956 30 BamCache::get_cache_max_kbytes 0 1 129 121
/**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */
54
inline int BamCache::get_cache_max_kbytes(void) const;

1104 13 set_read_only 0 4 1956 23 BamCache::set_read_only 0 1 130 252
/**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */
45
inline void BamCache::set_read_only(bool ro);

1105 13 get_read_only 0 4 1956 23 BamCache::get_read_only 0 1 131 230
/**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */
48
inline bool BamCache::get_read_only(void) const;

1106 6 lookup 0 4 1956 16 BamCache::lookup 0 1 132 782
/**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */
114
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, std::string const &cache_extension);

1107 5 store 0 4 1956 15 BamCache::store 0 1 133 212
/**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */
45
bool BamCache::store(BamCacheRecord *record);

1108 20 consider_flush_index 0 4 1956 30 BamCache::consider_flush_index 0 1 134 92
/**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */
42
void BamCache::consider_flush_index(void);

1109 11 flush_index 0 4 1956 21 BamCache::flush_index 0 1 135 48
/**
 * Ensures the index is written to disk.
 */
33
void BamCache::flush_index(void);

1110 10 list_index 0 4 1956 20 BamCache::list_index 0 1 136 63
/**
 * Writes the contents of the index to standard output.
 */
73
void BamCache::list_index(std::ostream &out, int indent_level = 0) const;

1111 14 get_global_ptr 0 4 1956 24 BamCache::get_global_ptr 0 1 137 124
/**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */
55
static inline BamCache *BamCache::get_global_ptr(void);

1112 27 consider_flush_global_index 0 4 1956 37 BamCache::consider_flush_global_index 0 1 138 84
/**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */
63
static inline void BamCache::consider_flush_global_index(void);

1113 18 flush_global_index 0 4 1956 28 BamCache::flush_global_index 0 1 139 75
/**
 * If there is a global BamCache object, calls flush_index() on it.
 */
54
static inline void BamCache::flush_global_index(void);

1114 8 BamEnums 0 4 1957 18 BamEnums::BamEnums 0 2 140 141 0
97
inline BamEnums::BamEnums(void) = default;
inline BamEnums::BamEnums(BamEnums const &) = default;

1115 9 ~BamEnums 0 4 1957 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1116 13 LoaderOptions 0 4 1961 28 LoaderOptions::LoaderOptions 0 3 142 143 144 22
/**
 *
 */

/**
 *
 */
247
LoaderOptions::LoaderOptions(int flags = (::LoaderOptions::LF_search | ::LoaderOptions::LF_report_errors));
constexpr LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &) = default;

1117 9 set_flags 0 4 1961 24 LoaderOptions::set_flags 0 1 145 10
/**
 *
 */
48
inline void LoaderOptions::set_flags(int flags);

1118 9 get_flags 0 4 1961 24 LoaderOptions::get_flags 0 1 146 10
/**
 *
 */
48
inline int LoaderOptions::get_flags(void) const;

1119 17 set_texture_flags 0 4 1961 32 LoaderOptions::set_texture_flags 0 1 147 10
/**
 *
 */
56
inline void LoaderOptions::set_texture_flags(int flags);

1120 17 get_texture_flags 0 4 1961 32 LoaderOptions::get_texture_flags 0 1 148 10
/**
 *
 */
56
inline int LoaderOptions::get_texture_flags(void) const;

1121 21 set_texture_num_views 0 4 1961 36 LoaderOptions::set_texture_num_views 0 1 149 459
/**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */
64
inline void LoaderOptions::set_texture_num_views(int num_views);

1122 21 get_texture_num_views 0 4 1961 36 LoaderOptions::get_texture_num_views 0 1 150 39
/**
 * See set_texture_num_views().
 */
60
inline int LoaderOptions::get_texture_num_views(void) const;

1123 22 set_auto_texture_scale 0 4 1961 37 LoaderOptions::set_auto_texture_scale 0 1 151 209
/**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */
74
inline void LoaderOptions::set_auto_texture_scale(AutoTextureScale scale);

1124 22 get_auto_texture_scale 0 4 1961 37 LoaderOptions::get_auto_texture_scale 0 1 152 40
/**
 * See set_auto_texture_scale().
 */
74
inline AutoTextureScale LoaderOptions::get_auto_texture_scale(void) const;

1125 6 output 0 4 1961 21 LoaderOptions::output 0 1 153 10
/**
 *
 */
52
void LoaderOptions::output(std::ostream &out) const;

1126 14 ~LoaderOptions 0 4 1961 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1127 9 BamReader 0 4 1964 20 BamReader::BamReader 0 1 154 50
// The primary interface for a caller.

/**
 *
 */
67
explicit BamReader::BamReader(DatagramGenerator *source = nullptr);

1128 10 ~BamReader 0 4 1964 21 BamReader::~BamReader 0 0 10
/**
 *
 */
28
BamReader::~BamReader(void);

1129 10 set_source 0 4 1964 21 BamReader::set_source 0 1 155 142
/**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */
54
void BamReader::set_source(DatagramGenerator *source);

1130 10 get_source 0 4 1964 21 BamReader::get_source 0 1 156 100
/**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */
54
inline DatagramGenerator *BamReader::get_source(void);

1131 4 init 0 4 1964 15 BamReader::init 0 1 157 210
/**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */
27
bool BamReader::init(void);

1132 12 set_aux_data 0 4 1964 23 BamReader::set_aux_data 0 1 158 1007
/**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */
100
void BamReader::set_aux_data(TypedWritable *obj, std::string const &name, BamReader::AuxData *data);

1133 12 get_aux_data 0 4 1964 23 BamReader::get_aux_data 0 1 159 173
/**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */
95
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, std::string const &name) const;

1134 12 get_filename 0 4 1964 23 BamReader::get_filename 0 1 160 199
/**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */
59
inline Filename const &BamReader::get_filename(void) const;

1135 18 get_loader_options 0 4 1964 29 BamReader::get_loader_options 0 1 161 98
/**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1136 18 set_loader_options 0 4 1964 29 BamReader::set_loader_options 0 1 162 58
/**
 * Specifies the LoaderOptions for this BamReader.
 */
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1137 11 read_object 0 4 1964 22 BamReader::read_object 0 1 163 1393
/**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */

/**
 * Reads a single object from the Bam file.
 *
 * This flavor of read_object() returns both a TypedWritable and a
 * ReferenceCount pointer to the same object, so the reference count may be
 * tracked reliably, without having to know precisely what type of object we
 * have.
 * @return true on success, or false on failure.
 */
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1138 6 is_eof 0 4 1964 17 BamReader::is_eof 0 1 164 138
/**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */
42
inline bool BamReader::is_eof(void) const;

1139 7 resolve 0 4 1964 18 BamReader::resolve 0 1 165 565
/**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */
30
bool BamReader::resolve(void);

1140 14 change_pointer 0 4 1964 25 BamReader::change_pointer 0 1 166 406
/**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1141 18 get_file_major_ver 0 4 1964 29 BamReader::get_file_major_ver 0 1 167 81
/**
 * Returns the major version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_major_ver(void) const;

1142 18 get_file_minor_ver 0 4 1964 29 BamReader::get_file_minor_ver 0 1 168 81
/**
 * Returns the minor version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_minor_ver(void) const;

1143 15 get_file_endian 0 4 1964 26 BamReader::get_file_endian 0 1 169 254
/**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1144 24 get_file_stdfloat_double 0 4 1964 35 BamReader::get_file_stdfloat_double 0 1 170 220
/**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */
60
inline bool BamReader::get_file_stdfloat_double(void) const;

1145 21 get_current_major_ver 0 4 1964 32 BamReader::get_current_major_ver 0 1 171 174
/**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */
56
inline int BamReader::get_current_major_ver(void) const;

1146 21 get_current_minor_ver 0 4 1964 32 BamReader::get_current_minor_ver 0 1 172 184
/**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */
56
inline int BamReader::get_current_minor_ver(void) const;

1147 16 get_file_version 0 4 1964 27 BamReader::get_file_version 0 1 173 0
50
PyObject *BamReader::get_file_version(void) const;

1148 16 register_factory 0 4 1964 27 BamReader::register_factory 0 1 174 208
/**
 * Registers a factory function that is called when an object of the given
 * type is encountered within the .bam stream.
 *
 * @param user_data an optional pointer to be passed along to the function.
 */
75
static void BamReader::register_factory(TypeHandle handle, PyObject *func);

1149 9 BamWriter 0 4 1971 20 BamWriter::BamWriter 0 2 175 176 10
/**
 *
 */
120
explicit BamWriter::BamWriter(DatagramSink *target = nullptr);
inline BamWriter::BamWriter(BamWriter const &) = default;

1150 10 ~BamWriter 0 4 1971 21 BamWriter::~BamWriter 0 0 10
/**
 *
 */
28
BamWriter::~BamWriter(void);

1151 10 set_target 0 4 1971 21 BamWriter::set_target 0 1 177 153
/**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */
49
void BamWriter::set_target(DatagramSink *target);

1152 10 get_target 0 4 1971 21 BamWriter::get_target 0 1 178 100
/**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */
49
inline DatagramSink *BamWriter::get_target(void);

1153 4 init 0 4 1971 15 BamWriter::init 0 1 179 220
/**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */
27
bool BamWriter::init(void);

1154 12 get_filename 0 4 1971 23 BamWriter::get_filename 0 1 180 197
/**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */
59
inline Filename const &BamWriter::get_filename(void) const;

1155 12 write_object 0 4 1971 23 BamWriter::write_object 0 1 181 736
/**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */
55
bool BamWriter::write_object(TypedWritable const *obj);

1156 10 has_object 0 4 1971 21 BamWriter::has_object 0 1 182 170
/**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1157 5 flush 0 4 1971 16 BamWriter::flush 0 1 183 85
/**
 * Ensures that all data written thus far is manifested on the output stream.
 */
28
void BamWriter::flush(void);

1158 18 get_file_major_ver 0 4 1971 29 BamWriter::get_file_major_ver 0 1 184 84
/**
 * Returns the major version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_major_ver(void) const;

1159 18 get_file_minor_ver 0 4 1971 29 BamWriter::get_file_minor_ver 0 1 185 84
/**
 * Returns the minor version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_minor_ver(void) const;

1160 18 set_file_minor_ver 0 4 1971 29 BamWriter::set_file_minor_ver 0 1 186 232
/**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */
57
inline void BamWriter::set_file_minor_ver(int minor_ver);

1161 15 get_file_endian 0 4 1971 26 BamWriter::get_file_endian 0 1 187 257
/**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1162 24 get_file_stdfloat_double 0 4 1971 35 BamWriter::get_file_stdfloat_double 0 1 188 248
/**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */
60
inline bool BamWriter::get_file_stdfloat_double(void) const;

1163 21 get_file_texture_mode 0 4 1971 32 BamWriter::get_file_texture_mode 0 1 189 196
/**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1164 21 set_file_texture_mode 0 4 1971 32 BamWriter::set_file_texture_mode 0 1 190 187
/**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1165 13 get_root_node 0 4 1971 24 BamWriter::get_root_node 0 1 191 165
/**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */
59
inline TypedWritable *BamWriter::get_root_node(void) const;

1166 13 set_root_node 0 4 1971 24 BamWriter::set_root_node 0 1 192 160
/**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */
63
inline void BamWriter::set_root_node(TypedWritable *root_node);

1167 7 BitMask 0 4 1974 32 BitMask< uint16_t, 16 >::BitMask 0 3 193 194 195 0
215
constexpr BitMask< uint16_t, 16 >::BitMask(void) = default;
inline constexpr BitMask< uint16_t, 16 >::BitMask(uint16_t init_value);
inline BitMask< uint16_t, 16 >::BitMask(BitMask< uint16_t, 16 > const &) = default;

1168 6 all_on 0 4 1974 31 BitMask< uint16_t, 16 >::all_on 0 1 196 0
76
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_on(void);

1169 7 all_off 0 4 1974 32 BitMask< uint16_t, 16 >::all_off 0 1 197 0
77
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_off(void);

1170 8 lower_on 0 4 1974 33 BitMask< uint16_t, 16 >::lower_on 0 1 198 0
85
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::lower_on(int on_bits);

1171 3 bit 0 4 1974 28 BitMask< uint16_t, 16 >::bit 0 1 199 0
78
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::bit(int index);

1172 5 range 0 4 1974 30 BitMask< uint16_t, 16 >::range 0 1 200 0
92
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::range(int low_bit, int size);

1173 16 has_max_num_bits 0 4 1974 41 BitMask< uint16_t, 16 >::has_max_num_bits 0 1 201 0
70
static constexpr bool BitMask< uint16_t, 16 >::has_max_num_bits(void);

1174 16 get_max_num_bits 0 4 1974 41 BitMask< uint16_t, 16 >::get_max_num_bits 0 1 202 0
69
static constexpr int BitMask< uint16_t, 16 >::get_max_num_bits(void);

1175 12 get_num_bits 0 4 1974 37 BitMask< uint16_t, 16 >::get_num_bits 0 1 203 0
64
constexpr int BitMask< uint16_t, 16 >::get_num_bits(void) const;

1176 7 get_bit 0 4 1974 32 BitMask< uint16_t, 16 >::get_bit 0 1 204 0
62
inline bool BitMask< uint16_t, 16 >::get_bit(int index) const;

1177 7 set_bit 0 4 1974 32 BitMask< uint16_t, 16 >::set_bit 0 1 205 0
56
inline void BitMask< uint16_t, 16 >::set_bit(int index);

1178 9 clear_bit 0 4 1974 34 BitMask< uint16_t, 16 >::clear_bit 0 1 206 0
58
inline void BitMask< uint16_t, 16 >::clear_bit(int index);

1179 10 set_bit_to 0 4 1974 35 BitMask< uint16_t, 16 >::set_bit_to 0 1 207 0
71
inline void BitMask< uint16_t, 16 >::set_bit_to(int index, bool value);

1180 7 is_zero 0 4 1974 32 BitMask< uint16_t, 16 >::is_zero 0 1 208 0
57
inline bool BitMask< uint16_t, 16 >::is_zero(void) const;

1181 9 is_all_on 0 4 1974 34 BitMask< uint16_t, 16 >::is_all_on 0 1 209 0
59
inline bool BitMask< uint16_t, 16 >::is_all_on(void) const;

1182 7 extract 0 4 1974 32 BitMask< uint16_t, 16 >::extract 0 1 210 0
78
inline uint16_t BitMask< uint16_t, 16 >::extract(int low_bit, int size) const;

1183 5 store 0 4 1974 30 BitMask< uint16_t, 16 >::store 0 1 211 0
82
inline void BitMask< uint16_t, 16 >::store(uint16_t value, int low_bit, int size);

1184 10 has_any_of 0 4 1974 35 BitMask< uint16_t, 16 >::has_any_of 0 1 212 0
77
inline bool BitMask< uint16_t, 16 >::has_any_of(int low_bit, int size) const;

1185 10 has_all_of 0 4 1974 35 BitMask< uint16_t, 16 >::has_all_of 0 1 213 0
77
inline bool BitMask< uint16_t, 16 >::has_all_of(int low_bit, int size) const;

1186 9 set_range 0 4 1974 34 BitMask< uint16_t, 16 >::set_range 0 1 214 0
70
inline void BitMask< uint16_t, 16 >::set_range(int low_bit, int size);

1187 11 clear_range 0 4 1974 36 BitMask< uint16_t, 16 >::clear_range 0 1 215 0
72
inline void BitMask< uint16_t, 16 >::clear_range(int low_bit, int size);

1188 12 set_range_to 0 4 1974 37 BitMask< uint16_t, 16 >::set_range_to 0 1 216 0
85
inline void BitMask< uint16_t, 16 >::set_range_to(bool value, int low_bit, int size);

1189 8 get_word 0 4 1974 33 BitMask< uint16_t, 16 >::get_word 0 1 217 0
62
inline uint16_t BitMask< uint16_t, 16 >::get_word(void) const;

1190 8 set_word 0 4 1974 33 BitMask< uint16_t, 16 >::set_word 0 1 218 0
62
inline void BitMask< uint16_t, 16 >::set_word(uint16_t value);

1191 15 get_num_on_bits 0 4 1974 40 BitMask< uint16_t, 16 >::get_num_on_bits 0 1 219 0
64
inline int BitMask< uint16_t, 16 >::get_num_on_bits(void) const;

1192 16 get_num_off_bits 0 4 1974 41 BitMask< uint16_t, 16 >::get_num_off_bits 0 1 220 0
65
inline int BitMask< uint16_t, 16 >::get_num_off_bits(void) const;

1193 17 get_lowest_on_bit 0 4 1974 42 BitMask< uint16_t, 16 >::get_lowest_on_bit 0 1 221 0
66
inline int BitMask< uint16_t, 16 >::get_lowest_on_bit(void) const;

1194 18 get_lowest_off_bit 0 4 1974 43 BitMask< uint16_t, 16 >::get_lowest_off_bit 0 1 222 0
67
inline int BitMask< uint16_t, 16 >::get_lowest_off_bit(void) const;

1195 18 get_highest_on_bit 0 4 1974 43 BitMask< uint16_t, 16 >::get_highest_on_bit 0 1 223 0
67
inline int BitMask< uint16_t, 16 >::get_highest_on_bit(void) const;

1196 19 get_highest_off_bit 0 4 1974 44 BitMask< uint16_t, 16 >::get_highest_off_bit 0 1 224 0
68
inline int BitMask< uint16_t, 16 >::get_highest_off_bit(void) const;

1197 29 get_next_higher_different_bit 0 4 1974 54 BitMask< uint16_t, 16 >::get_next_higher_different_bit 0 1 225 0
85
inline int BitMask< uint16_t, 16 >::get_next_higher_different_bit(int low_bit) const;

1198 15 invert_in_place 0 4 1974 40 BitMask< uint16_t, 16 >::invert_in_place 0 1 226 0
59
inline void BitMask< uint16_t, 16 >::invert_in_place(void);

1199 18 has_bits_in_common 0 4 1974 43 BitMask< uint16_t, 16 >::has_bits_in_common 0 1 227 0
100
inline bool BitMask< uint16_t, 16 >::has_bits_in_common(BitMask< uint16_t, 16 > const &other) const;

1200 5 clear 0 4 1974 30 BitMask< uint16_t, 16 >::clear 0 1 228 0
49
inline void BitMask< uint16_t, 16 >::clear(void);

1201 6 output 0 4 1974 31 BitMask< uint16_t, 16 >::output 0 1 229 0
62
void BitMask< uint16_t, 16 >::output(std::ostream &out) const;

1202 13 output_binary 0 4 1974 38 BitMask< uint16_t, 16 >::output_binary 0 1 230 0
91
void BitMask< uint16_t, 16 >::output_binary(std::ostream &out, int spaces_every = 4) const;

1203 10 output_hex 0 4 1974 35 BitMask< uint16_t, 16 >::output_hex 0 1 231 0
88
void BitMask< uint16_t, 16 >::output_hex(std::ostream &out, int spaces_every = 4) const;

1204 5 write 0 4 1974 30 BitMask< uint16_t, 16 >::write 0 1 232 0
83
void BitMask< uint16_t, 16 >::write(std::ostream &out, int indent_level = 0) const;

1205 11 operator == 0 4 1974 36 BitMask< uint16_t, 16 >::operator == 0 1 233 0
93
inline bool BitMask< uint16_t, 16 >::operator ==(BitMask< uint16_t, 16 > const &other) const;

1206 11 operator != 0 4 1974 36 BitMask< uint16_t, 16 >::operator != 0 1 234 0
93
inline bool BitMask< uint16_t, 16 >::operator !=(BitMask< uint16_t, 16 > const &other) const;

1207 10 operator < 0 4 1974 35 BitMask< uint16_t, 16 >::operator < 0 1 235 0
92
inline bool BitMask< uint16_t, 16 >::operator <(BitMask< uint16_t, 16 > const &other) const;

1208 10 compare_to 0 4 1974 35 BitMask< uint16_t, 16 >::compare_to 0 1 236 0
91
inline int BitMask< uint16_t, 16 >::compare_to(BitMask< uint16_t, 16 > const &other) const;

1209 10 operator & 0 4 1974 35 BitMask< uint16_t, 16 >::operator & 0 1 237 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator &(BitMask< uint16_t, 16 > const &other) const;

1210 10 operator | 0 4 1974 35 BitMask< uint16_t, 16 >::operator | 0 1 238 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator |(BitMask< uint16_t, 16 > const &other) const;

1211 10 operator ^ 0 4 1974 35 BitMask< uint16_t, 16 >::operator ^ 0 1 239 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ^(BitMask< uint16_t, 16 > const &other) const;

1212 10 operator ~ 0 68 1974 35 BitMask< uint16_t, 16 >::operator ~ 0 1 240 0
79
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ~(void) const;

1213 11 operator << 0 4 1974 36 BitMask< uint16_t, 16 >::operator << 0 1 241 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator <<(int shift) const;

1214 11 operator >> 0 4 1974 36 BitMask< uint16_t, 16 >::operator >> 0 1 242 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator >>(int shift) const;

1215 11 operator &= 0 4 1974 36 BitMask< uint16_t, 16 >::operator &= 0 1 243 0
87
inline void BitMask< uint16_t, 16 >::operator &=(BitMask< uint16_t, 16 > const &other);

1216 11 operator |= 0 4 1974 36 BitMask< uint16_t, 16 >::operator |= 0 1 244 0
87
inline void BitMask< uint16_t, 16 >::operator |=(BitMask< uint16_t, 16 > const &other);

1217 11 operator ^= 0 4 1974 36 BitMask< uint16_t, 16 >::operator ^= 0 1 245 0
87
inline void BitMask< uint16_t, 16 >::operator ^=(BitMask< uint16_t, 16 > const &other);

1218 12 operator <<= 0 4 1974 37 BitMask< uint16_t, 16 >::operator <<= 0 1 246 0
61
inline void BitMask< uint16_t, 16 >::operator <<=(int shift);

1219 12 operator >>= 0 4 1974 37 BitMask< uint16_t, 16 >::operator >>= 0 1 247 0
61
inline void BitMask< uint16_t, 16 >::operator >>=(int shift);

1220 19 flood_down_in_place 0 4 1974 44 BitMask< uint16_t, 16 >::flood_down_in_place 0 1 248 0
63
inline void BitMask< uint16_t, 16 >::flood_down_in_place(void);

1221 17 flood_up_in_place 0 4 1974 42 BitMask< uint16_t, 16 >::flood_up_in_place 0 1 249 0
61
inline void BitMask< uint16_t, 16 >::flood_up_in_place(void);

1222 15 flood_bits_down 0 4 1974 40 BitMask< uint16_t, 16 >::flood_bits_down 0 1 250 0
84
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_down(void) const;

1223 13 flood_bits_up 0 4 1974 38 BitMask< uint16_t, 16 >::flood_bits_up 0 1 251 0
82
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_up(void) const;

1224 21 keep_next_highest_bit 0 4 1974 46 BitMask< uint16_t, 16 >::keep_next_highest_bit 0 3 252 253 254 0
309
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(BitMask< uint16_t, 16 > const &other) const;

1225 20 keep_next_lowest_bit 0 4 1974 45 BitMask< uint16_t, 16 >::keep_next_lowest_bit 0 3 255 256 257 0
306
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(BitMask< uint16_t, 16 > const &other) const;

1226 7 get_key 0 4 1974 32 BitMask< uint16_t, 16 >::get_key 0 1 258 0
56
inline int BitMask< uint16_t, 16 >::get_key(void) const;

1227 8 __bool__ 0 4 1974 33 BitMask< uint16_t, 16 >::__bool__ 0 1 259 0
51
bool BitMask< uint16_t, 16 >::__bool__(void) const;

1228 7 __int__ 0 4 1974 32 BitMask< uint16_t, 16 >::__int__ 0 1 260 0
55
PyObject *BitMask< uint16_t, 16 >::__int__(void) const;

1229 10 __reduce__ 0 4 1974 35 BitMask< uint16_t, 16 >::__reduce__ 0 1 261 0
68
PyObject *BitMask< uint16_t, 16 >::__reduce__(PyObject *self) const;

1230 14 get_class_type 0 4 1974 39 BitMask< uint16_t, 16 >::get_class_type 0 1 262 0
64
static TypeHandle BitMask< uint16_t, 16 >::get_class_type(void);

1231 8 ~BitMask 0 4 1974 33 BitMask< uint16_t, 16 >::~BitMask 0 0 0
40
BitMask< uint16_t, 16 >::~BitMask(void);

1232 7 BitMask 0 4 1976 32 BitMask< uint32_t, 32 >::BitMask 0 3 263 264 265 0
215
constexpr BitMask< uint32_t, 32 >::BitMask(void) = default;
inline constexpr BitMask< uint32_t, 32 >::BitMask(uint32_t init_value);
inline BitMask< uint32_t, 32 >::BitMask(BitMask< uint32_t, 32 > const &) = default;

1233 6 all_on 0 4 1976 31 BitMask< uint32_t, 32 >::all_on 0 1 266 0
76
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_on(void);

1234 7 all_off 0 4 1976 32 BitMask< uint32_t, 32 >::all_off 0 1 267 0
77
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_off(void);

1235 8 lower_on 0 4 1976 33 BitMask< uint32_t, 32 >::lower_on 0 1 268 0
85
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::lower_on(int on_bits);

1236 3 bit 0 4 1976 28 BitMask< uint32_t, 32 >::bit 0 1 269 0
78
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::bit(int index);

1237 5 range 0 4 1976 30 BitMask< uint32_t, 32 >::range 0 1 270 0
92
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::range(int low_bit, int size);

1238 16 has_max_num_bits 0 4 1976 41 BitMask< uint32_t, 32 >::has_max_num_bits 0 1 271 0
70
static constexpr bool BitMask< uint32_t, 32 >::has_max_num_bits(void);

1239 16 get_max_num_bits 0 4 1976 41 BitMask< uint32_t, 32 >::get_max_num_bits 0 1 272 0
69
static constexpr int BitMask< uint32_t, 32 >::get_max_num_bits(void);

1240 12 get_num_bits 0 4 1976 37 BitMask< uint32_t, 32 >::get_num_bits 0 1 273 0
64
constexpr int BitMask< uint32_t, 32 >::get_num_bits(void) const;

1241 7 get_bit 0 4 1976 32 BitMask< uint32_t, 32 >::get_bit 0 1 274 0
62
inline bool BitMask< uint32_t, 32 >::get_bit(int index) const;

1242 7 set_bit 0 4 1976 32 BitMask< uint32_t, 32 >::set_bit 0 1 275 0
56
inline void BitMask< uint32_t, 32 >::set_bit(int index);

1243 9 clear_bit 0 4 1976 34 BitMask< uint32_t, 32 >::clear_bit 0 1 276 0
58
inline void BitMask< uint32_t, 32 >::clear_bit(int index);

1244 10 set_bit_to 0 4 1976 35 BitMask< uint32_t, 32 >::set_bit_to 0 1 277 0
71
inline void BitMask< uint32_t, 32 >::set_bit_to(int index, bool value);

1245 7 is_zero 0 4 1976 32 BitMask< uint32_t, 32 >::is_zero 0 1 278 0
57
inline bool BitMask< uint32_t, 32 >::is_zero(void) const;

1246 9 is_all_on 0 4 1976 34 BitMask< uint32_t, 32 >::is_all_on 0 1 279 0
59
inline bool BitMask< uint32_t, 32 >::is_all_on(void) const;

1247 7 extract 0 4 1976 32 BitMask< uint32_t, 32 >::extract 0 1 280 0
78
inline uint32_t BitMask< uint32_t, 32 >::extract(int low_bit, int size) const;

1248 5 store 0 4 1976 30 BitMask< uint32_t, 32 >::store 0 1 281 0
82
inline void BitMask< uint32_t, 32 >::store(uint32_t value, int low_bit, int size);

1249 10 has_any_of 0 4 1976 35 BitMask< uint32_t, 32 >::has_any_of 0 1 282 0
77
inline bool BitMask< uint32_t, 32 >::has_any_of(int low_bit, int size) const;

1250 10 has_all_of 0 4 1976 35 BitMask< uint32_t, 32 >::has_all_of 0 1 283 0
77
inline bool BitMask< uint32_t, 32 >::has_all_of(int low_bit, int size) const;

1251 9 set_range 0 4 1976 34 BitMask< uint32_t, 32 >::set_range 0 1 284 0
70
inline void BitMask< uint32_t, 32 >::set_range(int low_bit, int size);

1252 11 clear_range 0 4 1976 36 BitMask< uint32_t, 32 >::clear_range 0 1 285 0
72
inline void BitMask< uint32_t, 32 >::clear_range(int low_bit, int size);

1253 12 set_range_to 0 4 1976 37 BitMask< uint32_t, 32 >::set_range_to 0 1 286 0
85
inline void BitMask< uint32_t, 32 >::set_range_to(bool value, int low_bit, int size);

1254 8 get_word 0 4 1976 33 BitMask< uint32_t, 32 >::get_word 0 1 287 0
62
inline uint32_t BitMask< uint32_t, 32 >::get_word(void) const;

1255 8 set_word 0 4 1976 33 BitMask< uint32_t, 32 >::set_word 0 1 288 0
62
inline void BitMask< uint32_t, 32 >::set_word(uint32_t value);

1256 15 get_num_on_bits 0 4 1976 40 BitMask< uint32_t, 32 >::get_num_on_bits 0 1 289 0
64
inline int BitMask< uint32_t, 32 >::get_num_on_bits(void) const;

1257 16 get_num_off_bits 0 4 1976 41 BitMask< uint32_t, 32 >::get_num_off_bits 0 1 290 0
65
inline int BitMask< uint32_t, 32 >::get_num_off_bits(void) const;

1258 17 get_lowest_on_bit 0 4 1976 42 BitMask< uint32_t, 32 >::get_lowest_on_bit 0 1 291 0
66
inline int BitMask< uint32_t, 32 >::get_lowest_on_bit(void) const;

1259 18 get_lowest_off_bit 0 4 1976 43 BitMask< uint32_t, 32 >::get_lowest_off_bit 0 1 292 0
67
inline int BitMask< uint32_t, 32 >::get_lowest_off_bit(void) const;

1260 18 get_highest_on_bit 0 4 1976 43 BitMask< uint32_t, 32 >::get_highest_on_bit 0 1 293 0
67
inline int BitMask< uint32_t, 32 >::get_highest_on_bit(void) const;

1261 19 get_highest_off_bit 0 4 1976 44 BitMask< uint32_t, 32 >::get_highest_off_bit 0 1 294 0
68
inline int BitMask< uint32_t, 32 >::get_highest_off_bit(void) const;

1262 29 get_next_higher_different_bit 0 4 1976 54 BitMask< uint32_t, 32 >::get_next_higher_different_bit 0 1 295 0
85
inline int BitMask< uint32_t, 32 >::get_next_higher_different_bit(int low_bit) const;

1263 15 invert_in_place 0 4 1976 40 BitMask< uint32_t, 32 >::invert_in_place 0 1 296 0
59
inline void BitMask< uint32_t, 32 >::invert_in_place(void);

1264 18 has_bits_in_common 0 4 1976 43 BitMask< uint32_t, 32 >::has_bits_in_common 0 1 297 0
100
inline bool BitMask< uint32_t, 32 >::has_bits_in_common(BitMask< uint32_t, 32 > const &other) const;

1265 5 clear 0 4 1976 30 BitMask< uint32_t, 32 >::clear 0 1 298 0
49
inline void BitMask< uint32_t, 32 >::clear(void);

1266 6 output 0 4 1976 31 BitMask< uint32_t, 32 >::output 0 1 299 0
62
void BitMask< uint32_t, 32 >::output(std::ostream &out) const;

1267 13 output_binary 0 4 1976 38 BitMask< uint32_t, 32 >::output_binary 0 1 300 0
91
void BitMask< uint32_t, 32 >::output_binary(std::ostream &out, int spaces_every = 4) const;

1268 10 output_hex 0 4 1976 35 BitMask< uint32_t, 32 >::output_hex 0 1 301 0
88
void BitMask< uint32_t, 32 >::output_hex(std::ostream &out, int spaces_every = 4) const;

1269 5 write 0 4 1976 30 BitMask< uint32_t, 32 >::write 0 1 302 0
83
void BitMask< uint32_t, 32 >::write(std::ostream &out, int indent_level = 0) const;

1270 11 operator == 0 4 1976 36 BitMask< uint32_t, 32 >::operator == 0 1 303 0
93
inline bool BitMask< uint32_t, 32 >::operator ==(BitMask< uint32_t, 32 > const &other) const;

1271 11 operator != 0 4 1976 36 BitMask< uint32_t, 32 >::operator != 0 1 304 0
93
inline bool BitMask< uint32_t, 32 >::operator !=(BitMask< uint32_t, 32 > const &other) const;

1272 10 operator < 0 4 1976 35 BitMask< uint32_t, 32 >::operator < 0 1 305 0
92
inline bool BitMask< uint32_t, 32 >::operator <(BitMask< uint32_t, 32 > const &other) const;

1273 10 compare_to 0 4 1976 35 BitMask< uint32_t, 32 >::compare_to 0 1 306 0
91
inline int BitMask< uint32_t, 32 >::compare_to(BitMask< uint32_t, 32 > const &other) const;

1274 10 operator & 0 4 1976 35 BitMask< uint32_t, 32 >::operator & 0 1 307 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator &(BitMask< uint32_t, 32 > const &other) const;

1275 10 operator | 0 4 1976 35 BitMask< uint32_t, 32 >::operator | 0 1 308 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator |(BitMask< uint32_t, 32 > const &other) const;

1276 10 operator ^ 0 4 1976 35 BitMask< uint32_t, 32 >::operator ^ 0 1 309 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ^(BitMask< uint32_t, 32 > const &other) const;

1277 10 operator ~ 0 68 1976 35 BitMask< uint32_t, 32 >::operator ~ 0 1 310 0
79
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ~(void) const;

1278 11 operator << 0 4 1976 36 BitMask< uint32_t, 32 >::operator << 0 1 311 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator <<(int shift) const;

1279 11 operator >> 0 4 1976 36 BitMask< uint32_t, 32 >::operator >> 0 1 312 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator >>(int shift) const;

1280 11 operator &= 0 4 1976 36 BitMask< uint32_t, 32 >::operator &= 0 1 313 0
87
inline void BitMask< uint32_t, 32 >::operator &=(BitMask< uint32_t, 32 > const &other);

1281 11 operator |= 0 4 1976 36 BitMask< uint32_t, 32 >::operator |= 0 1 314 0
87
inline void BitMask< uint32_t, 32 >::operator |=(BitMask< uint32_t, 32 > const &other);

1282 11 operator ^= 0 4 1976 36 BitMask< uint32_t, 32 >::operator ^= 0 1 315 0
87
inline void BitMask< uint32_t, 32 >::operator ^=(BitMask< uint32_t, 32 > const &other);

1283 12 operator <<= 0 4 1976 37 BitMask< uint32_t, 32 >::operator <<= 0 1 316 0
61
inline void BitMask< uint32_t, 32 >::operator <<=(int shift);

1284 12 operator >>= 0 4 1976 37 BitMask< uint32_t, 32 >::operator >>= 0 1 317 0
61
inline void BitMask< uint32_t, 32 >::operator >>=(int shift);

1285 19 flood_down_in_place 0 4 1976 44 BitMask< uint32_t, 32 >::flood_down_in_place 0 1 318 0
63
inline void BitMask< uint32_t, 32 >::flood_down_in_place(void);

1286 17 flood_up_in_place 0 4 1976 42 BitMask< uint32_t, 32 >::flood_up_in_place 0 1 319 0
61
inline void BitMask< uint32_t, 32 >::flood_up_in_place(void);

1287 15 flood_bits_down 0 4 1976 40 BitMask< uint32_t, 32 >::flood_bits_down 0 1 320 0
84
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_down(void) const;

1288 13 flood_bits_up 0 4 1976 38 BitMask< uint32_t, 32 >::flood_bits_up 0 1 321 0
82
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_up(void) const;

1289 21 keep_next_highest_bit 0 4 1976 46 BitMask< uint32_t, 32 >::keep_next_highest_bit 0 3 322 323 324 0
309
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(BitMask< uint32_t, 32 > const &other) const;

1290 20 keep_next_lowest_bit 0 4 1976 45 BitMask< uint32_t, 32 >::keep_next_lowest_bit 0 3 325 326 327 0
306
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(BitMask< uint32_t, 32 > const &other) const;

1291 7 get_key 0 4 1976 32 BitMask< uint32_t, 32 >::get_key 0 1 328 0
56
inline int BitMask< uint32_t, 32 >::get_key(void) const;

1292 8 __bool__ 0 4 1976 33 BitMask< uint32_t, 32 >::__bool__ 0 1 329 0
51
bool BitMask< uint32_t, 32 >::__bool__(void) const;

1293 7 __int__ 0 4 1976 32 BitMask< uint32_t, 32 >::__int__ 0 1 330 0
55
PyObject *BitMask< uint32_t, 32 >::__int__(void) const;

1294 10 __reduce__ 0 4 1976 35 BitMask< uint32_t, 32 >::__reduce__ 0 1 331 0
68
PyObject *BitMask< uint32_t, 32 >::__reduce__(PyObject *self) const;

1295 14 get_class_type 0 4 1976 39 BitMask< uint32_t, 32 >::get_class_type 0 1 332 0
64
static TypeHandle BitMask< uint32_t, 32 >::get_class_type(void);

1296 8 ~BitMask 0 4 1976 33 BitMask< uint32_t, 32 >::~BitMask 0 0 0
40
BitMask< uint32_t, 32 >::~BitMask(void);

1297 7 BitMask 0 4 1978 32 BitMask< uint64_t, 64 >::BitMask 0 3 333 334 335 0
215
constexpr BitMask< uint64_t, 64 >::BitMask(void) = default;
inline constexpr BitMask< uint64_t, 64 >::BitMask(uint64_t init_value);
inline BitMask< uint64_t, 64 >::BitMask(BitMask< uint64_t, 64 > const &) = default;

1298 6 all_on 0 4 1978 31 BitMask< uint64_t, 64 >::all_on 0 1 336 0
76
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_on(void);

1299 7 all_off 0 4 1978 32 BitMask< uint64_t, 64 >::all_off 0 1 337 0
77
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_off(void);

1300 8 lower_on 0 4 1978 33 BitMask< uint64_t, 64 >::lower_on 0 1 338 0
85
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::lower_on(int on_bits);

1301 3 bit 0 4 1978 28 BitMask< uint64_t, 64 >::bit 0 1 339 0
78
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::bit(int index);

1302 5 range 0 4 1978 30 BitMask< uint64_t, 64 >::range 0 1 340 0
92
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::range(int low_bit, int size);

1303 16 has_max_num_bits 0 4 1978 41 BitMask< uint64_t, 64 >::has_max_num_bits 0 1 341 0
70
static constexpr bool BitMask< uint64_t, 64 >::has_max_num_bits(void);

1304 16 get_max_num_bits 0 4 1978 41 BitMask< uint64_t, 64 >::get_max_num_bits 0 1 342 0
69
static constexpr int BitMask< uint64_t, 64 >::get_max_num_bits(void);

1305 12 get_num_bits 0 4 1978 37 BitMask< uint64_t, 64 >::get_num_bits 0 1 343 0
64
constexpr int BitMask< uint64_t, 64 >::get_num_bits(void) const;

1306 7 get_bit 0 4 1978 32 BitMask< uint64_t, 64 >::get_bit 0 1 344 0
62
inline bool BitMask< uint64_t, 64 >::get_bit(int index) const;

1307 7 set_bit 0 4 1978 32 BitMask< uint64_t, 64 >::set_bit 0 1 345 0
56
inline void BitMask< uint64_t, 64 >::set_bit(int index);

1308 9 clear_bit 0 4 1978 34 BitMask< uint64_t, 64 >::clear_bit 0 1 346 0
58
inline void BitMask< uint64_t, 64 >::clear_bit(int index);

1309 10 set_bit_to 0 4 1978 35 BitMask< uint64_t, 64 >::set_bit_to 0 1 347 0
71
inline void BitMask< uint64_t, 64 >::set_bit_to(int index, bool value);

1310 7 is_zero 0 4 1978 32 BitMask< uint64_t, 64 >::is_zero 0 1 348 0
57
inline bool BitMask< uint64_t, 64 >::is_zero(void) const;

1311 9 is_all_on 0 4 1978 34 BitMask< uint64_t, 64 >::is_all_on 0 1 349 0
59
inline bool BitMask< uint64_t, 64 >::is_all_on(void) const;

1312 7 extract 0 4 1978 32 BitMask< uint64_t, 64 >::extract 0 1 350 0
78
inline uint64_t BitMask< uint64_t, 64 >::extract(int low_bit, int size) const;

1313 5 store 0 4 1978 30 BitMask< uint64_t, 64 >::store 0 1 351 0
82
inline void BitMask< uint64_t, 64 >::store(uint64_t value, int low_bit, int size);

1314 10 has_any_of 0 4 1978 35 BitMask< uint64_t, 64 >::has_any_of 0 1 352 0
77
inline bool BitMask< uint64_t, 64 >::has_any_of(int low_bit, int size) const;

1315 10 has_all_of 0 4 1978 35 BitMask< uint64_t, 64 >::has_all_of 0 1 353 0
77
inline bool BitMask< uint64_t, 64 >::has_all_of(int low_bit, int size) const;

1316 9 set_range 0 4 1978 34 BitMask< uint64_t, 64 >::set_range 0 1 354 0
70
inline void BitMask< uint64_t, 64 >::set_range(int low_bit, int size);

1317 11 clear_range 0 4 1978 36 BitMask< uint64_t, 64 >::clear_range 0 1 355 0
72
inline void BitMask< uint64_t, 64 >::clear_range(int low_bit, int size);

1318 12 set_range_to 0 4 1978 37 BitMask< uint64_t, 64 >::set_range_to 0 1 356 0
85
inline void BitMask< uint64_t, 64 >::set_range_to(bool value, int low_bit, int size);

1319 8 get_word 0 4 1978 33 BitMask< uint64_t, 64 >::get_word 0 1 357 0
62
inline uint64_t BitMask< uint64_t, 64 >::get_word(void) const;

1320 8 set_word 0 4 1978 33 BitMask< uint64_t, 64 >::set_word 0 1 358 0
62
inline void BitMask< uint64_t, 64 >::set_word(uint64_t value);

1321 15 get_num_on_bits 0 4 1978 40 BitMask< uint64_t, 64 >::get_num_on_bits 0 1 359 0
64
inline int BitMask< uint64_t, 64 >::get_num_on_bits(void) const;

1322 16 get_num_off_bits 0 4 1978 41 BitMask< uint64_t, 64 >::get_num_off_bits 0 1 360 0
65
inline int BitMask< uint64_t, 64 >::get_num_off_bits(void) const;

1323 17 get_lowest_on_bit 0 4 1978 42 BitMask< uint64_t, 64 >::get_lowest_on_bit 0 1 361 0
66
inline int BitMask< uint64_t, 64 >::get_lowest_on_bit(void) const;

1324 18 get_lowest_off_bit 0 4 1978 43 BitMask< uint64_t, 64 >::get_lowest_off_bit 0 1 362 0
67
inline int BitMask< uint64_t, 64 >::get_lowest_off_bit(void) const;

1325 18 get_highest_on_bit 0 4 1978 43 BitMask< uint64_t, 64 >::get_highest_on_bit 0 1 363 0
67
inline int BitMask< uint64_t, 64 >::get_highest_on_bit(void) const;

1326 19 get_highest_off_bit 0 4 1978 44 BitMask< uint64_t, 64 >::get_highest_off_bit 0 1 364 0
68
inline int BitMask< uint64_t, 64 >::get_highest_off_bit(void) const;

1327 29 get_next_higher_different_bit 0 4 1978 54 BitMask< uint64_t, 64 >::get_next_higher_different_bit 0 1 365 0
85
inline int BitMask< uint64_t, 64 >::get_next_higher_different_bit(int low_bit) const;

1328 15 invert_in_place 0 4 1978 40 BitMask< uint64_t, 64 >::invert_in_place 0 1 366 0
59
inline void BitMask< uint64_t, 64 >::invert_in_place(void);

1329 18 has_bits_in_common 0 4 1978 43 BitMask< uint64_t, 64 >::has_bits_in_common 0 1 367 0
100
inline bool BitMask< uint64_t, 64 >::has_bits_in_common(BitMask< uint64_t, 64 > const &other) const;

1330 5 clear 0 4 1978 30 BitMask< uint64_t, 64 >::clear 0 1 368 0
49
inline void BitMask< uint64_t, 64 >::clear(void);

1331 6 output 0 4 1978 31 BitMask< uint64_t, 64 >::output 0 1 369 0
62
void BitMask< uint64_t, 64 >::output(std::ostream &out) const;

1332 13 output_binary 0 4 1978 38 BitMask< uint64_t, 64 >::output_binary 0 1 370 0
91
void BitMask< uint64_t, 64 >::output_binary(std::ostream &out, int spaces_every = 4) const;

1333 10 output_hex 0 4 1978 35 BitMask< uint64_t, 64 >::output_hex 0 1 371 0
88
void BitMask< uint64_t, 64 >::output_hex(std::ostream &out, int spaces_every = 4) const;

1334 5 write 0 4 1978 30 BitMask< uint64_t, 64 >::write 0 1 372 0
83
void BitMask< uint64_t, 64 >::write(std::ostream &out, int indent_level = 0) const;

1335 11 operator == 0 4 1978 36 BitMask< uint64_t, 64 >::operator == 0 1 373 0
93
inline bool BitMask< uint64_t, 64 >::operator ==(BitMask< uint64_t, 64 > const &other) const;

1336 11 operator != 0 4 1978 36 BitMask< uint64_t, 64 >::operator != 0 1 374 0
93
inline bool BitMask< uint64_t, 64 >::operator !=(BitMask< uint64_t, 64 > const &other) const;

1337 10 operator < 0 4 1978 35 BitMask< uint64_t, 64 >::operator < 0 1 375 0
92
inline bool BitMask< uint64_t, 64 >::operator <(BitMask< uint64_t, 64 > const &other) const;

1338 10 compare_to 0 4 1978 35 BitMask< uint64_t, 64 >::compare_to 0 1 376 0
91
inline int BitMask< uint64_t, 64 >::compare_to(BitMask< uint64_t, 64 > const &other) const;

1339 10 operator & 0 4 1978 35 BitMask< uint64_t, 64 >::operator & 0 1 377 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator &(BitMask< uint64_t, 64 > const &other) const;

1340 10 operator | 0 4 1978 35 BitMask< uint64_t, 64 >::operator | 0 1 378 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator |(BitMask< uint64_t, 64 > const &other) const;

1341 10 operator ^ 0 4 1978 35 BitMask< uint64_t, 64 >::operator ^ 0 1 379 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ^(BitMask< uint64_t, 64 > const &other) const;

1342 10 operator ~ 0 68 1978 35 BitMask< uint64_t, 64 >::operator ~ 0 1 380 0
79
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ~(void) const;

1343 11 operator << 0 4 1978 36 BitMask< uint64_t, 64 >::operator << 0 1 381 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator <<(int shift) const;

1344 11 operator >> 0 4 1978 36 BitMask< uint64_t, 64 >::operator >> 0 1 382 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator >>(int shift) const;

1345 11 operator &= 0 4 1978 36 BitMask< uint64_t, 64 >::operator &= 0 1 383 0
87
inline void BitMask< uint64_t, 64 >::operator &=(BitMask< uint64_t, 64 > const &other);

1346 11 operator |= 0 4 1978 36 BitMask< uint64_t, 64 >::operator |= 0 1 384 0
87
inline void BitMask< uint64_t, 64 >::operator |=(BitMask< uint64_t, 64 > const &other);

1347 11 operator ^= 0 4 1978 36 BitMask< uint64_t, 64 >::operator ^= 0 1 385 0
87
inline void BitMask< uint64_t, 64 >::operator ^=(BitMask< uint64_t, 64 > const &other);

1348 12 operator <<= 0 4 1978 37 BitMask< uint64_t, 64 >::operator <<= 0 1 386 0
61
inline void BitMask< uint64_t, 64 >::operator <<=(int shift);

1349 12 operator >>= 0 4 1978 37 BitMask< uint64_t, 64 >::operator >>= 0 1 387 0
61
inline void BitMask< uint64_t, 64 >::operator >>=(int shift);

1350 19 flood_down_in_place 0 4 1978 44 BitMask< uint64_t, 64 >::flood_down_in_place 0 1 388 0
63
inline void BitMask< uint64_t, 64 >::flood_down_in_place(void);

1351 17 flood_up_in_place 0 4 1978 42 BitMask< uint64_t, 64 >::flood_up_in_place 0 1 389 0
61
inline void BitMask< uint64_t, 64 >::flood_up_in_place(void);

1352 15 flood_bits_down 0 4 1978 40 BitMask< uint64_t, 64 >::flood_bits_down 0 1 390 0
84
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_down(void) const;

1353 13 flood_bits_up 0 4 1978 38 BitMask< uint64_t, 64 >::flood_bits_up 0 1 391 0
82
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_up(void) const;

1354 21 keep_next_highest_bit 0 4 1978 46 BitMask< uint64_t, 64 >::keep_next_highest_bit 0 3 392 393 394 0
309
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(BitMask< uint64_t, 64 > const &other) const;

1355 20 keep_next_lowest_bit 0 4 1978 45 BitMask< uint64_t, 64 >::keep_next_lowest_bit 0 3 395 396 397 0
306
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(BitMask< uint64_t, 64 > const &other) const;

1356 7 get_key 0 4 1978 32 BitMask< uint64_t, 64 >::get_key 0 1 398 0
56
inline int BitMask< uint64_t, 64 >::get_key(void) const;

1357 8 __bool__ 0 4 1978 33 BitMask< uint64_t, 64 >::__bool__ 0 1 399 0
51
bool BitMask< uint64_t, 64 >::__bool__(void) const;

1358 7 __int__ 0 4 1978 32 BitMask< uint64_t, 64 >::__int__ 0 1 400 0
55
PyObject *BitMask< uint64_t, 64 >::__int__(void) const;

1359 10 __reduce__ 0 4 1978 35 BitMask< uint64_t, 64 >::__reduce__ 0 1 401 0
68
PyObject *BitMask< uint64_t, 64 >::__reduce__(PyObject *self) const;

1360 14 get_class_type 0 4 1978 39 BitMask< uint64_t, 64 >::get_class_type 0 1 402 0
64
static TypeHandle BitMask< uint64_t, 64 >::get_class_type(void);

1361 8 ~BitMask 0 4 1978 33 BitMask< uint64_t, 64 >::~BitMask 0 0 0
40
BitMask< uint64_t, 64 >::~BitMask(void);

1362 8 BitArray 0 4 1981 18 BitArray::BitArray 0 4 403 404 405 406 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
174
inline BitArray::BitArray(void);
BitArray::BitArray(SparseArray const &from);
BitArray::BitArray(PyObject *init_value);
inline BitArray::BitArray(BitArray const &) = default;

1363 6 all_on 0 4 1981 16 BitArray::all_on 0 1 407 69
/**
 * Returns a BitArray with an infinite array of bits, all on.
 */
46
static inline BitArray BitArray::all_on(void);

1364 7 all_off 0 4 1981 17 BitArray::all_off 0 1 408 53
/**
 * Returns a BitArray whose bits are all off.
 */
47
static inline BitArray BitArray::all_off(void);

1365 8 lower_on 0 4 1981 18 BitArray::lower_on 0 1 409 62
/**
 * Returns a BitArray whose lower on_bits bits are on.
 */
55
static inline BitArray BitArray::lower_on(int on_bits);

1366 3 bit 0 4 1981 13 BitArray::bit 0 1 410 61
/**
 * Returns a BitArray with only the indicated bit on.
 */
48
static inline BitArray BitArray::bit(int index);

1367 5 range 0 4 1981 15 BitArray::range 0 1 411 76
/**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */
62
static inline BitArray BitArray::range(int low_bit, int size);

1368 16 has_max_num_bits 0 4 1981 26 BitArray::has_max_num_bits 0 1 412 0
55
static constexpr bool BitArray::has_max_num_bits(void);

1369 16 get_max_num_bits 0 4 1981 26 BitArray::get_max_num_bits 0 1 413 0
54
static constexpr int BitArray::get_max_num_bits(void);

1370 21 get_num_bits_per_word 0 4 1981 31 BitArray::get_num_bits_per_word 0 1 414 0
59
static constexpr int BitArray::get_num_bits_per_word(void);

1371 12 get_num_bits 0 4 1981 22 BitArray::get_num_bits 0 1 415 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
54
inline std::size_t BitArray::get_num_bits(void) const;

1372 7 get_bit 0 4 1981 17 BitArray::get_bit 0 1 416 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
47
inline bool BitArray::get_bit(int index) const;

1373 7 set_bit 0 4 1981 17 BitArray::set_bit 0 1 417 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
41
inline void BitArray::set_bit(int index);

1374 9 clear_bit 0 4 1981 19 BitArray::clear_bit 0 1 418 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
43
inline void BitArray::clear_bit(int index);

1375 10 set_bit_to 0 4 1981 20 BitArray::set_bit_to 0 1 419 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
56
inline void BitArray::set_bit_to(int index, bool value);

1376 16 get_highest_bits 0 4 1981 26 BitArray::get_highest_bits 0 1 420 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
51
inline bool BitArray::get_highest_bits(void) const;

1377 7 is_zero 0 4 1981 17 BitArray::is_zero 0 1 421 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
35
bool BitArray::is_zero(void) const;

1378 9 is_all_on 0 4 1981 19 BitArray::is_all_on 0 1 422 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
37
bool BitArray::is_all_on(void) const;

1379 7 extract 0 4 1981 17 BitArray::extract 0 1 423 187
/**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */
73
inline BitArray::WordType BitArray::extract(int low_bit, int size) const;

1380 5 store 0 4 1981 15 BitArray::store 0 1 424 92
/**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */
77
inline void BitArray::store(BitArray::WordType value, int low_bit, int size);

1381 10 has_any_of 0 4 1981 20 BitArray::has_any_of 0 1 425 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
55
bool BitArray::has_any_of(int low_bit, int size) const;

1382 10 has_all_of 0 4 1981 20 BitArray::has_all_of 0 1 426 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
55
bool BitArray::has_all_of(int low_bit, int size) const;

1383 9 set_range 0 4 1981 19 BitArray::set_range 0 1 427 47
/**
 * Sets the indicated range of bits on.
 */
48
void BitArray::set_range(int low_bit, int size);

1384 11 clear_range 0 4 1981 21 BitArray::clear_range 0 1 428 48
/**
 * Sets the indicated range of bits off.
 */
50
void BitArray::clear_range(int low_bit, int size);

1385 12 set_range_to 0 4 1981 22 BitArray::set_range_to 0 1 429 64
/**
 * Sets the indicated range of bits to either on or off.
 */
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1386 15 get_num_on_bits 0 4 1981 25 BitArray::get_num_on_bits 0 1 430 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
42
int BitArray::get_num_on_bits(void) const;

1387 16 get_num_off_bits 0 4 1981 26 BitArray::get_num_off_bits 0 1 431 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
43
int BitArray::get_num_off_bits(void) const;

1388 17 get_lowest_on_bit 0 4 1981 27 BitArray::get_lowest_on_bit 0 1 432 101
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */
44
int BitArray::get_lowest_on_bit(void) const;

1389 18 get_lowest_off_bit 0 4 1981 28 BitArray::get_lowest_off_bit 0 1 433 101
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */
45
int BitArray::get_lowest_off_bit(void) const;

1390 18 get_highest_on_bit 0 4 1981 28 BitArray::get_highest_on_bit 0 1 434 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
45
int BitArray::get_highest_on_bit(void) const;

1391 19 get_highest_off_bit 0 4 1981 29 BitArray::get_highest_off_bit 0 1 435 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
46
int BitArray::get_highest_off_bit(void) const;

1392 29 get_next_higher_different_bit 0 4 1981 39 BitArray::get_next_higher_different_bit 0 1 436 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1393 13 get_num_words 0 4 1981 23 BitArray::get_num_words 0 1 437 75
/**
 * Returns the number of possibly-unique words stored in the array.
 */
55
inline std::size_t BitArray::get_num_words(void) const;

1394 8 get_word 0 4 1981 18 BitArray::get_word 0 1 438 175
/**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */
66
inline BitArray::MaskType BitArray::get_word(std::size_t n) const;

1395 8 set_word 0 4 1981 18 BitArray::set_word 0 1 439 113
/**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */
72
inline void BitArray::set_word(std::size_t n, BitArray::WordType value);

1396 15 invert_in_place 0 4 1981 25 BitArray::invert_in_place 0 1 440 90
/**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */
37
void BitArray::invert_in_place(void);

1397 18 has_bits_in_common 0 4 1981 28 BitArray::has_bits_in_common 0 1 441 178
/**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1398 5 clear 0 4 1981 15 BitArray::clear 0 1 442 49
/**
 * Sets all the bits in the BitArray off.
 */
34
inline void BitArray::clear(void);

1399 6 output 0 4 1981 16 BitArray::output 0 1 443 193
/**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */
47
void BitArray::output(std::ostream &out) const;

1400 13 output_binary 0 4 1981 23 BitArray::output_binary 0 1 444 83
/**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */
76
void BitArray::output_binary(std::ostream &out, int spaces_every = 4) const;

1401 10 output_hex 0 4 1981 20 BitArray::output_hex 0 1 445 93
/**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */
73
void BitArray::output_hex(std::ostream &out, int spaces_every = 4) const;

1402 5 write 0 4 1981 15 BitArray::write 0 1 446 99
/**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */
68
void BitArray::write(std::ostream &out, int indent_level = 0) const;

1403 11 operator == 0 4 1981 21 BitArray::operator == 0 1 447 0
63
inline bool BitArray::operator ==(BitArray const &other) const;

1404 11 operator != 0 4 1981 21 BitArray::operator != 0 1 448 0
63
inline bool BitArray::operator !=(BitArray const &other) const;

1405 10 operator < 0 4 1981 20 BitArray::operator < 0 1 449 0
62
inline bool BitArray::operator <(BitArray const &other) const;

1406 10 compare_to 0 4 1981 20 BitArray::compare_to 0 1 450 233
/**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */
54
int BitArray::compare_to(BitArray const &other) const;

1407 10 operator & 0 4 1981 20 BitArray::operator & 0 1 451 0
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1408 10 operator | 0 4 1981 20 BitArray::operator | 0 1 452 0
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1409 10 operator ^ 0 4 1981 20 BitArray::operator ^ 0 1 453 0
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1410 10 operator ~ 0 68 1981 20 BitArray::operator ~ 0 1 454 0
49
inline BitArray BitArray::operator ~(void) const;

1411 11 operator << 0 4 1981 21 BitArray::operator << 0 1 455 0
55
inline BitArray BitArray::operator <<(int shift) const;

1412 11 operator >> 0 4 1981 21 BitArray::operator >> 0 1 456 0
55
inline BitArray BitArray::operator >>(int shift) const;

1413 11 operator &= 0 4 1981 21 BitArray::operator &= 0 1 457 0
50
void BitArray::operator &=(BitArray const &other);

1414 11 operator |= 0 4 1981 21 BitArray::operator |= 0 1 458 0
50
void BitArray::operator |=(BitArray const &other);

1415 11 operator ^= 0 4 1981 21 BitArray::operator ^= 0 1 459 0
50
void BitArray::operator ^=(BitArray const &other);

1416 12 operator <<= 0 4 1981 22 BitArray::operator <<= 0 1 460 0
39
void BitArray::operator <<=(int shift);

1417 12 operator >>= 0 4 1981 22 BitArray::operator >>= 0 1 461 0
39
void BitArray::operator >>=(int shift);

1418 8 __bool__ 0 4 1981 18 BitArray::__bool__ 0 1 462 0
36
bool BitArray::__bool__(void) const;

1419 12 __getstate__ 0 4 1981 22 BitArray::__getstate__ 0 1 463 0
45
PyObject *BitArray::__getstate__(void) const;

1420 12 __setstate__ 0 4 1981 22 BitArray::__setstate__ 0 1 464 0
45
void BitArray::__setstate__(PyObject *state);

1421 14 get_class_type 0 4 1981 24 BitArray::get_class_type 0 1 465 0
49
static TypeHandle BitArray::get_class_type(void);

1422 9 ~BitArray 0 4 1981 19 BitArray::~BitArray 0 0 0
26
BitArray::~BitArray(void);

1423 12 ButtonHandle 0 4 1983 26 ButtonHandle::ButtonHandle 0 4 466 467 468 469 758
// The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer!

/**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */

/**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */
219
inline ButtonHandle::ButtonHandle(void) = default;
constexpr ButtonHandle::ButtonHandle(int index);
ButtonHandle::ButtonHandle(std::string const &name);
inline ButtonHandle::ButtonHandle(ButtonHandle const &) = default;

1424 11 operator == 0 4 1983 25 ButtonHandle::operator == 0 1 470 0
71
inline bool ButtonHandle::operator ==(ButtonHandle const &other) const;

1425 11 operator != 0 4 1983 25 ButtonHandle::operator != 0 1 471 0
71
inline bool ButtonHandle::operator !=(ButtonHandle const &other) const;

1426 10 operator < 0 4 1983 24 ButtonHandle::operator < 0 1 472 0
70
inline bool ButtonHandle::operator <(ButtonHandle const &other) const;

1427 11 operator <= 0 4 1983 25 ButtonHandle::operator <= 0 1 473 0
71
inline bool ButtonHandle::operator <=(ButtonHandle const &other) const;

1428 10 operator > 0 4 1983 24 ButtonHandle::operator > 0 1 474 0
70
inline bool ButtonHandle::operator >(ButtonHandle const &other) const;

1429 11 operator >= 0 4 1983 25 ButtonHandle::operator >= 0 1 475 0
71
inline bool ButtonHandle::operator >=(ButtonHandle const &other) const;

1430 10 compare_to 0 4 1983 24 ButtonHandle::compare_to 0 1 476 209
/**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */
69
inline int ButtonHandle::compare_to(ButtonHandle const &other) const;

1431 8 get_hash 0 4 1983 22 ButtonHandle::get_hash 0 1 477 54
/**
 * Returns a hash code suitable for phash_map.
 */
54
inline std::size_t ButtonHandle::get_hash(void) const;

1432 8 get_name 0 4 1983 22 ButtonHandle::get_name 0 1 478 42
/**
 * Returns the name of the button.
 */
47
std::string ButtonHandle::get_name(void) const;

1433 20 has_ascii_equivalent 0 4 1983 34 ButtonHandle::has_ascii_equivalent 0 1 479 121
/**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1434 20 get_ascii_equivalent 0 4 1983 34 ButtonHandle::get_ascii_equivalent 0 1 480 109
/**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1435 9 get_alias 0 4 1983 23 ButtonHandle::get_alias 0 1 481 373
/**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */
49
ButtonHandle ButtonHandle::get_alias(void) const;

1436 7 matches 0 4 1983 21 ButtonHandle::matches 0 1 482 263
/**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1437 9 get_index 0 4 1983 23 ButtonHandle::get_index 0 1 483 363
/**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */
50
constexpr int ButtonHandle::get_index(void) const;

1438 6 output 0 4 1983 20 ButtonHandle::output 0 1 484 10
/**
 *
 */
58
inline void ButtonHandle::output(std::ostream &out) const;

1439 4 none 0 4 1983 18 ButtonHandle::none 0 1 485 0
55
static constexpr ButtonHandle ButtonHandle::none(void);

1440 22 operator typecast bool 0 132 1983 36 ButtonHandle::operator typecast bool 0 1 487 0
34
inline operator bool (void) const;

1441 14 get_class_type 0 4 1983 28 ButtonHandle::get_class_type 0 1 486 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1442 13 ~ButtonHandle 0 4 1983 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1443 10 get_button 0 4 1987 26 ButtonRegistry::get_button 0 1 489 150
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */
65
ButtonHandle ButtonRegistry::get_button(std::string const &name);

1444 11 find_button 0 4 1987 27 ButtonRegistry::find_button 0 1 490 144
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */
66
ButtonHandle ButtonRegistry::find_button(std::string const &name);

1445 17 find_ascii_button 0 4 1987 33 ButtonRegistry::find_ascii_button 0 1 491 169
/**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1446 5 write 0 4 1987 21 ButtonRegistry::write 0 1 492 10
/**
 *
 */
52
void ButtonRegistry::write(std::ostream &out) const;

1447 3 ptr 0 4 1987 19 ButtonRegistry::ptr 0 1 493 134
// ptr() returns the pointer to the global ButtonRegistry object.

/**
 * Returns the pointer to the global ButtonRegistry object.
 */
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1448 14 ButtonRegistry 0 4 1987 30 ButtonRegistry::ButtonRegistry 0 1 488 10
/**
 *
 */
72
inline ButtonRegistry::ButtonRegistry(ButtonRegistry const &) = default;

1449 15 ~ButtonRegistry 0 4 1987 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1450 15 get_num_buttons 0 4 1988 26 ButtonMap::get_num_buttons 0 1 496 76
/**
 * Returns the number of buttons that this button mapping specifies.
 */
58
inline std::size_t ButtonMap::get_num_buttons(void) const;

1451 14 get_raw_button 0 4 1988 25 ButtonMap::get_raw_button 0 1 497 76
/**
 * Returns the underlying raw button associated with the nth button.
 */
67
inline ButtonHandle ButtonMap::get_raw_button(std::size_t i) const;

1452 17 get_mapped_button 0 4 1988 28 ButtonMap::get_mapped_button 0 3 498 499 500 437
/**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */
229
inline ButtonHandle ButtonMap::get_mapped_button(std::size_t i) const;
inline ButtonHandle ButtonMap::get_mapped_button(ButtonHandle raw) const;
inline ButtonHandle ButtonMap::get_mapped_button(std::string const &raw_name) const;

1453 23 get_mapped_button_label 0 4 1988 34 ButtonMap::get_mapped_button_label 0 3 501 502 503 837
/**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */
265
inline std::string const &ButtonMap::get_mapped_button_label(std::size_t i) const;
inline std::string const &ButtonMap::get_mapped_button_label(ButtonHandle raw) const;
inline std::string const &ButtonMap::get_mapped_button_label(std::string const &raw_name) const;

1454 6 output 0 4 1988 17 ButtonMap::output 0 1 504 10
/**
 *
 */
48
void ButtonMap::output(std::ostream &out) const;

1455 5 write 0 4 1988 16 ButtonMap::write 0 1 505 10
/**
 *
 */
69
void ButtonMap::write(std::ostream &out, int indent_level = 0) const;

1456 14 get_class_type 0 4 1988 25 ButtonMap::get_class_type 0 1 506 0
50
static TypeHandle ButtonMap::get_class_type(void);

1457 9 ButtonMap 0 4 1988 20 ButtonMap::ButtonMap 0 2 494 495 0
102
inline ButtonMap::ButtonMap(void) = default;
inline ButtonMap::ButtonMap(ButtonMap const &) = default;

1458 10 ~ButtonMap 0 4 1988 21 ButtonMap::~ButtonMap 0 0 0
28
ButtonMap::~ButtonMap(void);

1459 6 output 0 6 1990 22 CallbackObject::output 0 1 508 10
/**
 *
 */
61
virtual void CallbackObject::output(std::ostream &out) const;

1460 4 make 0 4 1990 20 CallbackObject::make 0 1 509 0
76
static PointerTo< CallbackObject > CallbackObject::make(PyObject *function);

1461 14 get_class_type 0 4 1990 30 CallbackObject::get_class_type 0 1 510 0
55
static TypeHandle CallbackObject::get_class_type(void);

1462 14 CallbackObject 0 4 1990 30 CallbackObject::CallbackObject 0 1 507 10
/**
 *
 */
72
inline CallbackObject::CallbackObject(CallbackObject const &) = default;

1463 15 ~CallbackObject 0 4 1990 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1464 19 get_cache_ref_count 0 4 1991 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 511 47
/**
 * Returns the current reference count.
 */
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1465 9 cache_ref 0 4 1991 44 CachedTypedWritableReferenceCount::cache_ref 0 1 512 108
/**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1466 11 cache_unref 0 4 1991 46 CachedTypedWritableReferenceCount::cache_unref 0 1 513 202
/**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1467 24 test_ref_count_integrity 0 4 1991 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 514 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1468 14 get_class_type 0 4 1991 49 CachedTypedWritableReferenceCount::get_class_type 0 1 515 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1469 6 output 0 6 1992 20 CallbackData::output 0 1 516 10
/**
 *
 */
59
virtual void CallbackData::output(std::ostream &out) const;

1470 6 upcall 0 6 1992 20 CallbackData::upcall 0 1 517 159
/**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */
40
virtual void CallbackData::upcall(void);

1471 14 get_class_type 0 4 1992 28 CallbackData::get_class_type 0 1 518 0
53
static TypeHandle CallbackData::get_class_type(void);

1472 13 ~CallbackData 0 4 1992 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1473 20 PythonCallbackObject 0 4 1993 42 PythonCallbackObject::PythonCallbackObject 0 2 519 520 10
/**
 *
 */
177
PythonCallbackObject::PythonCallbackObject(PyObject *function = (& ::_Py_NoneStruct));
inline PythonCallbackObject::PythonCallbackObject(PythonCallbackObject const &) = default;

1474 12 operator new 0 4 1993 34 PythonCallbackObject::operator new 0 1 521 0
144
inline void *PythonCallbackObject::operator new(std::size_t size);
inline void *PythonCallbackObject::operator new(std::size_t size, void *ptr);

1475 15 operator delete 0 4 1993 37 PythonCallbackObject::operator delete 0 0 0
128
inline void PythonCallbackObject::operator delete(void *ptr);
inline void PythonCallbackObject::operator delete(void *, void *);

1476 12 validate_ptr 0 4 1993 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1477 12 set_function 0 4 1993 34 PythonCallbackObject::set_function 0 1 522 126
/**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */
60
void PythonCallbackObject::set_function(PyObject *function);

1478 12 get_function 0 4 1993 34 PythonCallbackObject::get_function 0 1 523 64
/**
 * Returns the function that is called for the callback.
 */
51
PyObject *PythonCallbackObject::get_function(void);

1479 14 get_class_type 0 4 1993 36 PythonCallbackObject::get_class_type 0 1 524 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1480 7 TimeVal 0 4 1994 16 TimeVal::TimeVal 0 2 525 526 10
/**
 *
 */
82
inline TimeVal::TimeVal(void);
inline TimeVal::TimeVal(TimeVal const &) = default;

1481 7 get_sec 0 4 1994 16 TimeVal::get_sec 0 1 527 10
/**
 *
 */
42
inline ulong TimeVal::get_sec(void) const;

1482 8 get_usec 0 4 1994 17 TimeVal::get_usec 0 1 528 10
/**
 *
 */
43
inline ulong TimeVal::get_usec(void) const;

1483 6 get_tv 0 20 1994 15 TimeVal::get_tv 0 0 32
getter for ulong TimeVal::tv[2];
35
ulong *TimeVal::get_tv(void) const;

1484 6 set_tv 0 36 1994 15 TimeVal::set_tv 0 0 32
setter for ulong TimeVal::tv[2];
37
void TimeVal::set_tv(ulong value[2]);

1485 8 ~TimeVal 0 4 1994 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1486 11 ClockObject 0 4 1998 24 ClockObject::ClockObject 0 2 529 530 22
/**
 *
 */

/**
 *
 */
126
ClockObject::ClockObject(ClockObject::Mode mode = ::ClockObject::M_normal);
ClockObject::ClockObject(ClockObject const &copy);

1487 8 set_mode 0 4 1998 21 ClockObject::set_mode 0 1 531 1841
/**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */
51
void ClockObject::set_mode(ClockObject::Mode mode);

1488 8 get_mode 0 4 1998 21 ClockObject::get_mode 0 1 532 66
/**
 * Returns the current mode of the clock.  See set_mode().
 */
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1489 14 get_frame_time 0 4 1998 27 ClockObject::get_frame_time 0 1 533 350
/**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */
103
inline double ClockObject::get_frame_time(Thread *current_thread = Thread::get_current_thread()) const;

1490 13 get_real_time 0 4 1998 26 ClockObject::get_real_time 0 1 534 434
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */
53
inline double ClockObject::get_real_time(void) const;

1491 13 get_long_time 0 4 1998 26 ClockObject::get_long_time 0 1 535 440
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */
53
inline double ClockObject::get_long_time(void) const;

1492 5 reset 0 4 1998 18 ClockObject::reset 0 1 536 75
/**
 * Simultaneously resets both the time and the frame count to zero.
 */
37
inline void ClockObject::reset(void);

1493 13 set_real_time 0 4 1998 26 ClockObject::set_real_time 0 1 537 316
/**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */
45
void ClockObject::set_real_time(double time);

1494 14 set_frame_time 0 4 1998 27 ClockObject::set_frame_time 0 1 538 215
/**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */
101
void ClockObject::set_frame_time(double time, Thread *current_thread = Thread::get_current_thread());

1495 15 set_frame_count 0 4 1998 28 ClockObject::set_frame_count 0 1 539 132
/**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */
106
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = Thread::get_current_thread());

1496 15 get_frame_count 0 4 1998 28 ClockObject::get_frame_count 0 1 540 195
/**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */
101
inline int ClockObject::get_frame_count(Thread *current_thread = Thread::get_current_thread()) const;

1497 18 get_net_frame_rate 0 4 1998 31 ClockObject::get_net_frame_rate 0 1 541 245
/**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */
107
inline double ClockObject::get_net_frame_rate(Thread *current_thread = Thread::get_current_thread()) const;

1498 6 get_dt 0 4 1998 19 ClockObject::get_dt 0 1 542 130
/**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */
95
inline double ClockObject::get_dt(Thread *current_thread = Thread::get_current_thread()) const;

1499 6 set_dt 0 4 1998 19 ClockObject::set_dt 0 1 543 291
/**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */
36
void ClockObject::set_dt(double dt);

1500 14 set_frame_rate 0 4 1998 27 ClockObject::set_frame_rate 0 1 544 291
/**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */
52
void ClockObject::set_frame_rate(double frame_rate);

1501 10 get_max_dt 0 4 1998 23 ClockObject::get_max_dt 0 1 545 106
/**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */
50
inline double ClockObject::get_max_dt(void) const;

1502 10 set_max_dt 0 4 1998 23 ClockObject::set_max_dt 0 1 546 511
/**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */
51
inline void ClockObject::set_max_dt(double max_dt);

1503 18 get_degrade_factor 0 4 1998 31 ClockObject::get_degrade_factor 0 1 547 265
/**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
58
inline double ClockObject::get_degrade_factor(void) const;

1504 18 set_degrade_factor 0 4 1998 31 ClockObject::set_degrade_factor 0 1 548 262
/**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1505 31 set_average_frame_rate_interval 0 4 1998 44 ClockObject::set_average_frame_rate_interval 0 1 549 393
/**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1506 31 get_average_frame_rate_interval 0 4 1998 44 ClockObject::get_average_frame_rate_interval 0 1 550 162
/**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1507 22 get_average_frame_rate 0 4 1998 35 ClockObject::get_average_frame_rate 0 1 551 214
/**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */
104
double ClockObject::get_average_frame_rate(Thread *current_thread = Thread::get_current_thread()) const;

1508 22 get_max_frame_duration 0 4 1998 35 ClockObject::get_max_frame_duration 0 1 552 105
/**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */
104
double ClockObject::get_max_frame_duration(Thread *current_thread = Thread::get_current_thread()) const;

1509 25 calc_frame_rate_deviation 0 4 1998 38 ClockObject::calc_frame_rate_deviation 0 1 553 539
/**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */
107
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = Thread::get_current_thread()) const;

1510 4 tick 0 4 1998 17 ClockObject::tick 0 1 554 285
/**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */
78
void ClockObject::tick(Thread *current_thread = Thread::get_current_thread());

1511 15 sync_frame_time 0 4 1998 28 ClockObject::sync_frame_time 0 1 555 417
/**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */
89
void ClockObject::sync_frame_time(Thread *current_thread = Thread::get_current_thread());

1512 12 check_errors 0 4 1998 25 ClockObject::check_errors 0 1 556 322
/**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */
62
inline bool ClockObject::check_errors(Thread *current_thread);

1513 16 get_global_clock 0 4 1998 29 ClockObject::get_global_clock 0 1 557 159
/**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */
63
static inline ClockObject *ClockObject::get_global_clock(void);

1514 14 get_class_type 0 4 1998 27 ClockObject::get_class_type 0 1 558 0
52
static TypeHandle ClockObject::get_class_type(void);

1515 24 parse_color_space_string 0 1 0 24 parse_color_space_string 0 1 962 0
60
ColorSpace parse_color_space_string(std::string const &str);

1516 18 format_color_space 0 1 0 18 format_color_space 0 1 963 0
46
std::string format_color_space(ColorSpace cs);

1517 14 get_model_path 0 1 0 14 get_model_path 0 1 964 0
47
ConfigVariableSearchPath &get_model_path(void);

1518 15 get_plugin_path 0 1 0 15 get_plugin_path 0 1 965 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1519 9 cache_ref 0 4 2002 28 CopyOnWriteObject::cache_ref 0 1 559 62
/**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */
53
inline void CopyOnWriteObject::cache_ref(void) const;

1520 11 cache_unref 0 4 2002 30 CopyOnWriteObject::cache_unref 0 1 560 64
/**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */
55
inline bool CopyOnWriteObject::cache_unref(void) const;

1521 14 get_class_type 0 4 2002 33 CopyOnWriteObject::get_class_type 0 1 561 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1522 18 ~CopyOnWriteObject 0 4 2002 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1523 22 upcast_to_DatagramSink 0 12 2003 38 DatagramBuffer::upcast_to_DatagramSink 0 1 565 42
upcast from DatagramBuffer to DatagramSink
59
DatagramSink *DatagramBuffer::upcast_to_DatagramSink(void);

1524 26 downcast_to_DatagramBuffer 0 12 1973 40 DatagramSink::downcast_to_DatagramBuffer 0 0 44
downcast from DatagramSink to DatagramBuffer
63
DatagramBuffer *DatagramSink::downcast_to_DatagramBuffer(void);

1525 27 upcast_to_DatagramGenerator 0 12 2003 43 DatagramBuffer::upcast_to_DatagramGenerator 0 1 566 47
upcast from DatagramBuffer to DatagramGenerator
69
DatagramGenerator *DatagramBuffer::upcast_to_DatagramGenerator(void);

1526 26 downcast_to_DatagramBuffer 0 12 1966 45 DatagramGenerator::downcast_to_DatagramBuffer 0 0 49
downcast from DatagramGenerator to DatagramBuffer
68
DatagramBuffer *DatagramGenerator::downcast_to_DatagramBuffer(void);

1527 14 DatagramBuffer 0 4 2003 30 DatagramBuffer::DatagramBuffer 0 2 562 563 104
/**
 * Initializes an empty datagram buffer.
 */

/**
 * Initializes the buffer with the given data.
 */
111
inline DatagramBuffer::DatagramBuffer(void);
inline explicit DatagramBuffer::DatagramBuffer(vector_uchar data);

1528 5 clear 0 4 2003 21 DatagramBuffer::clear 0 1 564 38
/**
 * Clears the internal buffer.
 */
40
inline void DatagramBuffer::clear(void);

1529 8 get_data 0 4 2003 24 DatagramBuffer::get_data 0 0 39
/**
 * Returns the internal buffer.
 */
64
inline vector_uchar const &DatagramBuffer::get_data(void) const;

1530 8 set_data 0 4 2003 24 DatagramBuffer::set_data 0 0 52
/**
 * Replaces the data in the internal buffer.
 */
56
inline void DatagramBuffer::set_data(vector_uchar data);

1531 15 ~DatagramBuffer 0 4 2003 31 DatagramBuffer::~DatagramBuffer 0 0 0
38
DatagramBuffer::~DatagramBuffer(void);

1532 17 DatagramInputFile 0 4 2007 36 DatagramInputFile::DatagramInputFile 0 1 567 10
/**
 *
 */
50
inline DatagramInputFile::DatagramInputFile(void);

1533 4 open 0 4 2007 23 DatagramInputFile::open 0 3 568 569 570 432
/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */
206
bool DatagramInputFile::open(FileReference const *file);
inline bool DatagramInputFile::open(Filename const &filename);
bool DatagramInputFile::open(std::istream &in, Filename const &filename = Filename());

1534 10 get_stream 0 4 2007 29 DatagramInputFile::get_stream 0 1 571 61
/**
 * Returns the istream represented by the input file.
 */
57
inline std::istream &DatagramInputFile::get_stream(void);

1535 5 close 0 4 2007 24 DatagramInputFile::close 0 1 572 98
/**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */
36
void DatagramInputFile::close(void);

1536 11 read_header 0 4 2007 30 DatagramInputFile::read_header 0 0 257
/**
 * Reads a sequence of bytes from the beginning of the datagram file.  This
 * may be called any number of times after the file has been opened and before
 * the first datagram is read.  It may not be called once the first datagram
 * has been read.
 */
80
bool DatagramInputFile::read_header(std::string &header, std::size_t num_bytes);

1537 18 DatagramOutputFile 0 4 2008 38 DatagramOutputFile::DatagramOutputFile 0 1 573 10
/**
 *
 */
52
inline DatagramOutputFile::DatagramOutputFile(void);

1538 4 open 0 4 2008 24 DatagramOutputFile::open 0 3 574 575 576 434
/**
 * Opens the indicated filename for writing.  Returns true on success, false
 * on failure.
 */

/**
 * Opens the indicated filename for writing.  Returns true if successful,
 * false on failure.
 */

/**
 * Starts writing to the indicated stream.  Returns true on success, false on
 * failure.  The DatagramOutputFile does not take ownership of the stream; you
 * are responsible for closing or deleting it when you are done.
 */
210
bool DatagramOutputFile::open(FileReference const *file);
inline bool DatagramOutputFile::open(Filename const &filename);
bool DatagramOutputFile::open(std::ostream &out, Filename const &filename = Filename());

1539 5 close 0 4 2008 25 DatagramOutputFile::close 0 1 577 99
/**
 * Closes the file.  This is also implicitly done when the DatagramOutputFile
 * destructs.
 */
37
void DatagramOutputFile::close(void);

1540 12 write_header 0 4 2008 32 DatagramOutputFile::write_header 0 1 578 256
/**
 * Writes a sequence of bytes to the beginning of the datagram file.  This may
 * be called any number of times after the file has been opened and before the
 * first datagram is written.  It may not be called once the first datagram is
 * written.
 */
65
bool DatagramOutputFile::write_header(std::string const &header);

1541 10 get_stream 0 4 2008 30 DatagramOutputFile::get_stream 0 0 62
/**
 * Returns the ostream represented by the output file.
 */
58
inline std::ostream &DatagramOutputFile::get_stream(void);

1542 13 DoubleBitMask 0 4 2010 45 DoubleBitMask< BitMaskNative >::DoubleBitMask 0 3 579 580 581 0
245
constexpr DoubleBitMask< BitMaskNative >::DoubleBitMask(void) = default;
DoubleBitMask< BitMaskNative >::DoubleBitMask(PyObject *init_value);
inline DoubleBitMask< BitMaskNative >::DoubleBitMask(DoubleBitMask< BitMaskNative > const &) = default;

1543 6 all_on 0 4 2010 38 DoubleBitMask< BitMaskNative >::all_on 0 1 582 0
90
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_on(void);

1544 7 all_off 0 4 2010 39 DoubleBitMask< BitMaskNative >::all_off 0 1 583 0
91
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_off(void);

1545 8 lower_on 0 4 2010 40 DoubleBitMask< BitMaskNative >::lower_on 0 1 584 0
99
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::lower_on(int on_bits);

1546 3 bit 0 4 2010 35 DoubleBitMask< BitMaskNative >::bit 0 1 585 0
92
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::bit(int index);

1547 5 range 0 4 2010 37 DoubleBitMask< BitMaskNative >::range 0 1 586 0
106
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::range(int low_bit, int size);

1548 16 has_max_num_bits 0 4 2010 48 DoubleBitMask< BitMaskNative >::has_max_num_bits 0 1 587 0
77
static constexpr bool DoubleBitMask< BitMaskNative >::has_max_num_bits(void);

1549 16 get_max_num_bits 0 4 2010 48 DoubleBitMask< BitMaskNative >::get_max_num_bits 0 1 588 0
76
static constexpr int DoubleBitMask< BitMaskNative >::get_max_num_bits(void);

1550 12 get_num_bits 0 4 2010 44 DoubleBitMask< BitMaskNative >::get_num_bits 0 1 589 0
71
constexpr int DoubleBitMask< BitMaskNative >::get_num_bits(void) const;

1551 7 get_bit 0 4 2010 39 DoubleBitMask< BitMaskNative >::get_bit 0 1 590 0
69
inline bool DoubleBitMask< BitMaskNative >::get_bit(int index) const;

1552 7 set_bit 0 4 2010 39 DoubleBitMask< BitMaskNative >::set_bit 0 1 591 0
63
inline void DoubleBitMask< BitMaskNative >::set_bit(int index);

1553 9 clear_bit 0 4 2010 41 DoubleBitMask< BitMaskNative >::clear_bit 0 1 592 0
65
inline void DoubleBitMask< BitMaskNative >::clear_bit(int index);

1554 10 set_bit_to 0 4 2010 42 DoubleBitMask< BitMaskNative >::set_bit_to 0 1 593 0
78
inline void DoubleBitMask< BitMaskNative >::set_bit_to(int index, bool value);

1555 7 is_zero 0 4 2010 39 DoubleBitMask< BitMaskNative >::is_zero 0 1 594 0
64
inline bool DoubleBitMask< BitMaskNative >::is_zero(void) const;

1556 9 is_all_on 0 4 2010 41 DoubleBitMask< BitMaskNative >::is_all_on 0 1 595 0
66
inline bool DoubleBitMask< BitMaskNative >::is_all_on(void) const;

1557 7 extract 0 4 2010 39 DoubleBitMask< BitMaskNative >::extract 0 1 596 0
85
inline uint64_t DoubleBitMask< BitMaskNative >::extract(int low_bit, int size) const;

1558 5 store 0 4 2010 37 DoubleBitMask< BitMaskNative >::store 0 1 597 0
89
inline void DoubleBitMask< BitMaskNative >::store(uint64_t value, int low_bit, int size);

1559 10 has_any_of 0 4 2010 42 DoubleBitMask< BitMaskNative >::has_any_of 0 1 598 0
84
inline bool DoubleBitMask< BitMaskNative >::has_any_of(int low_bit, int size) const;

1560 10 has_all_of 0 4 2010 42 DoubleBitMask< BitMaskNative >::has_all_of 0 1 599 0
84
inline bool DoubleBitMask< BitMaskNative >::has_all_of(int low_bit, int size) const;

1561 9 set_range 0 4 2010 41 DoubleBitMask< BitMaskNative >::set_range 0 1 600 0
77
inline void DoubleBitMask< BitMaskNative >::set_range(int low_bit, int size);

1562 11 clear_range 0 4 2010 43 DoubleBitMask< BitMaskNative >::clear_range 0 1 601 0
79
inline void DoubleBitMask< BitMaskNative >::clear_range(int low_bit, int size);

1563 12 set_range_to 0 4 2010 44 DoubleBitMask< BitMaskNative >::set_range_to 0 1 602 0
92
inline void DoubleBitMask< BitMaskNative >::set_range_to(bool value, int low_bit, int size);

1564 15 get_num_on_bits 0 4 2010 47 DoubleBitMask< BitMaskNative >::get_num_on_bits 0 1 603 0
71
inline int DoubleBitMask< BitMaskNative >::get_num_on_bits(void) const;

1565 16 get_num_off_bits 0 4 2010 48 DoubleBitMask< BitMaskNative >::get_num_off_bits 0 1 604 0
72
inline int DoubleBitMask< BitMaskNative >::get_num_off_bits(void) const;

1566 17 get_lowest_on_bit 0 4 2010 49 DoubleBitMask< BitMaskNative >::get_lowest_on_bit 0 1 605 0
73
inline int DoubleBitMask< BitMaskNative >::get_lowest_on_bit(void) const;

1567 18 get_lowest_off_bit 0 4 2010 50 DoubleBitMask< BitMaskNative >::get_lowest_off_bit 0 1 606 0
74
inline int DoubleBitMask< BitMaskNative >::get_lowest_off_bit(void) const;

1568 18 get_highest_on_bit 0 4 2010 50 DoubleBitMask< BitMaskNative >::get_highest_on_bit 0 1 607 0
74
inline int DoubleBitMask< BitMaskNative >::get_highest_on_bit(void) const;

1569 19 get_highest_off_bit 0 4 2010 51 DoubleBitMask< BitMaskNative >::get_highest_off_bit 0 1 608 0
75
inline int DoubleBitMask< BitMaskNative >::get_highest_off_bit(void) const;

1570 29 get_next_higher_different_bit 0 4 2010 61 DoubleBitMask< BitMaskNative >::get_next_higher_different_bit 0 1 609 0
92
inline int DoubleBitMask< BitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1571 15 invert_in_place 0 4 2010 47 DoubleBitMask< BitMaskNative >::invert_in_place 0 1 610 0
66
inline void DoubleBitMask< BitMaskNative >::invert_in_place(void);

1572 18 has_bits_in_common 0 4 2010 50 DoubleBitMask< BitMaskNative >::has_bits_in_common 0 1 611 0
114
inline bool DoubleBitMask< BitMaskNative >::has_bits_in_common(DoubleBitMask< BitMaskNative > const &other) const;

1573 5 clear 0 4 2010 37 DoubleBitMask< BitMaskNative >::clear 0 1 612 0
56
inline void DoubleBitMask< BitMaskNative >::clear(void);

1574 6 output 0 4 2010 38 DoubleBitMask< BitMaskNative >::output 0 1 613 0
69
void DoubleBitMask< BitMaskNative >::output(std::ostream &out) const;

1575 13 output_binary 0 4 2010 45 DoubleBitMask< BitMaskNative >::output_binary 0 1 614 0
98
void DoubleBitMask< BitMaskNative >::output_binary(std::ostream &out, int spaces_every = 4) const;

1576 10 output_hex 0 4 2010 42 DoubleBitMask< BitMaskNative >::output_hex 0 1 615 0
95
void DoubleBitMask< BitMaskNative >::output_hex(std::ostream &out, int spaces_every = 4) const;

1577 5 write 0 4 2010 37 DoubleBitMask< BitMaskNative >::write 0 1 616 0
90
void DoubleBitMask< BitMaskNative >::write(std::ostream &out, int indent_level = 0) const;

1578 11 operator == 0 4 2010 43 DoubleBitMask< BitMaskNative >::operator == 0 1 617 0
107
inline bool DoubleBitMask< BitMaskNative >::operator ==(DoubleBitMask< BitMaskNative > const &other) const;

1579 11 operator != 0 4 2010 43 DoubleBitMask< BitMaskNative >::operator != 0 1 618 0
107
inline bool DoubleBitMask< BitMaskNative >::operator !=(DoubleBitMask< BitMaskNative > const &other) const;

1580 10 operator < 0 4 2010 42 DoubleBitMask< BitMaskNative >::operator < 0 1 619 0
106
inline bool DoubleBitMask< BitMaskNative >::operator <(DoubleBitMask< BitMaskNative > const &other) const;

1581 10 compare_to 0 4 2010 42 DoubleBitMask< BitMaskNative >::compare_to 0 1 620 0
105
inline int DoubleBitMask< BitMaskNative >::compare_to(DoubleBitMask< BitMaskNative > const &other) const;

1582 10 operator & 0 4 2010 42 DoubleBitMask< BitMaskNative >::operator & 0 1 621 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator &(DoubleBitMask< BitMaskNative > const &other) const;

1583 10 operator | 0 4 2010 42 DoubleBitMask< BitMaskNative >::operator | 0 1 622 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator |(DoubleBitMask< BitMaskNative > const &other) const;

1584 10 operator ^ 0 4 2010 42 DoubleBitMask< BitMaskNative >::operator ^ 0 1 623 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ^(DoubleBitMask< BitMaskNative > const &other) const;

1585 10 operator ~ 0 68 2010 42 DoubleBitMask< BitMaskNative >::operator ~ 0 1 624 0
93
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ~(void) const;

1586 11 operator << 0 4 2010 43 DoubleBitMask< BitMaskNative >::operator << 0 1 625 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator <<(int shift) const;

1587 11 operator >> 0 4 2010 43 DoubleBitMask< BitMaskNative >::operator >> 0 1 626 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator >>(int shift) const;

1588 11 operator &= 0 4 2010 43 DoubleBitMask< BitMaskNative >::operator &= 0 1 627 0
101
inline void DoubleBitMask< BitMaskNative >::operator &=(DoubleBitMask< BitMaskNative > const &other);

1589 11 operator |= 0 4 2010 43 DoubleBitMask< BitMaskNative >::operator |= 0 1 628 0
101
inline void DoubleBitMask< BitMaskNative >::operator |=(DoubleBitMask< BitMaskNative > const &other);

1590 11 operator ^= 0 4 2010 43 DoubleBitMask< BitMaskNative >::operator ^= 0 1 629 0
101
inline void DoubleBitMask< BitMaskNative >::operator ^=(DoubleBitMask< BitMaskNative > const &other);

1591 12 operator <<= 0 4 2010 44 DoubleBitMask< BitMaskNative >::operator <<= 0 1 630 0
68
inline void DoubleBitMask< BitMaskNative >::operator <<=(int shift);

1592 12 operator >>= 0 4 2010 44 DoubleBitMask< BitMaskNative >::operator >>= 0 1 631 0
68
inline void DoubleBitMask< BitMaskNative >::operator >>=(int shift);

1593 8 __bool__ 0 4 2010 40 DoubleBitMask< BitMaskNative >::__bool__ 0 1 632 0
58
bool DoubleBitMask< BitMaskNative >::__bool__(void) const;

1594 7 __int__ 0 4 2010 39 DoubleBitMask< BitMaskNative >::__int__ 0 1 633 0
62
PyObject *DoubleBitMask< BitMaskNative >::__int__(void) const;

1595 10 __reduce__ 0 4 2010 42 DoubleBitMask< BitMaskNative >::__reduce__ 0 1 634 0
75
PyObject *DoubleBitMask< BitMaskNative >::__reduce__(PyObject *self) const;

1596 14 get_class_type 0 4 2010 46 DoubleBitMask< BitMaskNative >::get_class_type 0 1 635 0
71
static TypeHandle DoubleBitMask< BitMaskNative >::get_class_type(void);

1597 14 ~DoubleBitMask 0 4 2010 46 DoubleBitMask< BitMaskNative >::~DoubleBitMask 0 0 0
53
DoubleBitMask< BitMaskNative >::~DoubleBitMask(void);

1598 13 DoubleBitMask 0 4 2012 51 DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask 0 3 636 637 638 0
269
constexpr DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(void) = default;
DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(PyObject *init_value);
inline DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(DoubleBitMask< DoubleBitMaskNative > const &) = default;

1599 6 all_on 0 4 2012 44 DoubleBitMask< DoubleBitMaskNative >::all_on 0 1 639 0
102
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_on(void);

1600 7 all_off 0 4 2012 45 DoubleBitMask< DoubleBitMaskNative >::all_off 0 1 640 0
103
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_off(void);

1601 8 lower_on 0 4 2012 46 DoubleBitMask< DoubleBitMaskNative >::lower_on 0 1 641 0
111
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::lower_on(int on_bits);

1602 3 bit 0 4 2012 41 DoubleBitMask< DoubleBitMaskNative >::bit 0 1 642 0
104
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::bit(int index);

1603 5 range 0 4 2012 43 DoubleBitMask< DoubleBitMaskNative >::range 0 1 643 0
118
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::range(int low_bit, int size);

1604 16 has_max_num_bits 0 4 2012 54 DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits 0 1 644 0
83
static constexpr bool DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits(void);

1605 16 get_max_num_bits 0 4 2012 54 DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits 0 1 645 0
82
static constexpr int DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits(void);

1606 12 get_num_bits 0 4 2012 50 DoubleBitMask< DoubleBitMaskNative >::get_num_bits 0 1 646 0
77
constexpr int DoubleBitMask< DoubleBitMaskNative >::get_num_bits(void) const;

1607 7 get_bit 0 4 2012 45 DoubleBitMask< DoubleBitMaskNative >::get_bit 0 1 647 0
75
inline bool DoubleBitMask< DoubleBitMaskNative >::get_bit(int index) const;

1608 7 set_bit 0 4 2012 45 DoubleBitMask< DoubleBitMaskNative >::set_bit 0 1 648 0
69
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit(int index);

1609 9 clear_bit 0 4 2012 47 DoubleBitMask< DoubleBitMaskNative >::clear_bit 0 1 649 0
71
inline void DoubleBitMask< DoubleBitMaskNative >::clear_bit(int index);

1610 10 set_bit_to 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::set_bit_to 0 1 650 0
84
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit_to(int index, bool value);

1611 7 is_zero 0 4 2012 45 DoubleBitMask< DoubleBitMaskNative >::is_zero 0 1 651 0
70
inline bool DoubleBitMask< DoubleBitMaskNative >::is_zero(void) const;

1612 9 is_all_on 0 4 2012 47 DoubleBitMask< DoubleBitMaskNative >::is_all_on 0 1 652 0
72
inline bool DoubleBitMask< DoubleBitMaskNative >::is_all_on(void) const;

1613 7 extract 0 4 2012 45 DoubleBitMask< DoubleBitMaskNative >::extract 0 1 653 0
91
inline uint64_t DoubleBitMask< DoubleBitMaskNative >::extract(int low_bit, int size) const;

1614 5 store 0 4 2012 43 DoubleBitMask< DoubleBitMaskNative >::store 0 1 654 0
95
inline void DoubleBitMask< DoubleBitMaskNative >::store(uint64_t value, int low_bit, int size);

1615 10 has_any_of 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::has_any_of 0 1 655 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_any_of(int low_bit, int size) const;

1616 10 has_all_of 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::has_all_of 0 1 656 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_all_of(int low_bit, int size) const;

1617 9 set_range 0 4 2012 47 DoubleBitMask< DoubleBitMaskNative >::set_range 0 1 657 0
83
inline void DoubleBitMask< DoubleBitMaskNative >::set_range(int low_bit, int size);

1618 11 clear_range 0 4 2012 49 DoubleBitMask< DoubleBitMaskNative >::clear_range 0 1 658 0
85
inline void DoubleBitMask< DoubleBitMaskNative >::clear_range(int low_bit, int size);

1619 12 set_range_to 0 4 2012 50 DoubleBitMask< DoubleBitMaskNative >::set_range_to 0 1 659 0
98
inline void DoubleBitMask< DoubleBitMaskNative >::set_range_to(bool value, int low_bit, int size);

1620 15 get_num_on_bits 0 4 2012 53 DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits 0 1 660 0
77
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits(void) const;

1621 16 get_num_off_bits 0 4 2012 54 DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits 0 1 661 0
78
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits(void) const;

1622 17 get_lowest_on_bit 0 4 2012 55 DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit 0 1 662 0
79
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit(void) const;

1623 18 get_lowest_off_bit 0 4 2012 56 DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit 0 1 663 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit(void) const;

1624 18 get_highest_on_bit 0 4 2012 56 DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit 0 1 664 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit(void) const;

1625 19 get_highest_off_bit 0 4 2012 57 DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit 0 1 665 0
81
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit(void) const;

1626 29 get_next_higher_different_bit 0 4 2012 67 DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit 0 1 666 0
98
inline int DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1627 15 invert_in_place 0 4 2012 53 DoubleBitMask< DoubleBitMaskNative >::invert_in_place 0 1 667 0
72
inline void DoubleBitMask< DoubleBitMaskNative >::invert_in_place(void);

1628 18 has_bits_in_common 0 4 2012 56 DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common 0 1 668 0
126
inline bool DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1629 5 clear 0 4 2012 43 DoubleBitMask< DoubleBitMaskNative >::clear 0 1 669 0
62
inline void DoubleBitMask< DoubleBitMaskNative >::clear(void);

1630 6 output 0 4 2012 44 DoubleBitMask< DoubleBitMaskNative >::output 0 1 670 0
75
void DoubleBitMask< DoubleBitMaskNative >::output(std::ostream &out) const;

1631 13 output_binary 0 4 2012 51 DoubleBitMask< DoubleBitMaskNative >::output_binary 0 1 671 0
104
void DoubleBitMask< DoubleBitMaskNative >::output_binary(std::ostream &out, int spaces_every = 4) const;

1632 10 output_hex 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::output_hex 0 1 672 0
101
void DoubleBitMask< DoubleBitMaskNative >::output_hex(std::ostream &out, int spaces_every = 4) const;

1633 5 write 0 4 2012 43 DoubleBitMask< DoubleBitMaskNative >::write 0 1 673 0
96
void DoubleBitMask< DoubleBitMaskNative >::write(std::ostream &out, int indent_level = 0) const;

1634 11 operator == 0 4 2012 49 DoubleBitMask< DoubleBitMaskNative >::operator == 0 1 674 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator ==(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1635 11 operator != 0 4 2012 49 DoubleBitMask< DoubleBitMaskNative >::operator != 0 1 675 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator !=(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1636 10 operator < 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::operator < 0 1 676 0
118
inline bool DoubleBitMask< DoubleBitMaskNative >::operator <(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1637 10 compare_to 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::compare_to 0 1 677 0
117
inline int DoubleBitMask< DoubleBitMaskNative >::compare_to(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1638 10 operator & 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::operator & 0 1 678 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator &(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1639 10 operator | 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::operator | 0 1 679 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator |(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1640 10 operator ^ 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::operator ^ 0 1 680 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ^(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1641 10 operator ~ 0 68 2012 48 DoubleBitMask< DoubleBitMaskNative >::operator ~ 0 1 681 0
105
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ~(void) const;

1642 11 operator << 0 4 2012 49 DoubleBitMask< DoubleBitMaskNative >::operator << 0 1 682 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator <<(int shift) const;

1643 11 operator >> 0 4 2012 49 DoubleBitMask< DoubleBitMaskNative >::operator >> 0 1 683 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator >>(int shift) const;

1644 11 operator &= 0 4 2012 49 DoubleBitMask< DoubleBitMaskNative >::operator &= 0 1 684 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator &=(DoubleBitMask< DoubleBitMaskNative > const &other);

1645 11 operator |= 0 4 2012 49 DoubleBitMask< DoubleBitMaskNative >::operator |= 0 1 685 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator |=(DoubleBitMask< DoubleBitMaskNative > const &other);

1646 11 operator ^= 0 4 2012 49 DoubleBitMask< DoubleBitMaskNative >::operator ^= 0 1 686 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator ^=(DoubleBitMask< DoubleBitMaskNative > const &other);

1647 12 operator <<= 0 4 2012 50 DoubleBitMask< DoubleBitMaskNative >::operator <<= 0 1 687 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator <<=(int shift);

1648 12 operator >>= 0 4 2012 50 DoubleBitMask< DoubleBitMaskNative >::operator >>= 0 1 688 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator >>=(int shift);

1649 8 __bool__ 0 4 2012 46 DoubleBitMask< DoubleBitMaskNative >::__bool__ 0 1 689 0
64
bool DoubleBitMask< DoubleBitMaskNative >::__bool__(void) const;

1650 7 __int__ 0 4 2012 45 DoubleBitMask< DoubleBitMaskNative >::__int__ 0 1 690 0
68
PyObject *DoubleBitMask< DoubleBitMaskNative >::__int__(void) const;

1651 10 __reduce__ 0 4 2012 48 DoubleBitMask< DoubleBitMaskNative >::__reduce__ 0 1 691 0
81
PyObject *DoubleBitMask< DoubleBitMaskNative >::__reduce__(PyObject *self) const;

1652 14 get_class_type 0 4 2012 52 DoubleBitMask< DoubleBitMaskNative >::get_class_type 0 1 692 0
77
static TypeHandle DoubleBitMask< DoubleBitMaskNative >::get_class_type(void);

1653 14 ~DoubleBitMask 0 4 2012 52 DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask 0 0 0
59
DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask(void);

1654 6 lstick 0 4 2015 21 GamepadButton::lstick 0 1 695 0
48
static ButtonHandle GamepadButton::lstick(void);

1655 6 rstick 0 4 2015 21 GamepadButton::rstick 0 1 696 0
48
static ButtonHandle GamepadButton::rstick(void);

1656 9 lshoulder 0 4 2015 24 GamepadButton::lshoulder 0 1 697 0
51
static ButtonHandle GamepadButton::lshoulder(void);

1657 9 rshoulder 0 4 2015 24 GamepadButton::rshoulder 0 1 698 0
51
static ButtonHandle GamepadButton::rshoulder(void);

1658 8 ltrigger 0 4 2015 23 GamepadButton::ltrigger 0 1 699 0
50
static ButtonHandle GamepadButton::ltrigger(void);

1659 8 rtrigger 0 4 2015 23 GamepadButton::rtrigger 0 1 700 0
50
static ButtonHandle GamepadButton::rtrigger(void);

1660 5 lgrip 0 4 2015 20 GamepadButton::lgrip 0 1 701 0
47
static ButtonHandle GamepadButton::lgrip(void);

1661 5 rgrip 0 4 2015 20 GamepadButton::rgrip 0 1 702 0
47
static ButtonHandle GamepadButton::rgrip(void);

1662 9 dpad_left 0 4 2015 24 GamepadButton::dpad_left 0 1 703 0
51
static ButtonHandle GamepadButton::dpad_left(void);

1663 10 dpad_right 0 4 2015 25 GamepadButton::dpad_right 0 1 704 0
52
static ButtonHandle GamepadButton::dpad_right(void);

1664 7 dpad_up 0 4 2015 22 GamepadButton::dpad_up 0 1 705 0
49
static ButtonHandle GamepadButton::dpad_up(void);

1665 9 dpad_down 0 4 2015 24 GamepadButton::dpad_down 0 1 706 0
51
static ButtonHandle GamepadButton::dpad_down(void);

1666 4 back 0 4 2015 19 GamepadButton::back 0 1 707 0
46
static ButtonHandle GamepadButton::back(void);

1667 5 guide 0 4 2015 20 GamepadButton::guide 0 1 708 0
47
static ButtonHandle GamepadButton::guide(void);

1668 5 start 0 4 2015 20 GamepadButton::start 0 1 709 0
47
static ButtonHandle GamepadButton::start(void);

1669 4 next 0 4 2015 19 GamepadButton::next 0 1 710 0
46
static ButtonHandle GamepadButton::next(void);

1670 8 previous 0 4 2015 23 GamepadButton::previous 0 1 711 0
50
static ButtonHandle GamepadButton::previous(void);

1671 6 face_a 0 4 2015 21 GamepadButton::face_a 0 1 712 0
48
static ButtonHandle GamepadButton::face_a(void);

1672 6 face_b 0 4 2015 21 GamepadButton::face_b 0 1 713 0
48
static ButtonHandle GamepadButton::face_b(void);

1673 6 face_c 0 4 2015 21 GamepadButton::face_c 0 1 714 0
48
static ButtonHandle GamepadButton::face_c(void);

1674 6 face_x 0 4 2015 21 GamepadButton::face_x 0 1 715 0
48
static ButtonHandle GamepadButton::face_x(void);

1675 6 face_y 0 4 2015 21 GamepadButton::face_y 0 1 716 0
48
static ButtonHandle GamepadButton::face_y(void);

1676 6 face_z 0 4 2015 21 GamepadButton::face_z 0 1 717 0
48
static ButtonHandle GamepadButton::face_z(void);

1677 6 face_1 0 4 2015 21 GamepadButton::face_1 0 1 718 0
48
static ButtonHandle GamepadButton::face_1(void);

1678 6 face_2 0 4 2015 21 GamepadButton::face_2 0 1 719 0
48
static ButtonHandle GamepadButton::face_2(void);

1679 7 trigger 0 4 2015 22 GamepadButton::trigger 0 1 720 74
// Flight stick buttons, takes zero-based index.  First is always trigger.
49
static ButtonHandle GamepadButton::trigger(void);

1680 8 joystick 0 4 2015 23 GamepadButton::joystick 0 1 721 169
/**
 * Returns the ButtonHandle associated with the particular numbered joystick
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */
63
static ButtonHandle GamepadButton::joystick(int button_number);

1681 6 hat_up 0 4 2015 21 GamepadButton::hat_up 0 1 722 0
48
static ButtonHandle GamepadButton::hat_up(void);

1682 8 hat_down 0 4 2015 23 GamepadButton::hat_down 0 1 723 0
50
static ButtonHandle GamepadButton::hat_down(void);

1683 8 hat_left 0 4 2015 23 GamepadButton::hat_left 0 1 724 0
50
static ButtonHandle GamepadButton::hat_left(void);

1684 9 hat_right 0 4 2015 24 GamepadButton::hat_right 0 1 725 0
51
static ButtonHandle GamepadButton::hat_right(void);

1685 13 GamepadButton 0 4 2015 28 GamepadButton::GamepadButton 0 2 693 694 0
122
inline GamepadButton::GamepadButton(void) = default;
inline GamepadButton::GamepadButton(GamepadButton const &) = default;

1686 14 ~GamepadButton 0 4 2015 29 GamepadButton::~GamepadButton 0 0 0
36
GamepadButton::~GamepadButton(void);

1687 9 ascii_key 0 4 2016 25 KeyboardButton::ascii_key 0 1 728 144
/**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */
69
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);

1688 5 space 0 4 2016 21 KeyboardButton::space 0 1 729 0
48
static ButtonHandle KeyboardButton::space(void);

1689 9 backspace 0 4 2016 25 KeyboardButton::backspace 0 1 730 0
52
static ButtonHandle KeyboardButton::backspace(void);

1690 3 tab 0 4 2016 19 KeyboardButton::tab 0 1 731 0
46
static ButtonHandle KeyboardButton::tab(void);

1691 5 enter 0 4 2016 21 KeyboardButton::enter 0 1 732 0
48
static ButtonHandle KeyboardButton::enter(void);

1692 6 escape 0 4 2016 22 KeyboardButton::escape 0 1 733 0
49
static ButtonHandle KeyboardButton::escape(void);

1693 2 f1 0 4 2016 18 KeyboardButton::f1 0 1 734 0
45
static ButtonHandle KeyboardButton::f1(void);

1694 2 f2 0 4 2016 18 KeyboardButton::f2 0 1 735 0
45
static ButtonHandle KeyboardButton::f2(void);

1695 2 f3 0 4 2016 18 KeyboardButton::f3 0 1 736 0
45
static ButtonHandle KeyboardButton::f3(void);

1696 2 f4 0 4 2016 18 KeyboardButton::f4 0 1 737 0
45
static ButtonHandle KeyboardButton::f4(void);

1697 2 f5 0 4 2016 18 KeyboardButton::f5 0 1 738 0
45
static ButtonHandle KeyboardButton::f5(void);

1698 2 f6 0 4 2016 18 KeyboardButton::f6 0 1 739 0
45
static ButtonHandle KeyboardButton::f6(void);

1699 2 f7 0 4 2016 18 KeyboardButton::f7 0 1 740 0
45
static ButtonHandle KeyboardButton::f7(void);

1700 2 f8 0 4 2016 18 KeyboardButton::f8 0 1 741 0
45
static ButtonHandle KeyboardButton::f8(void);

1701 2 f9 0 4 2016 18 KeyboardButton::f9 0 1 742 0
45
static ButtonHandle KeyboardButton::f9(void);

1702 3 f10 0 4 2016 19 KeyboardButton::f10 0 1 743 0
46
static ButtonHandle KeyboardButton::f10(void);

1703 3 f11 0 4 2016 19 KeyboardButton::f11 0 1 744 0
46
static ButtonHandle KeyboardButton::f11(void);

1704 3 f12 0 4 2016 19 KeyboardButton::f12 0 1 745 0
46
static ButtonHandle KeyboardButton::f12(void);

1705 3 f13 0 4 2016 19 KeyboardButton::f13 0 1 746 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1706 3 f14 0 4 2016 19 KeyboardButton::f14 0 1 747 0
46
static ButtonHandle KeyboardButton::f14(void);

1707 3 f15 0 4 2016 19 KeyboardButton::f15 0 1 748 0
46
static ButtonHandle KeyboardButton::f15(void);

1708 3 f16 0 4 2016 19 KeyboardButton::f16 0 1 749 0
46
static ButtonHandle KeyboardButton::f16(void);

1709 4 left 0 4 2016 20 KeyboardButton::left 0 1 750 0
47
static ButtonHandle KeyboardButton::left(void);

1710 5 right 0 4 2016 21 KeyboardButton::right 0 1 751 0
48
static ButtonHandle KeyboardButton::right(void);

1711 2 up 0 4 2016 18 KeyboardButton::up 0 1 752 0
45
static ButtonHandle KeyboardButton::up(void);

1712 4 down 0 4 2016 20 KeyboardButton::down 0 1 753 0
47
static ButtonHandle KeyboardButton::down(void);

1713 7 page_up 0 4 2016 23 KeyboardButton::page_up 0 1 754 0
50
static ButtonHandle KeyboardButton::page_up(void);

1714 9 page_down 0 4 2016 25 KeyboardButton::page_down 0 1 755 0
52
static ButtonHandle KeyboardButton::page_down(void);

1715 4 home 0 4 2016 20 KeyboardButton::home 0 1 756 0
47
static ButtonHandle KeyboardButton::home(void);

1716 3 end 0 4 2016 19 KeyboardButton::end 0 1 757 0
46
static ButtonHandle KeyboardButton::end(void);

1717 6 insert 0 4 2016 22 KeyboardButton::insert 0 1 758 0
49
static ButtonHandle KeyboardButton::insert(void);

1718 3 del 0 4 2016 19 KeyboardButton::del 0 1 759 27
// delete is a C++ keyword.
46
static ButtonHandle KeyboardButton::del(void);

1719 4 help 0 4 2016 20 KeyboardButton::help 0 1 760 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1720 4 menu 0 4 2016 20 KeyboardButton::menu 0 1 761 0
47
static ButtonHandle KeyboardButton::menu(void);

1721 5 shift 0 4 2016 21 KeyboardButton::shift 0 1 762 0
48
static ButtonHandle KeyboardButton::shift(void);

1722 7 control 0 4 2016 23 KeyboardButton::control 0 1 763 0
50
static ButtonHandle KeyboardButton::control(void);

1723 3 alt 0 4 2016 19 KeyboardButton::alt 0 1 764 0
46
static ButtonHandle KeyboardButton::alt(void);

1724 4 meta 0 4 2016 20 KeyboardButton::meta 0 1 765 0
47
static ButtonHandle KeyboardButton::meta(void);

1725 9 caps_lock 0 4 2016 25 KeyboardButton::caps_lock 0 1 766 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1726 10 shift_lock 0 4 2016 26 KeyboardButton::shift_lock 0 1 767 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1727 8 num_lock 0 4 2016 24 KeyboardButton::num_lock 0 1 768 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1728 11 scroll_lock 0 4 2016 27 KeyboardButton::scroll_lock 0 1 769 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1729 12 print_screen 0 4 2016 28 KeyboardButton::print_screen 0 1 770 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1730 5 pause 0 4 2016 21 KeyboardButton::pause 0 1 771 0
48
static ButtonHandle KeyboardButton::pause(void);

1731 6 lshift 0 4 2016 22 KeyboardButton::lshift 0 1 772 0
49
static ButtonHandle KeyboardButton::lshift(void);

1732 6 rshift 0 4 2016 22 KeyboardButton::rshift 0 1 773 0
49
static ButtonHandle KeyboardButton::rshift(void);

1733 8 lcontrol 0 4 2016 24 KeyboardButton::lcontrol 0 1 774 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1734 8 rcontrol 0 4 2016 24 KeyboardButton::rcontrol 0 1 775 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1735 4 lalt 0 4 2016 20 KeyboardButton::lalt 0 1 776 0
47
static ButtonHandle KeyboardButton::lalt(void);

1736 4 ralt 0 4 2016 20 KeyboardButton::ralt 0 1 777 0
47
static ButtonHandle KeyboardButton::ralt(void);

1737 5 lmeta 0 4 2016 21 KeyboardButton::lmeta 0 1 778 0
48
static ButtonHandle KeyboardButton::lmeta(void);

1738 5 rmeta 0 4 2016 21 KeyboardButton::rmeta 0 1 779 0
48
static ButtonHandle KeyboardButton::rmeta(void);

1739 14 KeyboardButton 0 4 2016 30 KeyboardButton::KeyboardButton 0 2 726 727 0
127
inline KeyboardButton::KeyboardButton(void) = default;
inline KeyboardButton::KeyboardButton(KeyboardButton const &) = default;

1740 15 ~KeyboardButton 0 4 2016 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1741 13 load_prc_file 0 1 0 13 load_prc_file 0 1 966 1206
/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */

/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */
52
ConfigPage *load_prc_file(Filename const &filename);

1742 18 load_prc_file_data 0 1 0 18 load_prc_file_data 0 1 967 794
/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */

/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */
81
ConfigPage *load_prc_file_data(std::string const &name, std::string const &data);

1743 15 unload_prc_file 0 1 0 15 unload_prc_file 0 1 968 0
39
bool unload_prc_file(ConfigPage *page);

1744 18 hash_prc_variables 0 1 0 18 hash_prc_variables 0 1 969 0
39
void hash_prc_variables(HashVal &hash);

1745 15 ModifierButtons 0 4 2017 32 ModifierButtons::ModifierButtons 0 2 780 781 22
/**
 *
 */

/**
 *
 */
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1746 16 ~ModifierButtons 0 4 2017 33 ModifierButtons::~ModifierButtons 0 0 10
/**
 *
 */
40
ModifierButtons::~ModifierButtons(void);

1747 10 operator = 0 4 2017 27 ModifierButtons::operator = 0 1 782 0
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1748 11 operator == 0 4 2017 28 ModifierButtons::operator == 0 1 783 0
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1749 11 operator != 0 4 2017 28 ModifierButtons::operator != 0 1 784 0
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1750 10 operator < 0 4 2017 27 ModifierButtons::operator < 0 1 785 0
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1751 10 operator & 0 4 2017 27 ModifierButtons::operator & 0 1 786 0
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1752 10 operator | 0 4 2017 27 ModifierButtons::operator | 0 1 787 0
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1753 11 operator &= 0 4 2017 28 ModifierButtons::operator &= 0 1 788 0
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1754 11 operator |= 0 4 2017 28 ModifierButtons::operator |= 0 1 789 0
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1755 15 set_button_list 0 4 2017 32 ModifierButtons::set_button_list 0 1 790 374
/**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1756 7 matches 0 4 2017 24 ModifierButtons::matches 0 1 791 232
/**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1757 10 add_button 0 4 2017 27 ModifierButtons::add_button 0 1 792 248
/**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */
54
bool ModifierButtons::add_button(ButtonHandle button);

1758 10 has_button 0 4 2017 27 ModifierButtons::has_button 0 1 793 109
/**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1759 13 remove_button 0 4 2017 30 ModifierButtons::remove_button 0 1 794 313
/**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */
57
bool ModifierButtons::remove_button(ButtonHandle button);

1760 15 get_num_buttons 0 4 2017 32 ModifierButtons::get_num_buttons 0 1 795 143
/**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */
56
inline int ModifierButtons::get_num_buttons(void) const;

1761 10 get_button 0 4 2017 27 ModifierButtons::get_button 0 1 796 185
/**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1762 11 button_down 0 4 2017 28 ModifierButtons::button_down 0 1 797 305
/**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
55
bool ModifierButtons::button_down(ButtonHandle button);

1763 9 button_up 0 4 2017 26 ModifierButtons::button_up 0 1 798 306
/**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
53
bool ModifierButtons::button_up(ButtonHandle button);

1764 14 all_buttons_up 0 4 2017 31 ModifierButtons::all_buttons_up 0 1 799 66
/**
 * Marks all monitored buttons as being in the "up" state.
 */
50
inline void ModifierButtons::all_buttons_up(void);

1765 7 is_down 0 4 2017 24 ModifierButtons::is_down 0 2 800 801 264
/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */

/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1766 11 is_any_down 0 4 2017 28 ModifierButtons::is_any_down 0 1 802 109
/**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */
53
inline bool ModifierButtons::is_any_down(void) const;

1767 10 get_prefix 0 4 2017 27 ModifierButtons::get_prefix 0 1 803 150
/**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */
52
std::string ModifierButtons::get_prefix(void) const;

1768 6 output 0 4 2017 23 ModifierButtons::output 0 1 804 69
/**
 * Writes a one-line summary of the buttons known to be down.
 */
54
void ModifierButtons::output(std::ostream &out) const;

1769 5 write 0 4 2017 22 ModifierButtons::write 0 1 805 123
/**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */
53
void ModifierButtons::write(std::ostream &out) const;

1770 6 button 0 4 2018 19 MouseButton::button 0 1 808 166
/**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */
59
static ButtonHandle MouseButton::button(int button_number);

1771 3 one 0 4 2018 16 MouseButton::one 0 1 809 75
/**
 * Returns the ButtonHandle associated with the first mouse button.
 */
43
static ButtonHandle MouseButton::one(void);

1772 3 two 0 4 2018 16 MouseButton::two 0 1 810 76
/**
 * Returns the ButtonHandle associated with the second mouse button.
 */
43
static ButtonHandle MouseButton::two(void);

1773 5 three 0 4 2018 18 MouseButton::three 0 1 811 75
/**
 * Returns the ButtonHandle associated with the third mouse button.
 */
45
static ButtonHandle MouseButton::three(void);

1774 4 four 0 4 2018 17 MouseButton::four 0 1 812 76
/**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */
44
static ButtonHandle MouseButton::four(void);

1775 4 five 0 4 2018 17 MouseButton::five 0 1 813 75
/**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */
44
static ButtonHandle MouseButton::five(void);

1776 8 wheel_up 0 4 2018 21 MouseButton::wheel_up 0 1 814 98
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */
48
static ButtonHandle MouseButton::wheel_up(void);

1777 10 wheel_down 0 4 2018 23 MouseButton::wheel_down 0 1 815 100
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */
50
static ButtonHandle MouseButton::wheel_down(void);

1778 10 wheel_left 0 4 2018 23 MouseButton::wheel_left 0 1 816 148
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
50
static ButtonHandle MouseButton::wheel_left(void);

1779 11 wheel_right 0 4 2018 24 MouseButton::wheel_right 0 1 817 149
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
51
static ButtonHandle MouseButton::wheel_right(void);

1780 15 is_mouse_button 0 4 2018 28 MouseButton::is_mouse_button 0 1 818 117
/**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1781 11 MouseButton 0 4 2018 24 MouseButton::MouseButton 0 2 806 807 0
112
inline MouseButton::MouseButton(void) = default;
inline MouseButton::MouseButton(MouseButton const &) = default;

1782 12 ~MouseButton 0 4 2018 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1783 5 get_x 0 4 2020 18 PointerData::get_x 0 1 821 10
/**
 *
 */
45
inline double PointerData::get_x(void) const;

1784 5 get_y 0 4 2020 18 PointerData::get_y 0 1 822 10
/**
 *
 */
45
inline double PointerData::get_y(void) const;

1785 13 get_in_window 0 4 2020 26 PointerData::get_in_window 0 1 823 157
/**
 * If this returns false, the pointer is not currently present in the window
 * and the values returned by get_x() and get_y() may not be meaningful.
 */
51
inline bool PointerData::get_in_window(void) const;

1786 8 get_type 0 4 2020 21 PointerData::get_type 0 0 47
/**
 * Returns the type of pointing device.
 */
53
inline PointerType PointerData::get_type(void) const;

1787 6 get_id 0 4 2020 19 PointerData::get_id 0 0 273
/**
 * Returns a unique identifier for this pointer.  This is for tracking
 * individual fingers.  This value should not be assumed to have a specific
 * meaning other than that there will not be two different pointers active
 * simultaneously with the same identifier.
 */
43
inline int PointerData::get_id(void) const;

1788 12 get_pressure 0 4 2020 25 PointerData::get_pressure 0 0 119
/**
 * Returns the pressure of the pointer.  For mice, this will be 1.0 if any
 * button is pressed, 0.0 otherwise.
 */
52
inline double PointerData::get_pressure(void) const;

1789 11 PointerData 0 4 2020 24 PointerData::PointerData 0 2 819 820 0
112
inline PointerData::PointerData(void) = default;
inline PointerData::PointerData(PointerData const &) = default;

1790 12 ~PointerData 0 4 2020 25 PointerData::~PointerData 0 0 0
32
PointerData::~PointerData(void);

1791 18 get_node_ref_count 0 4 2022 44 NodeCachedReferenceCount::get_node_ref_count 0 1 824 47
/**
 * Returns the current reference count.
 */
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1792 8 node_ref 0 4 2022 34 NodeCachedReferenceCount::node_ref 0 1 825 349
/**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1793 10 node_unref 0 4 2022 36 NodeCachedReferenceCount::node_unref 0 1 826 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1794 24 test_ref_count_integrity 0 4 2022 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 827 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1795 19 get_referenced_bits 0 4 2022 45 NodeCachedReferenceCount::get_referenced_bits 0 1 828 293
/**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1796 14 get_class_type 0 4 2022 40 NodeCachedReferenceCount::get_class_type 0 1 829 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1797 11 SparseArray 0 4 2024 24 SparseArray::SparseArray 0 3 830 831 832 22
/**
 *
 */

/**
 *
 */
150
inline SparseArray::SparseArray(void);
SparseArray::SparseArray(BitArray const &from);
inline SparseArray::SparseArray(SparseArray const &) = default;

1798 6 all_on 0 4 2024 19 SparseArray::all_on 0 1 833 72
/**
 * Returns a SparseArray with an infinite array of bits, all on.
 */
52
static inline SparseArray SparseArray::all_on(void);

1799 7 all_off 0 4 2024 20 SparseArray::all_off 0 1 834 56
/**
 * Returns a SparseArray whose bits are all off.
 */
53
static inline SparseArray SparseArray::all_off(void);

1800 8 lower_on 0 4 2024 21 SparseArray::lower_on 0 1 835 65
/**
 * Returns a SparseArray whose lower on_bits bits are on.
 */
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1801 3 bit 0 4 2024 16 SparseArray::bit 0 1 836 64
/**
 * Returns a SparseArray with only the indicated bit on.
 */
54
static inline SparseArray SparseArray::bit(int index);

1802 5 range 0 4 2024 18 SparseArray::range 0 1 837 79
/**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1803 16 has_max_num_bits 0 4 2024 29 SparseArray::has_max_num_bits 0 1 838 393
/**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */
55
static inline bool SparseArray::has_max_num_bits(void);

1804 16 get_max_num_bits 0 4 2024 29 SparseArray::get_max_num_bits 0 1 839 428
/**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */
54
static inline int SparseArray::get_max_num_bits(void);

1805 12 get_num_bits 0 4 2024 25 SparseArray::get_num_bits 0 1 840 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
49
inline int SparseArray::get_num_bits(void) const;

1806 7 get_bit 0 4 2024 20 SparseArray::get_bit 0 1 841 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
50
inline bool SparseArray::get_bit(int index) const;

1807 7 set_bit 0 4 2024 20 SparseArray::set_bit 0 1 842 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
44
inline void SparseArray::set_bit(int index);

1808 9 clear_bit 0 4 2024 22 SparseArray::clear_bit 0 1 843 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
46
inline void SparseArray::clear_bit(int index);

1809 10 set_bit_to 0 4 2024 23 SparseArray::set_bit_to 0 1 844 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
59
inline void SparseArray::set_bit_to(int index, bool value);

1810 16 get_highest_bits 0 4 2024 29 SparseArray::get_highest_bits 0 1 845 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
54
inline bool SparseArray::get_highest_bits(void) const;

1811 7 is_zero 0 4 2024 20 SparseArray::is_zero 0 1 846 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
45
inline bool SparseArray::is_zero(void) const;

1812 9 is_all_on 0 4 2024 22 SparseArray::is_all_on 0 1 847 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
47
inline bool SparseArray::is_all_on(void) const;

1813 10 has_any_of 0 4 2024 23 SparseArray::has_any_of 0 1 848 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1814 10 has_all_of 0 4 2024 23 SparseArray::has_all_of 0 1 849 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1815 9 set_range 0 4 2024 22 SparseArray::set_range 0 1 850 47
/**
 * Sets the indicated range of bits on.
 */
58
inline void SparseArray::set_range(int low_bit, int size);

1816 11 clear_range 0 4 2024 24 SparseArray::clear_range 0 1 851 48
/**
 * Sets the indicated range of bits off.
 */
60
inline void SparseArray::clear_range(int low_bit, int size);

1817 12 set_range_to 0 4 2024 25 SparseArray::set_range_to 0 1 852 64
/**
 * Sets the indicated range of bits to either on or off.
 */
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1818 15 get_num_on_bits 0 4 2024 28 SparseArray::get_num_on_bits 0 1 853 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
45
int SparseArray::get_num_on_bits(void) const;

1819 16 get_num_off_bits 0 4 2024 29 SparseArray::get_num_off_bits 0 1 854 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
46
int SparseArray::get_num_off_bits(void) const;

1820 17 get_lowest_on_bit 0 4 2024 30 SparseArray::get_lowest_on_bit 0 1 855 146
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */
47
int SparseArray::get_lowest_on_bit(void) const;

1821 18 get_lowest_off_bit 0 4 2024 31 SparseArray::get_lowest_off_bit 0 1 856 146
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */
48
int SparseArray::get_lowest_off_bit(void) const;

1822 18 get_highest_on_bit 0 4 2024 31 SparseArray::get_highest_on_bit 0 1 857 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
48
int SparseArray::get_highest_on_bit(void) const;

1823 19 get_highest_off_bit 0 4 2024 32 SparseArray::get_highest_off_bit 0 1 858 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
49
int SparseArray::get_highest_off_bit(void) const;

1824 29 get_next_higher_different_bit 0 4 2024 42 SparseArray::get_next_higher_different_bit 0 1 859 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1825 15 invert_in_place 0 4 2024 28 SparseArray::invert_in_place 0 1 860 93
/**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */
47
inline void SparseArray::invert_in_place(void);

1826 18 has_bits_in_common 0 4 2024 31 SparseArray::has_bits_in_common 0 1 861 181
/**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1827 5 clear 0 4 2024 18 SparseArray::clear 0 1 862 52
/**
 * Sets all the bits in the SparseArray off.
 */
37
inline void SparseArray::clear(void);

1828 6 output 0 4 2024 19 SparseArray::output 0 1 863 10
/**
 *
 */
50
void SparseArray::output(std::ostream &out) const;

1829 11 operator == 0 4 2024 24 SparseArray::operator == 0 1 864 0
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1830 11 operator != 0 4 2024 24 SparseArray::operator != 0 1 865 0
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1831 10 operator < 0 4 2024 23 SparseArray::operator < 0 1 866 0
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1832 10 compare_to 0 4 2024 23 SparseArray::compare_to 0 1 867 242
/**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */
60
int SparseArray::compare_to(SparseArray const &other) const;

1833 10 operator & 0 4 2024 23 SparseArray::operator & 0 1 868 0
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1834 10 operator | 0 4 2024 23 SparseArray::operator | 0 1 869 0
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1835 10 operator ^ 0 4 2024 23 SparseArray::operator ^ 0 1 870 0
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1836 10 operator ~ 0 68 2024 23 SparseArray::operator ~ 0 1 871 0
55
inline SparseArray SparseArray::operator ~(void) const;

1837 11 operator << 0 4 2024 24 SparseArray::operator << 0 1 872 0
61
inline SparseArray SparseArray::operator <<(int shift) const;

1838 11 operator >> 0 4 2024 24 SparseArray::operator >> 0 1 873 0
61
inline SparseArray SparseArray::operator >>(int shift) const;

1839 11 operator &= 0 4 2024 24 SparseArray::operator &= 0 1 874 0
56
void SparseArray::operator &=(SparseArray const &other);

1840 11 operator |= 0 4 2024 24 SparseArray::operator |= 0 1 875 0
56
void SparseArray::operator |=(SparseArray const &other);

1841 11 operator ^= 0 4 2024 24 SparseArray::operator ^= 0 1 876 0
56
void SparseArray::operator ^=(SparseArray const &other);

1842 12 operator <<= 0 4 2024 25 SparseArray::operator <<= 0 1 877 0
49
inline void SparseArray::operator <<=(int shift);

1843 12 operator >>= 0 4 2024 25 SparseArray::operator >>= 0 1 878 0
49
inline void SparseArray::operator >>=(int shift);

1844 10 is_inverse 0 4 2024 23 SparseArray::is_inverse 0 1 879 330
/**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */
48
inline bool SparseArray::is_inverse(void) const;

1845 17 get_num_subranges 0 4 2024 30 SparseArray::get_num_subranges 0 1 880 237
/**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */
62
inline std::size_t SparseArray::get_num_subranges(void) const;

1846 18 get_subrange_begin 0 4 2024 31 SparseArray::get_subrange_begin 0 1 881 94
/**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */
64
inline int SparseArray::get_subrange_begin(std::size_t n) const;

1847 16 get_subrange_end 0 4 2024 29 SparseArray::get_subrange_end 0 1 882 104
/**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */
62
inline int SparseArray::get_subrange_end(std::size_t n) const;

1848 8 __bool__ 0 4 2024 21 SparseArray::__bool__ 0 1 883 0
39
bool SparseArray::__bool__(void) const;

1849 12 __getstate__ 0 4 2024 25 SparseArray::__getstate__ 0 1 884 0
48
PyObject *SparseArray::__getstate__(void) const;

1850 12 __setstate__ 0 4 2024 25 SparseArray::__setstate__ 0 1 885 0
48
void SparseArray::__setstate__(PyObject *state);

1851 14 get_class_type 0 4 2024 27 SparseArray::get_class_type 0 1 886 0
52
static TypeHandle SparseArray::get_class_type(void);

1852 12 ~SparseArray 0 4 2024 25 SparseArray::~SparseArray 0 0 0
32
SparseArray::~SparseArray(void);

1853 14 get_value_type 0 6 2025 30 ParamValueBase::get_value_type 0 1 887 52
/**
 * Returns the type of the underlying value.
 */
69
virtual inline TypeHandle ParamValueBase::get_value_type(void) const;

1854 6 output 0 6 2025 22 ParamValueBase::output 0 1 888 0
65
virtual void ParamValueBase::output(std::ostream &out) const = 0;

1855 14 get_class_type 0 4 2025 30 ParamValueBase::get_class_type 0 1 889 0
55
static TypeHandle ParamValueBase::get_class_type(void);

1856 18 ParamTypedRefCount 0 4 2026 38 ParamTypedRefCount::ParamTypedRefCount 0 1 890 10
/**
 *
 */
80
inline ParamTypedRefCount::ParamTypedRefCount(TypedReferenceCount const *value);

1857 9 get_value 0 4 2026 29 ParamTypedRefCount::get_value 0 1 891 55
/**
 * Retrieves the value stored in the parameter.
 */
70
inline TypedReferenceCount *ParamTypedRefCount::get_value(void) const;

1858 14 get_class_type 0 4 2026 34 ParamTypedRefCount::get_class_type 0 1 892 0
59
static TypeHandle ParamTypedRefCount::get_class_type(void);

1859 10 ParamValue 0 4 2028 32 ParamValue< string >::ParamValue 0 1 893 0
66
inline ParamValue< string >::ParamValue(std::string const &value);

1860 9 set_value 0 4 2028 31 ParamValue< string >::set_value 0 1 894 0
134
inline void ParamValue< string >::set_value(std::string const &value);
inline void ParamValue< string >::set_value(Type const &value);

1861 9 get_value 0 4 2028 31 ParamValue< string >::get_value 0 1 895 0
70
inline std::string const &ParamValue< string >::get_value(void) const;

1862 14 get_class_type 0 4 2028 36 ParamValue< string >::get_class_type 0 1 896 0
61
static TypeHandle ParamValue< string >::get_class_type(void);

1863 10 ParamValue 0 4 2031 33 ParamValue< wstring >::ParamValue 0 1 897 0
68
inline ParamValue< wstring >::ParamValue(std::wstring const &value);

1864 9 set_value 0 4 2031 32 ParamValue< wstring >::set_value 0 1 898 0
137
inline void ParamValue< wstring >::set_value(std::wstring const &value);
inline void ParamValue< wstring >::set_value(Type const &value);

1865 9 get_value 0 4 2031 32 ParamValue< wstring >::get_value 0 1 899 0
72
inline std::wstring const &ParamValue< wstring >::get_value(void) const;

1866 14 get_class_type 0 4 2031 37 ParamValue< wstring >::get_class_type 0 1 900 0
62
static TypeHandle ParamValue< wstring >::get_class_type(void);

1867 10 ParamValue 0 4 2033 36 ParamValue< LVecBase2d >::ParamValue 0 1 901 0
69
inline ParamValue< LVecBase2d >::ParamValue(LVecBase2d const &value);

1868 9 set_value 0 4 2033 35 ParamValue< LVecBase2d >::set_value 0 1 902 0
141
inline void ParamValue< LVecBase2d >::set_value(LVecBase2d const &value);
inline void ParamValue< LVecBase2d >::set_value(Type const &value);

1869 9 get_value 0 4 2033 35 ParamValue< LVecBase2d >::get_value 0 1 903 0
73
inline LVecBase2d const &ParamValue< LVecBase2d >::get_value(void) const;

1870 14 get_class_type 0 4 2033 40 ParamValue< LVecBase2d >::get_class_type 0 1 904 0
65
static TypeHandle ParamValue< LVecBase2d >::get_class_type(void);

1871 10 ParamValue 0 4 2035 36 ParamValue< LVecBase2f >::ParamValue 0 1 905 0
69
inline ParamValue< LVecBase2f >::ParamValue(LVecBase2f const &value);

1872 9 set_value 0 4 2035 35 ParamValue< LVecBase2f >::set_value 0 1 906 0
141
inline void ParamValue< LVecBase2f >::set_value(LVecBase2f const &value);
inline void ParamValue< LVecBase2f >::set_value(Type const &value);

1873 9 get_value 0 4 2035 35 ParamValue< LVecBase2f >::get_value 0 1 907 0
73
inline LVecBase2f const &ParamValue< LVecBase2f >::get_value(void) const;

1874 14 get_class_type 0 4 2035 40 ParamValue< LVecBase2f >::get_class_type 0 1 908 0
65
static TypeHandle ParamValue< LVecBase2f >::get_class_type(void);

1875 10 ParamValue 0 4 2037 36 ParamValue< LVecBase2i >::ParamValue 0 1 909 0
69
inline ParamValue< LVecBase2i >::ParamValue(LVecBase2i const &value);

1876 9 set_value 0 4 2037 35 ParamValue< LVecBase2i >::set_value 0 1 910 0
141
inline void ParamValue< LVecBase2i >::set_value(LVecBase2i const &value);
inline void ParamValue< LVecBase2i >::set_value(Type const &value);

1877 9 get_value 0 4 2037 35 ParamValue< LVecBase2i >::get_value 0 1 911 0
73
inline LVecBase2i const &ParamValue< LVecBase2i >::get_value(void) const;

1878 14 get_class_type 0 4 2037 40 ParamValue< LVecBase2i >::get_class_type 0 1 912 0
65
static TypeHandle ParamValue< LVecBase2i >::get_class_type(void);

1879 10 ParamValue 0 4 2039 36 ParamValue< LVecBase3d >::ParamValue 0 1 913 0
69
inline ParamValue< LVecBase3d >::ParamValue(LVecBase3d const &value);

1880 9 set_value 0 4 2039 35 ParamValue< LVecBase3d >::set_value 0 1 914 0
141
inline void ParamValue< LVecBase3d >::set_value(LVecBase3d const &value);
inline void ParamValue< LVecBase3d >::set_value(Type const &value);

1881 9 get_value 0 4 2039 35 ParamValue< LVecBase3d >::get_value 0 1 915 0
73
inline LVecBase3d const &ParamValue< LVecBase3d >::get_value(void) const;

1882 14 get_class_type 0 4 2039 40 ParamValue< LVecBase3d >::get_class_type 0 1 916 0
65
static TypeHandle ParamValue< LVecBase3d >::get_class_type(void);

1883 10 ParamValue 0 4 2041 36 ParamValue< LVecBase3f >::ParamValue 0 1 917 0
69
inline ParamValue< LVecBase3f >::ParamValue(LVecBase3f const &value);

1884 9 set_value 0 4 2041 35 ParamValue< LVecBase3f >::set_value 0 1 918 0
141
inline void ParamValue< LVecBase3f >::set_value(LVecBase3f const &value);
inline void ParamValue< LVecBase3f >::set_value(Type const &value);

1885 9 get_value 0 4 2041 35 ParamValue< LVecBase3f >::get_value 0 1 919 0
73
inline LVecBase3f const &ParamValue< LVecBase3f >::get_value(void) const;

1886 14 get_class_type 0 4 2041 40 ParamValue< LVecBase3f >::get_class_type 0 1 920 0
65
static TypeHandle ParamValue< LVecBase3f >::get_class_type(void);

1887 10 ParamValue 0 4 2043 36 ParamValue< LVecBase3i >::ParamValue 0 1 921 0
69
inline ParamValue< LVecBase3i >::ParamValue(LVecBase3i const &value);

1888 9 set_value 0 4 2043 35 ParamValue< LVecBase3i >::set_value 0 1 922 0
141
inline void ParamValue< LVecBase3i >::set_value(LVecBase3i const &value);
inline void ParamValue< LVecBase3i >::set_value(Type const &value);

1889 9 get_value 0 4 2043 35 ParamValue< LVecBase3i >::get_value 0 1 923 0
73
inline LVecBase3i const &ParamValue< LVecBase3i >::get_value(void) const;

1890 14 get_class_type 0 4 2043 40 ParamValue< LVecBase3i >::get_class_type 0 1 924 0
65
static TypeHandle ParamValue< LVecBase3i >::get_class_type(void);

1891 10 ParamValue 0 4 2045 36 ParamValue< LVecBase4d >::ParamValue 0 1 925 0
69
inline ParamValue< LVecBase4d >::ParamValue(LVecBase4d const &value);

1892 9 set_value 0 4 2045 35 ParamValue< LVecBase4d >::set_value 0 1 926 0
141
inline void ParamValue< LVecBase4d >::set_value(LVecBase4d const &value);
inline void ParamValue< LVecBase4d >::set_value(Type const &value);

1893 9 get_value 0 4 2045 35 ParamValue< LVecBase4d >::get_value 0 1 927 0
73
inline LVecBase4d const &ParamValue< LVecBase4d >::get_value(void) const;

1894 14 get_class_type 0 4 2045 40 ParamValue< LVecBase4d >::get_class_type 0 1 928 0
65
static TypeHandle ParamValue< LVecBase4d >::get_class_type(void);

1895 10 ParamValue 0 4 2047 36 ParamValue< LVecBase4f >::ParamValue 0 1 929 0
69
inline ParamValue< LVecBase4f >::ParamValue(LVecBase4f const &value);

1896 9 set_value 0 4 2047 35 ParamValue< LVecBase4f >::set_value 0 1 930 0
141
inline void ParamValue< LVecBase4f >::set_value(LVecBase4f const &value);
inline void ParamValue< LVecBase4f >::set_value(Type const &value);

1897 9 get_value 0 4 2047 35 ParamValue< LVecBase4f >::get_value 0 1 931 0
73
inline LVecBase4f const &ParamValue< LVecBase4f >::get_value(void) const;

1898 14 get_class_type 0 4 2047 40 ParamValue< LVecBase4f >::get_class_type 0 1 932 0
65
static TypeHandle ParamValue< LVecBase4f >::get_class_type(void);

1899 10 ParamValue 0 4 2049 36 ParamValue< LVecBase4i >::ParamValue 0 1 933 0
69
inline ParamValue< LVecBase4i >::ParamValue(LVecBase4i const &value);

1900 9 set_value 0 4 2049 35 ParamValue< LVecBase4i >::set_value 0 1 934 0
141
inline void ParamValue< LVecBase4i >::set_value(LVecBase4i const &value);
inline void ParamValue< LVecBase4i >::set_value(Type const &value);

1901 9 get_value 0 4 2049 35 ParamValue< LVecBase4i >::get_value 0 1 935 0
73
inline LVecBase4i const &ParamValue< LVecBase4i >::get_value(void) const;

1902 14 get_class_type 0 4 2049 40 ParamValue< LVecBase4i >::get_class_type 0 1 936 0
65
static TypeHandle ParamValue< LVecBase4i >::get_class_type(void);

1903 10 ParamValue 0 4 2051 35 ParamValue< LMatrix3d >::ParamValue 0 1 937 0
67
inline ParamValue< LMatrix3d >::ParamValue(LMatrix3d const &value);

1904 9 set_value 0 4 2051 34 ParamValue< LMatrix3d >::set_value 0 1 938 0
138
inline void ParamValue< LMatrix3d >::set_value(LMatrix3d const &value);
inline void ParamValue< LMatrix3d >::set_value(Type const &value);

1905 9 get_value 0 4 2051 34 ParamValue< LMatrix3d >::get_value 0 1 939 0
71
inline LMatrix3d const &ParamValue< LMatrix3d >::get_value(void) const;

1906 14 get_class_type 0 4 2051 39 ParamValue< LMatrix3d >::get_class_type 0 1 940 0
64
static TypeHandle ParamValue< LMatrix3d >::get_class_type(void);

1907 10 ParamValue 0 4 2053 35 ParamValue< LMatrix3f >::ParamValue 0 1 941 0
67
inline ParamValue< LMatrix3f >::ParamValue(LMatrix3f const &value);

1908 9 set_value 0 4 2053 34 ParamValue< LMatrix3f >::set_value 0 1 942 0
138
inline void ParamValue< LMatrix3f >::set_value(LMatrix3f const &value);
inline void ParamValue< LMatrix3f >::set_value(Type const &value);

1909 9 get_value 0 4 2053 34 ParamValue< LMatrix3f >::get_value 0 1 943 0
71
inline LMatrix3f const &ParamValue< LMatrix3f >::get_value(void) const;

1910 14 get_class_type 0 4 2053 39 ParamValue< LMatrix3f >::get_class_type 0 1 944 0
64
static TypeHandle ParamValue< LMatrix3f >::get_class_type(void);

1911 10 ParamValue 0 4 2055 35 ParamValue< LMatrix4d >::ParamValue 0 1 945 0
67
inline ParamValue< LMatrix4d >::ParamValue(LMatrix4d const &value);

1912 9 set_value 0 4 2055 34 ParamValue< LMatrix4d >::set_value 0 1 946 0
138
inline void ParamValue< LMatrix4d >::set_value(LMatrix4d const &value);
inline void ParamValue< LMatrix4d >::set_value(Type const &value);

1913 9 get_value 0 4 2055 34 ParamValue< LMatrix4d >::get_value 0 1 947 0
71
inline LMatrix4d const &ParamValue< LMatrix4d >::get_value(void) const;

1914 14 get_class_type 0 4 2055 39 ParamValue< LMatrix4d >::get_class_type 0 1 948 0
64
static TypeHandle ParamValue< LMatrix4d >::get_class_type(void);

1915 10 ParamValue 0 4 2057 35 ParamValue< LMatrix4f >::ParamValue 0 1 949 0
67
inline ParamValue< LMatrix4f >::ParamValue(LMatrix4f const &value);

1916 9 set_value 0 4 2057 34 ParamValue< LMatrix4f >::set_value 0 1 950 0
138
inline void ParamValue< LMatrix4f >::set_value(LMatrix4f const &value);
inline void ParamValue< LMatrix4f >::set_value(Type const &value);

1917 9 get_value 0 4 2057 34 ParamValue< LMatrix4f >::get_value 0 1 951 0
71
inline LMatrix4f const &ParamValue< LMatrix4f >::get_value(void) const;

1918 14 get_class_type 0 4 2057 39 ParamValue< LMatrix4f >::get_class_type 0 1 952 0
64
static TypeHandle ParamValue< LMatrix4f >::get_class_type(void);

1919 14 get_class_type 0 4 2064 36 WritableConfigurable::get_class_type 0 1 953 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1920 21 ~WritableConfigurable 0 4 2064 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1921 17 UniqueIdAllocator 0 4 2065 36 UniqueIdAllocator::UniqueIdAllocator 0 1 954 56
/**
 * Create a free id pool in the range [min:max].
 */
83
explicit UniqueIdAllocator::UniqueIdAllocator(uint32_t min = 0, uint32_t max = 20);

1922 18 ~UniqueIdAllocator 0 4 2065 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 10
/**
 *
 */
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1923 8 allocate 0 4 2065 27 UniqueIdAllocator::allocate 0 1 955 134
/**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */
43
uint32_t UniqueIdAllocator::allocate(void);

1924 18 initial_reserve_id 0 4 2065 37 UniqueIdAllocator::initial_reserve_id 0 1 956 518
/**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */
56
void UniqueIdAllocator::initial_reserve_id(uint32_t id);

1925 12 is_allocated 0 4 2065 31 UniqueIdAllocator::is_allocated 0 1 957 119
/**
 * Checks the allocated state of an index. Returns true for
 * indices that are currently allocated and in use.
 */
53
bool UniqueIdAllocator::is_allocated(uint32_t index);

1926 4 free 0 4 2065 23 UniqueIdAllocator::free 0 1 958 278
/**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 *
 * Since 1.11.0, returns true if the index has been freed successfully
 * or false if the index has not been allocated yet, instead of
 * triggering an assertion.
 */
45
bool UniqueIdAllocator::free(uint32_t index);

1927 13 fraction_used 0 4 2065 32 UniqueIdAllocator::fraction_used 0 1 959 117
/**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */
57
PN_stdfloat UniqueIdAllocator::fraction_used(void) const;

1928 6 output 0 4 2065 25 UniqueIdAllocator::output 0 1 960 42
/**
 * ...intended for debugging only.
 */
56
void UniqueIdAllocator::output(std::ostream &out) const;

1929 5 write 0 4 2065 24 UniqueIdAllocator::write 0 1 961 42
/**
 * ...intended for debugging only.
 */
55
void UniqueIdAllocator::write(std::ostream &out) const;

1930 39 py_decode_TypedWritable_from_bam_stream 0 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 970 203
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */
98
PyObject *py_decode_TypedWritable_from_bam_stream(PyObject *this_class, vector_uchar const &data);

1931 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 971 398
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */
127
PyObject *py_decode_TypedWritable_from_bam_stream_persist(PyObject *unpickler, PyObject *this_class, vector_uchar const &data);

971
1 0 0 7 8 2069 987 0 0 1 4 copy 1 2067  
2 0 0 7 8 2069 987 0 0 1 4 copy 1 2070  
3 0 0 4 9 2072 0 0 0 1 4 this 3 2069  
4 0 0 6 10 2073 0 0 0 1 4 this 3 2067  
5 0 0 6 11 2074 0 0 0 2 4 this 3 2067  1 n 1 2073  
6 0 0 6 12 2074 0 0 0 2 4 this 3 2067  1 n 1 2073  
7 0 0 6 13 1968 0 0 0 1 4 this 3 2067  
8 0 0 6 14 1968 0 0 0 3 4 this 3 2067  1 n 1 2073  5 count 1 2073  
9 0 0 6 15 1939 0 0 0 1 4 this 3 2067  
10 0 0 6 16 1939 0 0 0 1 4 this 3 2067  
11 0 0 6 17 2073 0 0 0 2 4 this 3 2067  6 param0 0 2074  
12 0 0 6 18 1939 0 0 0 3 4 this 3 2067  4 view 1 2076  5 flags 1 1939  
13 0 0 4 19 2072 0 0 0 2 4 this 3 2067  4 view 1 2076  
14 0 0 4 5 2072 0 0 0 1 4 this 3 2079  
15 0 0 4 6 2072 0 0 0 2 4 this 3 2080  3 out 1 2082  
16 0 0 7 22 2083 1007 0 0 1 4 copy 1 2070  
17 0 0 7 22 2083 1007 0 0 1 6 source 1 1968  
18 0 0 7 22 2083 1007 0 0 1 11 type_handle 1 2084  
19 0 0 7 23 2083 1007 0 0 2 1 n 1 2073  11 type_handle 1 2084  
20 0 0 4 24 2072 0 0 0 1 4 this 3 2083  
21 0 0 6 25 2073 0 0 0 1 4 this 3 2070  
22 0 0 4 26 2072 0 0 0 2 4 this 3 2083  1 x 1 2074  
23 0 0 4 27 2072 0 0 0 1 4 this 3 2083  
24 0 0 6 28 2074 0 0 0 2 4 this 3 2070  1 n 1 2073  
25 0 0 4 29 2072 0 0 0 3 4 this 3 2083  1 n 1 2073  5 value 1 2074  
26 0 0 6 30 2074 0 0 0 2 4 this 3 2070  1 n 1 2073  
27 0 0 4 31 2072 0 0 0 3 4 this 3 2083  1 n 1 2073  5 value 1 2074  
28 0 0 6 32 1968 0 0 0 1 4 this 3 2070  
29 0 0 4 33 2072 0 0 0 2 4 this 3 2083  4 data 1 1968  
30 0 0 6 34 1968 0 0 0 3 4 this 3 2070  1 n 1 2073  5 count 1 2073  
31 0 0 4 35 2072 0 0 0 4 4 this 3 2083  1 n 1 2073  5 count 1 2073  4 data 1 2086  
32 0 0 6 36 1939 0 0 0 1 4 this 3 2070  
33 0 0 6 37 1939 0 0 0 1 4 this 3 2070  
34 0 0 6 38 2073 0 0 0 2 4 this 3 2070  6 param0 0 2074  
35 0 0 6 39 1939 0 0 0 3 4 this 3 2083  4 view 1 2076  5 flags 1 1939  
36 0 0 4 40 2072 0 0 0 2 4 this 3 2070  4 view 1 2076  
37 0 0 4 44 2072 0 0 69 /**
 * Runs the entire animation from beginning to end and stops.
 */ 1 4 this 3 2087  
38 0 0 4 44 2072 0 0 406 /**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */ 3 4 this 3 2087  4 from 1 1938  2 to 1 1938  
39 0 0 4 45 2072 0 0 169 /**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */ 2 4 this 3 2087  7 restart 1 1940  
40 0 0 4 45 2072 0 0 221 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 4 4 this 3 2087  7 restart 1 1940  4 from 1 1938  2 to 1 1938  
41 0 0 4 46 2072 0 0 224 /**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 2 4 this 3 2087  7 restart 1 1940  
42 0 0 4 46 2072 0 0 143 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */ 4 4 this 3 2087  7 restart 1 1940  4 from 1 1938  2 to 1 1938  
43 0 0 4 47 2072 0 0 130 /**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */ 1 4 this 3 2087  
44 0 0 4 48 2072 0 0 72 /**
 * Sets the animation to the indicated frame and holds it there.
 */ 2 4 this 3 2087  5 frame 1 1938  
45 0 0 4 49 2072 0 0 243 /**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */ 2 4 this 3 2087  9 play_rate 1 1938  
46 0 0 6 50 1938 0 0 79 /**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */ 1 4 this 3 2088  
47 0 0 6 51 1938 0 0 234 /**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */ 1 4 this 3 2088  
48 0 0 6 52 1939 0 0 278 /**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */ 1 4 this 3 2088  
49 0 0 6 53 1939 0 0 116 /**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */ 1 4 this 3 2088  
50 0 0 6 54 1939 0 0 330 /**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */ 1 4 this 3 2088  
51 0 0 6 55 1938 0 0 314 /**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */ 1 4 this 3 2088  
52 0 0 6 56 1939 0 0 372 /**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */ 1 4 this 3 2088  
53 0 0 6 57 1938 0 0 490 /**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */ 1 4 this 3 2088  
54 0 0 6 58 1940 0 0 208 /**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */ 1 4 this 3 2088  
55 0 0 4 59 2072 0 0 10 /**
 *
 */ 2 4 this 3 2088  3 out 1 2082  
56 0 0 7 72 2084 0 0 0 0 
57 0 0 7 75 2090 1046 0 55 /**
 * Creates an UpdateSeq in the 'initial' state.
 */ 0 
58 0 0 7 75 2090 1046 0 10 /**
 *
 */ 1 4 copy 1 2091  
59 0 0 7 76 2090 1046 0 0 0 
60 0 0 7 77 2090 1046 0 0 0 
61 0 0 7 78 2090 1046 0 0 0 
62 0 0 6 79 2090 0 0 10 /**
 *
 */ 2 4 this 3 2090  4 copy 1 2091  
63 0 0 4 80 2072 0 0 55 /**
 * Resets the UpdateSeq to the 'initial' state.
 */ 1 4 this 3 2090  
64 0 0 6 81 1940 0 0 67 /**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */ 1 4 this 3 2091  
65 0 0 6 82 1940 0 0 63 /**
 * Returns true if the UpdateSeq is in the 'old' state.
 */ 1 4 this 3 2091  
66 0 0 6 83 1940 0 0 65 /**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */ 1 4 this 3 2091  
67 0 0 6 84 1940 0 0 105 /**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */ 1 4 this 3 2091  
68 0 0 6 85 1940 0 0 0 2 4 this 3 2091  5 other 1 2091  
69 0 0 6 86 1940 0 0 0 2 4 this 3 2091  5 other 1 2091  
70 0 0 6 87 1940 0 0 0 2 4 this 3 2091  5 other 1 2091  
71 0 0 6 88 1940 0 0 0 2 4 this 3 2091  5 other 1 2091  
72 0 0 6 89 1940 0 0 0 2 4 this 3 2091  5 other 1 2091  
73 0 0 6 90 1940 0 0 0 2 4 this 3 2091  5 other 1 2091  
74 0 0 7 91 2090 1046 0 0 1 4 this 3 2090  
75 0 0 7 92 2090 1046 0 0 2 4 this 3 2090  6 param0 0 1939  
76 0 0 6 93 1943 0 0 107 /**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */ 1 4 this 3 2091  
77 0 0 4 98 2072 0 0 10 /**
 *
 */ 2 4 this 3 2091  3 out 1 2082  
78 0 0 4 102 2072 0 0 308 /**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */ 3 4 this 3 1955  4 scan 1 2093  7 manager 1 2095  
79 0 0 4 103 2072 0 0 345 /**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */ 1 4 this 3 1955  
80 0 0 7 104 2090 1046 0 140 /**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */ 1 4 this 3 2096  
81 0 0 6 105 1968 0 0 0 1 4 this 3 2096  
82 0 0 6 106 1968 0 0 0 2 4 this 3 2096  7 pickler 1 1968  
83 0 0 6 107 2005 0 0 423 /**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a bytes object.  Returns an empty bytes
 * object on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */ 1 4 this 3 2096  
84 0 0 6 107 1940 0 0 429 /**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and stores that data in the indicated string.  Returns true on
 * success, false on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */ 3 4 this 3 2096  4 data 1 2098  6 writer 1 2099  
85 0 0 7 109 2084 0 0 0 0 
86 0 0 7 116 2100 1061 0 491 /**
 * Reads the bytes created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on those bytes.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */ 2 4 data 1 2005  6 reader 1 2095  
87 0 0 7 117 2084 0 0 0 0 
88 0 0 6 111 1955 0 0 0 1 4 this 3 2100  
89 0 0 7 114 2101 0 0 0 1 4 this 3 2100  
90 0 0 7 126 2104 1066 0 179 /**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */ 1 4 this 3 2102  
91 0 0 6 127 1940 0 0 0 2 4 this 3 2102  5 other 1 2102  
92 0 0 6 128 2105 0 0 237 /**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */ 1 4 this 3 2102  
93 0 0 6 129 2105 0 0 230 /**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */ 1 4 this 3 2102  
94 0 0 6 130 1954 0 0 204 /**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */ 1 4 this 3 2102  
95 0 0 6 131 1954 0 0 84 /**
 * Returns the time at which this particular record was recorded or updated.
 */ 1 4 this 3 2102  
96 0 0 6 139 1939 0 0 75 /**
 * Returns the number of source files that contribute to the cache.
 */ 1 4 this 3 2102  
97 0 0 6 140 2105 0 0 94 /**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */ 2 4 this 3 2102  1 n 1 1939  
98 0 0 6 141 1940 0 0 124 /**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */ 1 4 this 3 2102  
99 0 0 4 142 2072 0 0 80 /**
 * Empties the list of files that contribute to the data in this record.
 */ 1 4 this 3 2104  
100 0 0 4 143 2072 0 0 225 /**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */ 2 4 this 3 2104  8 pathname 1 2105  
101 0 0 4 143 2072 0 0 82 /**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */ 2 4 this 3 2104  4 file 1 2106  
102 0 0 6 144 1940 0 0 130 /**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */ 1 4 this 3 2102  
103 0 0 4 145 2072 0 0 147 /**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */ 1 4 this 3 2104  
104 0 0 6 146 1955 0 0 139 /**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */ 1 4 this 3 2102  
105 0 0 4 148 2072 0 0 104 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */ 2 4 this 3 2104  3 ptr 1 1955  
106 0 0 4 148 2072 0 0 573 /**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */ 3 4 this 3 2104  3 ptr 1 1955  7 ref_ptr 1 2101  
107 0 0 4 148 2072 0 0 115 /**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */ 3 4 this 3 2104  3 ptr 1 1955  5 dummy 1 1939  
108 0 0 4 148 2072 0 0 118 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */ 2 4 this 3 2104  3 ptr 1 2100  
109 0 0 4 151 2072 0 0 10 /**
 *
 */ 2 4 this 3 2102  3 out 1 2082  
110 0 0 4 152 2072 0 0 10 /**
 *
 */ 3 4 this 3 2102  3 out 1 2082  12 indent_level 1 1939  
111 0 0 7 153 2084 0 0 0 0 
112 0 0 7 120 2100 1061 0 0 1 4 this 3 2104  
113 0 0 7 155 2109 1087 0 10 /**
 *
 */ 0 
114 0 0 4 157 2072 0 0 347 /**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 2 4 this 3 2109  4 flag 1 1940  
115 0 0 6 158 1940 0 0 381 /**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 1 4 this 3 2110  
116 0 0 4 159 2072 0 0 118 /**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */ 2 4 this 3 2109  4 flag 1 1940  
117 0 0 6 160 1940 0 0 172 /**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 2110  
118 0 0 4 161 2072 0 0 101 /**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */ 2 4 this 3 2109  4 flag 1 1940  
119 0 0 6 162 1940 0 0 174 /**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 2110  
120 0 0 4 163 2072 0 0 722 /**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */ 2 4 this 3 2109  4 flag 1 1940  
121 0 0 6 164 1940 0 0 202 /**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 2110  
122 0 0 4 165 2072 0 0 184 /**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */ 2 4 this 3 2109  4 flag 1 1940  
123 0 0 6 166 1940 0 0 196 /**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 2110  
124 0 0 4 167 2072 0 0 372 /**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */ 2 4 this 3 2109  4 root 1 2105  
125 0 0 7 168 2112 0 0 75 /**
 * Returns the current root pathname of the cache.  See set_root().
 */ 1 4 this 3 2110  
126 0 0 4 169 2072 0 0 86 /**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */ 2 4 this 3 2109  10 flush_time 1 1939  
127 0 0 6 170 1939 0 0 84 /**
 * Returns the time in seconds between automatic flushes of the cache index.
 */ 1 4 this 3 2110  
128 0 0 4 171 2072 0 0 430 /**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */ 2 4 this 3 2109  10 max_kbytes 1 1939  
129 0 0 6 172 1939 0 0 121 /**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */ 1 4 this 3 2110  
130 0 0 4 173 2072 0 0 252 /**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */ 2 4 this 3 2109  2 ro 1 1940  
131 0 0 6 174 1940 0 0 230 /**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */ 1 4 this 3 2110  
132 0 0 7 175 2104 1066 0 782 /**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */ 3 4 this 3 2109  15 source_filename 1 2105  15 cache_extension 1 2086  
133 0 0 6 176 1940 0 0 212 /**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */ 2 4 this 3 2109  6 record 1 2104  
134 0 0 4 177 2072 0 0 92 /**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */ 1 4 this 3 2109  
135 0 0 4 178 2072 0 0 48 /**
 * Ensures the index is written to disk.
 */ 1 4 this 3 2109  
136 0 0 4 179 2072 0 0 63 /**
 * Writes the contents of the index to standard output.
 */ 3 4 this 3 2110  3 out 1 2082  12 indent_level 1 1939  
137 0 0 6 180 2109 0 0 124 /**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */ 0 
138 0 0 4 181 2072 0 0 84 /**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */ 0 
139 0 0 4 182 2072 0 0 75 /**
 * If there is a global BamCache object, calls flush_index() on it.
 */ 0 
140 0 0 7 196 2113 1115 0 0 0 
141 0 0 7 196 2113 1115 0 0 1 6 param0 0 2114  
142 0 0 7 201 2117 1126 0 0 1 6 param0 0 2116  
143 0 0 7 201 2117 1126 0 10 /**
 *
 */ 1 5 flags 1 1939  
144 0 0 7 201 2117 1126 0 10 /**
 *
 */ 2 5 flags 1 1939  13 texture_flags 1 1939  
145 0 0 4 202 2072 0 0 10 /**
 *
 */ 2 4 this 3 2117  5 flags 1 1939  
146 0 0 6 203 1939 0 0 10 /**
 *
 */ 1 4 this 3 2116  
147 0 0 4 205 2072 0 0 10 /**
 *
 */ 2 4 this 3 2117  5 flags 1 1939  
148 0 0 6 206 1939 0 0 10 /**
 *
 */ 1 4 this 3 2116  
149 0 0 4 207 2072 0 0 459 /**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */ 2 4 this 3 2117  9 num_views 1 1939  
150 0 0 6 208 1939 0 0 39 /**
 * See set_texture_num_views().
 */ 1 4 this 3 2116  
151 0 0 4 211 2072 0 0 209 /**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */ 2 4 this 3 2117  5 scale 1 1941  
152 0 0 6 212 1941 0 0 40 /**
 * See set_auto_texture_scale().
 */ 1 4 this 3 2116  
153 0 0 4 214 2072 0 0 10 /**
 *
 */ 2 4 this 3 2116  3 out 1 2082  
154 0 0 7 217 2095 1128 0 38 // The primary interface for a caller. 1 6 source 1 1965  
155 0 0 4 219 2072 0 0 142 /**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */ 2 4 this 3 2095  6 source 1 1965  
156 0 0 6 220 1965 0 0 100 /**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */ 1 4 this 3 2095  
157 0 0 6 221 1940 0 0 210 /**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */ 1 4 this 3 2095  
158 0 0 4 222 2072 0 0 1007 /**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */ 4 4 this 3 2095  3 obj 1 1955  4 name 1 2086  4 data 1 2118  
159 0 0 7 223 2118 0 0 173 /**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */ 3 4 this 3 2120  3 obj 1 1955  4 name 1 2086  
160 0 0 6 224 2105 0 0 199 /**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */ 1 4 this 3 2120  
161 0 0 6 225 2116 0 0 98 /**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */ 1 4 this 3 2120  
162 0 0 4 226 2072 0 0 58 /**
 * Specifies the LoaderOptions for this BamReader.
 */ 2 4 this 3 2095  7 options 1 2116  
163 0 0 6 227 1955 0 0 1059 /**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */ 1 4 this 3 2095  
164 0 0 6 228 1940 0 0 138 /**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */ 1 4 this 3 2120  
165 0 0 6 229 1940 0 0 565 /**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */ 1 4 this 3 2095  
166 0 0 6 230 1940 0 0 406 /**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */ 3 4 this 3 2095  12 orig_pointer 1 2096  11 new_pointer 1 2096  
167 0 0 6 231 1939 0 0 81 /**
 * Returns the major version number of the Bam file currently being read.
 */ 1 4 this 3 2120  
168 0 0 6 232 1939 0 0 81 /**
 * Returns the minor version number of the Bam file currently being read.
 */ 1 4 this 3 2120  
169 0 0 6 233 1958 0 0 254 /**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */ 1 4 this 3 2120  
170 0 0 6 234 1940 0 0 220 /**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */ 1 4 this 3 2120  
171 0 0 6 235 1939 0 0 174 /**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */ 1 4 this 3 2120  
172 0 0 6 236 1939 0 0 184 /**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */ 1 4 this 3 2120  
173 0 0 6 237 1968 0 0 0 1 4 this 3 2120  
174 0 0 4 250 2072 0 0 0 2 6 handle 1 2084  4 func 1 1968  
175 0 0 7 252 2099 1150 0 0 1 6 param0 0 2122  
176 0 0 7 252 2099 1150 0 10 /**
 *
 */ 1 6 target 1 1972  
177 0 0 4 254 2072 0 0 153 /**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */ 2 4 this 3 2099  6 target 1 1972  
178 0 0 6 255 1972 0 0 100 /**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */ 1 4 this 3 2099  
179 0 0 6 256 1940 0 0 220 /**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */ 1 4 this 3 2099  
180 0 0 6 257 2105 0 0 197 /**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */ 1 4 this 3 2122  
181 0 0 6 258 1940 0 0 736 /**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */ 2 4 this 3 2099  3 obj 1 2096  
182 0 0 6 259 1940 0 0 170 /**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */ 2 4 this 3 2122  3 obj 1 2096  
183 0 0 4 260 2072 0 0 85 /**
 * Ensures that all data written thus far is manifested on the output stream.
 */ 1 4 this 3 2099  
184 0 0 6 261 1939 0 0 84 /**
 * Returns the major version number of the Bam file currently being written.
 */ 1 4 this 3 2122  
185 0 0 6 262 1939 0 0 84 /**
 * Returns the minor version number of the Bam file currently being written.
 */ 1 4 this 3 2122  
186 0 0 4 263 2072 0 0 232 /**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */ 2 4 this 3 2099  9 minor_ver 1 1939  
187 0 0 6 264 1958 0 0 257 /**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */ 1 4 this 3 2122  
188 0 0 6 265 1940 0 0 248 /**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */ 1 4 this 3 2122  
189 0 0 6 266 1960 0 0 196 /**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 1 4 this 3 2122  
190 0 0 4 267 2072 0 0 187 /**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 2 4 this 3 2099  17 file_texture_mode 1 1960  
191 0 0 6 268 1955 0 0 165 /**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */ 1 4 this 3 2122  
192 0 0 4 269 2072 0 0 160 /**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */ 2 4 this 3 2099  9 root_node 1 1955  
193 0 0 7 279 2124 1231 0 0 0 
194 0 0 7 279 2124 1231 0 0 1 6 param0 0 2125  
195 0 0 7 279 2124 1231 0 0 1 10 init_value 1 2127  
196 0 0 7 280 2124 1231 0 0 0 
197 0 0 7 281 2124 1231 0 0 0 
198 0 0 7 282 2124 1231 0 0 1 7 on_bits 1 1939  
199 0 0 7 283 2124 1231 0 0 1 5 index 1 1939  
200 0 0 7 284 2124 1231 0 0 2 7 low_bit 1 1939  4 size 1 1939  
201 0 0 6 285 1940 0 0 0 0 
202 0 0 6 286 1939 0 0 0 0 
203 0 0 6 287 1939 0 0 0 1 4 this 3 2125  
204 0 0 6 288 1940 0 0 0 2 4 this 3 2125  5 index 1 1939  
205 0 0 4 289 2072 0 0 0 2 4 this 3 2124  5 index 1 1939  
206 0 0 4 290 2072 0 0 0 2 4 this 3 2124  5 index 1 1939  
207 0 0 4 291 2072 0 0 0 3 4 this 3 2124  5 index 1 1939  5 value 1 1940  
208 0 0 6 292 1940 0 0 0 1 4 this 3 2125  
209 0 0 6 293 1940 0 0 0 1 4 this 3 2125  
210 0 0 6 294 2127 0 0 0 3 4 this 3 2125  7 low_bit 1 1939  4 size 1 1939  
211 0 0 4 295 2072 0 0 0 4 4 this 3 2124  5 value 1 2127  7 low_bit 1 1939  4 size 1 1939  
212 0 0 6 296 1940 0 0 0 3 4 this 3 2125  7 low_bit 1 1939  4 size 1 1939  
213 0 0 6 297 1940 0 0 0 3 4 this 3 2125  7 low_bit 1 1939  4 size 1 1939  
214 0 0 4 298 2072 0 0 0 3 4 this 3 2124  7 low_bit 1 1939  4 size 1 1939  
215 0 0 4 299 2072 0 0 0 3 4 this 3 2124  7 low_bit 1 1939  4 size 1 1939  
216 0 0 4 300 2072 0 0 0 4 4 this 3 2124  5 value 1 1940  7 low_bit 1 1939  4 size 1 1939  
217 0 0 6 301 2127 0 0 0 1 4 this 3 2125  
218 0 0 4 302 2072 0 0 0 2 4 this 3 2124  5 value 1 2127  
219 0 0 6 303 1939 0 0 0 1 4 this 3 2125  
220 0 0 6 304 1939 0 0 0 1 4 this 3 2125  
221 0 0 6 305 1939 0 0 0 1 4 this 3 2125  
222 0 0 6 306 1939 0 0 0 1 4 this 3 2125  
223 0 0 6 307 1939 0 0 0 1 4 this 3 2125  
224 0 0 6 308 1939 0 0 0 1 4 this 3 2125  
225 0 0 6 309 1939 0 0 0 2 4 this 3 2125  7 low_bit 1 1939  
226 0 0 4 310 2072 0 0 0 1 4 this 3 2124  
227 0 0 6 311 1940 0 0 0 2 4 this 3 2125  5 other 1 2125  
228 0 0 4 312 2072 0 0 0 1 4 this 3 2124  
229 0 0 4 313 2072 0 0 0 2 4 this 3 2125  3 out 1 2082  
230 0 0 4 314 2072 0 0 0 3 4 this 3 2125  3 out 1 2082  12 spaces_every 1 1939  
231 0 0 4 315 2072 0 0 0 3 4 this 3 2125  3 out 1 2082  12 spaces_every 1 1939  
232 0 0 4 316 2072 0 0 0 3 4 this 3 2125  3 out 1 2082  12 indent_level 1 1939  
233 0 0 6 317 1940 0 0 0 2 4 this 3 2125  5 other 1 2125  
234 0 0 6 318 1940 0 0 0 2 4 this 3 2125  5 other 1 2125  
235 0 0 6 319 1940 0 0 0 2 4 this 3 2125  5 other 1 2125  
236 0 0 6 320 1939 0 0 0 2 4 this 3 2125  5 other 1 2125  
237 0 0 7 321 2124 1231 0 0 2 4 this 3 2125  5 other 1 2125  
238 0 0 7 322 2124 1231 0 0 2 4 this 3 2125  5 other 1 2125  
239 0 0 7 323 2124 1231 0 0 2 4 this 3 2125  5 other 1 2125  
240 0 0 7 324 2124 1231 0 0 1 4 this 3 2125  
241 0 0 7 325 2124 1231 0 0 2 4 this 3 2125  5 shift 1 1939  
242 0 0 7 326 2124 1231 0 0 2 4 this 3 2125  5 shift 1 1939  
243 0 0 6 327 2124 0 0 0 2 4 this 3 2124  5 other 1 2125  
244 0 0 6 328 2124 0 0 0 2 4 this 3 2124  5 other 1 2125  
245 0 0 6 329 2124 0 0 0 2 4 this 3 2124  5 other 1 2125  
246 0 0 6 330 2124 0 0 0 2 4 this 3 2124  5 shift 1 1939  
247 0 0 6 331 2124 0 0 0 2 4 this 3 2124  5 shift 1 1939  
248 0 0 4 332 2072 0 0 0 1 4 this 3 2124  
249 0 0 4 333 2072 0 0 0 1 4 this 3 2124  
250 0 0 7 334 2124 1231 0 0 1 4 this 3 2125  
251 0 0 7 335 2124 1231 0 0 1 4 this 3 2125  
252 0 0 7 336 2124 1231 0 0 1 4 this 3 2125  
253 0 0 7 336 2124 1231 0 0 2 4 this 3 2125  5 other 1 2125  
254 0 0 7 336 2124 1231 0 0 2 4 this 3 2125  5 index 1 1939  
255 0 0 7 337 2124 1231 0 0 1 4 this 3 2125  
256 0 0 7 337 2124 1231 0 0 2 4 this 3 2125  5 other 1 2125  
257 0 0 7 337 2124 1231 0 0 2 4 this 3 2125  5 index 1 1939  
258 0 0 6 338 1939 0 0 0 1 4 this 3 2125  
259 0 0 6 339 1940 0 0 0 1 4 this 3 2125  
260 0 0 6 340 1968 0 0 0 1 4 this 3 2125  
261 0 0 6 341 1968 0 0 0 1 4 this 3 2125  
262 0 0 7 342 2084 0 0 0 0 
263 0 0 7 346 2128 1296 0 0 0 
264 0 0 7 346 2128 1296 0 0 1 6 param0 0 2129  
265 0 0 7 346 2128 1296 0 0 1 10 init_value 1 2131  
266 0 0 7 347 2128 1296 0 0 0 
267 0 0 7 348 2128 1296 0 0 0 
268 0 0 7 349 2128 1296 0 0 1 7 on_bits 1 1939  
269 0 0 7 350 2128 1296 0 0 1 5 index 1 1939  
270 0 0 7 351 2128 1296 0 0 2 7 low_bit 1 1939  4 size 1 1939  
271 0 0 6 352 1940 0 0 0 0 
272 0 0 6 353 1939 0 0 0 0 
273 0 0 6 354 1939 0 0 0 1 4 this 3 2129  
274 0 0 6 355 1940 0 0 0 2 4 this 3 2129  5 index 1 1939  
275 0 0 4 356 2072 0 0 0 2 4 this 3 2128  5 index 1 1939  
276 0 0 4 357 2072 0 0 0 2 4 this 3 2128  5 index 1 1939  
277 0 0 4 358 2072 0 0 0 3 4 this 3 2128  5 index 1 1939  5 value 1 1940  
278 0 0 6 359 1940 0 0 0 1 4 this 3 2129  
279 0 0 6 360 1940 0 0 0 1 4 this 3 2129  
280 0 0 6 361 2131 0 0 0 3 4 this 3 2129  7 low_bit 1 1939  4 size 1 1939  
281 0 0 4 362 2072 0 0 0 4 4 this 3 2128  5 value 1 2131  7 low_bit 1 1939  4 size 1 1939  
282 0 0 6 363 1940 0 0 0 3 4 this 3 2129  7 low_bit 1 1939  4 size 1 1939  
283 0 0 6 364 1940 0 0 0 3 4 this 3 2129  7 low_bit 1 1939  4 size 1 1939  
284 0 0 4 365 2072 0 0 0 3 4 this 3 2128  7 low_bit 1 1939  4 size 1 1939  
285 0 0 4 366 2072 0 0 0 3 4 this 3 2128  7 low_bit 1 1939  4 size 1 1939  
286 0 0 4 367 2072 0 0 0 4 4 this 3 2128  5 value 1 1940  7 low_bit 1 1939  4 size 1 1939  
287 0 0 6 368 2131 0 0 0 1 4 this 3 2129  
288 0 0 4 369 2072 0 0 0 2 4 this 3 2128  5 value 1 2131  
289 0 0 6 370 1939 0 0 0 1 4 this 3 2129  
290 0 0 6 371 1939 0 0 0 1 4 this 3 2129  
291 0 0 6 372 1939 0 0 0 1 4 this 3 2129  
292 0 0 6 373 1939 0 0 0 1 4 this 3 2129  
293 0 0 6 374 1939 0 0 0 1 4 this 3 2129  
294 0 0 6 375 1939 0 0 0 1 4 this 3 2129  
295 0 0 6 376 1939 0 0 0 2 4 this 3 2129  7 low_bit 1 1939  
296 0 0 4 377 2072 0 0 0 1 4 this 3 2128  
297 0 0 6 378 1940 0 0 0 2 4 this 3 2129  5 other 1 2129  
298 0 0 4 379 2072 0 0 0 1 4 this 3 2128  
299 0 0 4 380 2072 0 0 0 2 4 this 3 2129  3 out 1 2082  
300 0 0 4 381 2072 0 0 0 3 4 this 3 2129  3 out 1 2082  12 spaces_every 1 1939  
301 0 0 4 382 2072 0 0 0 3 4 this 3 2129  3 out 1 2082  12 spaces_every 1 1939  
302 0 0 4 383 2072 0 0 0 3 4 this 3 2129  3 out 1 2082  12 indent_level 1 1939  
303 0 0 6 384 1940 0 0 0 2 4 this 3 2129  5 other 1 2129  
304 0 0 6 385 1940 0 0 0 2 4 this 3 2129  5 other 1 2129  
305 0 0 6 386 1940 0 0 0 2 4 this 3 2129  5 other 1 2129  
306 0 0 6 387 1939 0 0 0 2 4 this 3 2129  5 other 1 2129  
307 0 0 7 388 2128 1296 0 0 2 4 this 3 2129  5 other 1 2129  
308 0 0 7 389 2128 1296 0 0 2 4 this 3 2129  5 other 1 2129  
309 0 0 7 390 2128 1296 0 0 2 4 this 3 2129  5 other 1 2129  
310 0 0 7 391 2128 1296 0 0 1 4 this 3 2129  
311 0 0 7 392 2128 1296 0 0 2 4 this 3 2129  5 shift 1 1939  
312 0 0 7 393 2128 1296 0 0 2 4 this 3 2129  5 shift 1 1939  
313 0 0 6 394 2128 0 0 0 2 4 this 3 2128  5 other 1 2129  
314 0 0 6 395 2128 0 0 0 2 4 this 3 2128  5 other 1 2129  
315 0 0 6 396 2128 0 0 0 2 4 this 3 2128  5 other 1 2129  
316 0 0 6 397 2128 0 0 0 2 4 this 3 2128  5 shift 1 1939  
317 0 0 6 398 2128 0 0 0 2 4 this 3 2128  5 shift 1 1939  
318 0 0 4 399 2072 0 0 0 1 4 this 3 2128  
319 0 0 4 400 2072 0 0 0 1 4 this 3 2128  
320 0 0 7 401 2128 1296 0 0 1 4 this 3 2129  
321 0 0 7 402 2128 1296 0 0 1 4 this 3 2129  
322 0 0 7 403 2128 1296 0 0 1 4 this 3 2129  
323 0 0 7 403 2128 1296 0 0 2 4 this 3 2129  5 other 1 2129  
324 0 0 7 403 2128 1296 0 0 2 4 this 3 2129  5 index 1 1939  
325 0 0 7 404 2128 1296 0 0 1 4 this 3 2129  
326 0 0 7 404 2128 1296 0 0 2 4 this 3 2129  5 other 1 2129  
327 0 0 7 404 2128 1296 0 0 2 4 this 3 2129  5 index 1 1939  
328 0 0 6 405 1939 0 0 0 1 4 this 3 2129  
329 0 0 6 406 1940 0 0 0 1 4 this 3 2129  
330 0 0 6 407 1968 0 0 0 1 4 this 3 2129  
331 0 0 6 408 1968 0 0 0 1 4 this 3 2129  
332 0 0 7 409 2084 0 0 0 0 
333 0 0 7 413 2133 1361 0 0 0 
334 0 0 7 413 2133 1361 0 0 1 6 param0 0 2134  
335 0 0 7 413 2133 1361 0 0 1 10 init_value 1 2136  
336 0 0 7 414 2133 1361 0 0 0 
337 0 0 7 415 2133 1361 0 0 0 
338 0 0 7 416 2133 1361 0 0 1 7 on_bits 1 1939  
339 0 0 7 417 2133 1361 0 0 1 5 index 1 1939  
340 0 0 7 418 2133 1361 0 0 2 7 low_bit 1 1939  4 size 1 1939  
341 0 0 6 419 1940 0 0 0 0 
342 0 0 6 420 1939 0 0 0 0 
343 0 0 6 421 1939 0 0 0 1 4 this 3 2134  
344 0 0 6 422 1940 0 0 0 2 4 this 3 2134  5 index 1 1939  
345 0 0 4 423 2072 0 0 0 2 4 this 3 2133  5 index 1 1939  
346 0 0 4 424 2072 0 0 0 2 4 this 3 2133  5 index 1 1939  
347 0 0 4 425 2072 0 0 0 3 4 this 3 2133  5 index 1 1939  5 value 1 1940  
348 0 0 6 426 1940 0 0 0 1 4 this 3 2134  
349 0 0 6 427 1940 0 0 0 1 4 this 3 2134  
350 0 0 6 428 2136 0 0 0 3 4 this 3 2134  7 low_bit 1 1939  4 size 1 1939  
351 0 0 4 429 2072 0 0 0 4 4 this 3 2133  5 value 1 2136  7 low_bit 1 1939  4 size 1 1939  
352 0 0 6 430 1940 0 0 0 3 4 this 3 2134  7 low_bit 1 1939  4 size 1 1939  
353 0 0 6 431 1940 0 0 0 3 4 this 3 2134  7 low_bit 1 1939  4 size 1 1939  
354 0 0 4 432 2072 0 0 0 3 4 this 3 2133  7 low_bit 1 1939  4 size 1 1939  
355 0 0 4 433 2072 0 0 0 3 4 this 3 2133  7 low_bit 1 1939  4 size 1 1939  
356 0 0 4 434 2072 0 0 0 4 4 this 3 2133  5 value 1 1940  7 low_bit 1 1939  4 size 1 1939  
357 0 0 6 435 2136 0 0 0 1 4 this 3 2134  
358 0 0 4 436 2072 0 0 0 2 4 this 3 2133  5 value 1 2136  
359 0 0 6 437 1939 0 0 0 1 4 this 3 2134  
360 0 0 6 438 1939 0 0 0 1 4 this 3 2134  
361 0 0 6 439 1939 0 0 0 1 4 this 3 2134  
362 0 0 6 440 1939 0 0 0 1 4 this 3 2134  
363 0 0 6 441 1939 0 0 0 1 4 this 3 2134  
364 0 0 6 442 1939 0 0 0 1 4 this 3 2134  
365 0 0 6 443 1939 0 0 0 2 4 this 3 2134  7 low_bit 1 1939  
366 0 0 4 444 2072 0 0 0 1 4 this 3 2133  
367 0 0 6 445 1940 0 0 0 2 4 this 3 2134  5 other 1 2134  
368 0 0 4 446 2072 0 0 0 1 4 this 3 2133  
369 0 0 4 447 2072 0 0 0 2 4 this 3 2134  3 out 1 2082  
370 0 0 4 448 2072 0 0 0 3 4 this 3 2134  3 out 1 2082  12 spaces_every 1 1939  
371 0 0 4 449 2072 0 0 0 3 4 this 3 2134  3 out 1 2082  12 spaces_every 1 1939  
372 0 0 4 450 2072 0 0 0 3 4 this 3 2134  3 out 1 2082  12 indent_level 1 1939  
373 0 0 6 451 1940 0 0 0 2 4 this 3 2134  5 other 1 2134  
374 0 0 6 452 1940 0 0 0 2 4 this 3 2134  5 other 1 2134  
375 0 0 6 453 1940 0 0 0 2 4 this 3 2134  5 other 1 2134  
376 0 0 6 454 1939 0 0 0 2 4 this 3 2134  5 other 1 2134  
377 0 0 7 455 2133 1361 0 0 2 4 this 3 2134  5 other 1 2134  
378 0 0 7 456 2133 1361 0 0 2 4 this 3 2134  5 other 1 2134  
379 0 0 7 457 2133 1361 0 0 2 4 this 3 2134  5 other 1 2134  
380 0 0 7 458 2133 1361 0 0 1 4 this 3 2134  
381 0 0 7 459 2133 1361 0 0 2 4 this 3 2134  5 shift 1 1939  
382 0 0 7 460 2133 1361 0 0 2 4 this 3 2134  5 shift 1 1939  
383 0 0 6 461 2133 0 0 0 2 4 this 3 2133  5 other 1 2134  
384 0 0 6 462 2133 0 0 0 2 4 this 3 2133  5 other 1 2134  
385 0 0 6 463 2133 0 0 0 2 4 this 3 2133  5 other 1 2134  
386 0 0 6 464 2133 0 0 0 2 4 this 3 2133  5 shift 1 1939  
387 0 0 6 465 2133 0 0 0 2 4 this 3 2133  5 shift 1 1939  
388 0 0 4 466 2072 0 0 0 1 4 this 3 2133  
389 0 0 4 467 2072 0 0 0 1 4 this 3 2133  
390 0 0 7 468 2133 1361 0 0 1 4 this 3 2134  
391 0 0 7 469 2133 1361 0 0 1 4 this 3 2134  
392 0 0 7 470 2133 1361 0 0 1 4 this 3 2134  
393 0 0 7 470 2133 1361 0 0 2 4 this 3 2134  5 other 1 2134  
394 0 0 7 470 2133 1361 0 0 2 4 this 3 2134  5 index 1 1939  
395 0 0 7 471 2133 1361 0 0 1 4 this 3 2134  
396 0 0 7 471 2133 1361 0 0 2 4 this 3 2134  5 other 1 2134  
397 0 0 7 471 2133 1361 0 0 2 4 this 3 2134  5 index 1 1939  
398 0 0 6 472 1939 0 0 0 1 4 this 3 2134  
399 0 0 6 473 1940 0 0 0 1 4 this 3 2134  
400 0 0 6 474 1968 0 0 0 1 4 this 3 2134  
401 0 0 6 475 1968 0 0 0 1 4 this 3 2134  
402 0 0 7 476 2084 0 0 0 0 
403 0 0 7 482 2137 1422 0 10 /**
 *
 */ 0 
404 0 0 7 482 2137 1422 0 0 1 6 param0 0 2138  
405 0 0 7 482 2137 1422 0 0 1 10 init_value 1 1968  
406 0 0 7 482 2137 1422 0 10 /**
 *
 */ 1 4 from 1 2140  
407 0 0 7 483 2137 1422 0 69 /**
 * Returns a BitArray with an infinite array of bits, all on.
 */ 0 
408 0 0 7 484 2137 1422 0 53 /**
 * Returns a BitArray whose bits are all off.
 */ 0 
409 0 0 7 485 2137 1422 0 62 /**
 * Returns a BitArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1939  
410 0 0 7 486 2137 1422 0 61 /**
 * Returns a BitArray with only the indicated bit on.
 */ 1 5 index 1 1939  
411 0 0 7 487 2137 1422 0 76 /**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1939  4 size 1 1939  
412 0 0 6 488 1940 0 0 0 0 
413 0 0 6 489 1939 0 0 0 0 
414 0 0 6 490 1939 0 0 0 0 
415 0 0 6 491 2142 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2138  
416 0 0 6 492 1940 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2138  5 index 1 1939  
417 0 0 4 493 2072 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2137  5 index 1 1939  
418 0 0 4 494 2072 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2137  5 index 1 1939  
419 0 0 4 495 2072 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2137  5 index 1 1939  5 value 1 1940  
420 0 0 6 496 1940 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2138  
421 0 0 6 497 1940 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2138  
422 0 0 6 498 1940 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2138  
423 0 0 6 499 2143 0 0 187 /**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */ 3 4 this 3 2138  7 low_bit 1 1939  4 size 1 1939  
424 0 0 4 500 2072 0 0 92 /**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */ 4 4 this 3 2137  5 value 1 2143  7 low_bit 1 1939  4 size 1 1939  
425 0 0 6 501 1940 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2138  7 low_bit 1 1939  4 size 1 1939  
426 0 0 6 502 1940 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2138  7 low_bit 1 1939  4 size 1 1939  
427 0 0 4 503 2072 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2137  7 low_bit 1 1939  4 size 1 1939  
428 0 0 4 504 2072 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2137  7 low_bit 1 1939  4 size 1 1939  
429 0 0 4 505 2072 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2137  5 value 1 1940  7 low_bit 1 1939  4 size 1 1939  
430 0 0 6 506 1939 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2138  
431 0 0 6 507 1939 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2138  
432 0 0 6 508 1939 0 0 101 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */ 1 4 this 3 2138  
433 0 0 6 509 1939 0 0 101 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */ 1 4 this 3 2138  
434 0 0 6 510 1939 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2138  
435 0 0 6 511 1939 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2138  
436 0 0 6 512 1939 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2138  7 low_bit 1 1939  
437 0 0 6 513 2142 0 0 75 /**
 * Returns the number of possibly-unique words stored in the array.
 */ 1 4 this 3 2138  
438 0 0 7 514 2145 0 0 175 /**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */ 2 4 this 3 2138  1 n 1 2142  
439 0 0 4 515 2072 0 0 113 /**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */ 3 4 this 3 2137  1 n 1 2142  5 value 1 2143  
440 0 0 4 516 2072 0 0 90 /**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2137  
441 0 0 6 517 1940 0 0 178 /**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2138  5 other 1 2138  
442 0 0 4 518 2072 0 0 49 /**
 * Sets all the bits in the BitArray off.
 */ 1 4 this 3 2137  
443 0 0 4 519 2072 0 0 193 /**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */ 2 4 this 3 2138  3 out 1 2082  
444 0 0 4 520 2072 0 0 83 /**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */ 3 4 this 3 2138  3 out 1 2082  12 spaces_every 1 1939  
445 0 0 4 521 2072 0 0 93 /**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */ 3 4 this 3 2138  3 out 1 2082  12 spaces_every 1 1939  
446 0 0 4 522 2072 0 0 99 /**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */ 3 4 this 3 2138  3 out 1 2082  12 indent_level 1 1939  
447 0 0 6 523 1940 0 0 0 2 4 this 3 2138  5 other 1 2138  
448 0 0 6 524 1940 0 0 0 2 4 this 3 2138  5 other 1 2138  
449 0 0 6 525 1940 0 0 0 2 4 this 3 2138  5 other 1 2138  
450 0 0 6 526 1939 0 0 233 /**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */ 2 4 this 3 2138  5 other 1 2138  
451 0 0 7 527 2137 1422 0 0 2 4 this 3 2138  5 other 1 2138  
452 0 0 7 528 2137 1422 0 0 2 4 this 3 2138  5 other 1 2138  
453 0 0 7 529 2137 1422 0 0 2 4 this 3 2138  5 other 1 2138  
454 0 0 7 530 2137 1422 0 0 1 4 this 3 2138  
455 0 0 7 531 2137 1422 0 0 2 4 this 3 2138  5 shift 1 1939  
456 0 0 7 532 2137 1422 0 0 2 4 this 3 2138  5 shift 1 1939  
457 0 0 6 533 2137 0 0 0 2 4 this 3 2137  5 other 1 2138  
458 0 0 6 534 2137 0 0 0 2 4 this 3 2137  5 other 1 2138  
459 0 0 6 535 2137 0 0 0 2 4 this 3 2137  5 other 1 2138  
460 0 0 6 536 2137 0 0 0 2 4 this 3 2137  5 shift 1 1939  
461 0 0 6 537 2137 0 0 0 2 4 this 3 2137  5 shift 1 1939  
462 0 0 6 538 1940 0 0 0 1 4 this 3 2138  
463 0 0 6 539 1968 0 0 0 1 4 this 3 2138  
464 0 0 4 540 2072 0 0 0 2 4 this 3 2137  5 state 1 1968  
465 0 0 7 541 2084 0 0 0 0 
466 0 0 7 544 2146 1442 0 259 // The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer! 0 
467 0 0 7 544 2146 1442 0 0 1 6 param0 0 2147  
468 0 0 7 544 2146 1442 0 154 /**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */ 1 5 index 1 1939  
469 0 0 7 544 2146 1442 0 341 /**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */ 1 4 name 1 2086  
470 0 0 6 545 1940 0 0 0 2 4 this 3 2147  5 other 1 2147  
471 0 0 6 546 1940 0 0 0 2 4 this 3 2147  5 other 1 2147  
472 0 0 6 547 1940 0 0 0 2 4 this 3 2147  5 other 1 2147  
473 0 0 6 548 1940 0 0 0 2 4 this 3 2147  5 other 1 2147  
474 0 0 6 549 1940 0 0 0 2 4 this 3 2147  5 other 1 2147  
475 0 0 6 550 1940 0 0 0 2 4 this 3 2147  5 other 1 2147  
476 0 0 6 551 1939 0 0 209 /**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */ 2 4 this 3 2147  5 other 1 2147  
477 0 0 6 552 2142 0 0 54 /**
 * Returns a hash code suitable for phash_map.
 */ 1 4 this 3 2147  
478 0 0 6 553 2086 0 0 42 /**
 * Returns the name of the button.
 */ 1 4 this 3 2147  
479 0 0 6 554 1940 0 0 121 /**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */ 1 4 this 3 2147  
480 0 0 6 555 1986 0 0 109 /**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */ 1 4 this 3 2147  
481 0 0 7 556 2146 1442 0 373 /**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */ 1 4 this 3 2147  
482 0 0 6 557 1940 0 0 263 /**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */ 2 4 this 3 2147  5 other 1 2147  
483 0 0 6 558 1939 0 0 363 /**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */ 1 4 this 3 2147  
484 0 0 4 559 2072 0 0 10 /**
 *
 */ 2 4 this 3 2147  3 out 1 2082  
485 0 0 7 560 2146 1442 0 0 0 
486 0 0 7 569 2084 0 0 0 0 
487 0 0 6 561 1940 0 0 0 1 4 this 3 2147  
488 0 0 7 577 2151 1449 0 0 1 6 param0 0 2149  
489 0 0 7 572 2146 1442 0 150 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */ 2 4 this 3 2151  4 name 1 2086  
490 0 0 7 573 2146 1442 0 144 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */ 2 4 this 3 2151  4 name 1 2086  
491 0 0 7 574 2146 1442 0 169 /**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */ 2 4 this 3 2149  16 ascii_equivalent 1 1986  
492 0 0 4 575 2072 0 0 10 /**
 *
 */ 2 4 this 3 2149  3 out 1 2082  
493 0 0 6 576 2151 0 0 67 /**
 * Returns the pointer to the global ButtonRegistry object.
 */ 0 
494 0 0 7 588 2152 1458 0 0 0 
495 0 0 7 588 2152 1458 0 0 1 6 param0 0 2153  
496 0 0 6 581 2142 0 0 76 /**
 * Returns the number of buttons that this button mapping specifies.
 */ 1 4 this 3 2153  
497 0 0 7 582 2146 1442 0 76 /**
 * Returns the underlying raw button associated with the nth button.
 */ 2 4 this 3 2153  1 i 1 2142  
498 0 0 7 583 2146 1442 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2153  3 raw 1 2146  
499 0 0 7 583 2146 1442 0 101 /**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */ 2 4 this 3 2153  1 i 1 2142  
500 0 0 7 583 2146 1442 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2153  8 raw_name 1 2086  
501 0 0 6 584 2086 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2153  3 raw 1 2146  
502 0 0 6 584 2086 0 0 127 /**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */ 2 4 this 3 2153  1 i 1 2142  
503 0 0 6 584 2086 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2153  8 raw_name 1 2086  
504 0 0 4 585 2072 0 0 10 /**
 *
 */ 2 4 this 3 2153  3 out 1 2082  
505 0 0 4 586 2072 0 0 10 /**
 *
 */ 3 4 this 3 2153  3 out 1 2082  12 indent_level 1 1939  
506 0 0 7 587 2084 0 0 0 0 
507 0 0 7 594 2157 1463 0 0 1 6 param0 0 2155  
508 0 0 4 591 2072 0 0 10 /**
 *
 */ 2 4 this 3 2155  3 out 1 2082  
509 0 0 7 592 2157 1463 0 0 1 8 function 1 1968  
510 0 0 7 593 2084 0 0 0 0 
511 0 0 6 597 1939 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2158  
512 0 0 4 598 2072 0 0 108 /**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 2158  
513 0 0 6 599 1940 0 0 202 /**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2158  
514 0 0 6 600 1940 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2158  
515 0 0 7 602 2084 0 0 0 0 
516 0 0 4 604 2072 0 0 10 /**
 *
 */ 2 4 this 3 2160  3 out 1 2082  
517 0 0 4 605 2072 0 0 159 /**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */ 1 4 this 3 2162  
518 0 0 7 606 2084 0 0 0 0 
519 0 0 7 609 2163 1463 0 10 /**
 *
 */ 1 8 function 1 1968  
520 0 0 7 609 2163 1463 0 0 1 6 param0 0 2164  
521 0 0 4 610 2072 0 0 0 2 4 this 3 2163  4 size 1 2142  
522 0 0 4 613 2072 0 0 126 /**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */ 2 4 this 3 2163  8 function 1 1968  
523 0 0 6 614 1968 0 0 64 /**
 * Returns the function that is called for the callback.
 */ 1 4 this 3 2163  
524 0 0 7 616 2084 0 0 0 0 
525 0 0 7 618 2166 1485 0 10 /**
 *
 */ 0 
526 0 0 7 618 2166 1485 0 0 1 6 param0 0 2167  
527 0 0 6 619 1996 0 0 10 /**
 *
 */ 1 4 this 3 2167  
528 0 0 6 620 1996 0 0 10 /**
 *
 */ 1 4 this 3 2167  
529 0 0 7 630 2171 0 0 10 /**
 *
 */ 1 4 copy 1 2169  
530 0 0 7 630 2171 0 0 10 /**
 *
 */ 1 4 mode 1 1999  
531 0 0 4 631 2072 0 0 1841 /**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */ 2 4 this 3 2171  4 mode 1 1999  
532 0 0 6 632 1999 0 0 66 /**
 * Returns the current mode of the clock.  See set_mode().
 */ 1 4 this 3 2169  
533 0 0 6 634 1938 0 0 350 /**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */ 2 4 this 3 2169  14 current_thread 1 2172  
534 0 0 6 635 1938 0 0 434 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */ 1 4 this 3 2169  
535 0 0 6 636 1938 0 0 440 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */ 1 4 this 3 2169  
536 0 0 4 637 2072 0 0 75 /**
 * Simultaneously resets both the time and the frame count to zero.
 */ 1 4 this 3 2171  
537 0 0 4 638 2072 0 0 316 /**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */ 2 4 this 3 2171  4 time 1 1938  
538 0 0 4 639 2072 0 0 215 /**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */ 3 4 this 3 2171  4 time 1 1938  14 current_thread 1 2172  
539 0 0 4 640 2072 0 0 132 /**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */ 3 4 this 3 2171  11 frame_count 1 1939  14 current_thread 1 2172  
540 0 0 6 641 1939 0 0 195 /**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */ 2 4 this 3 2169  14 current_thread 1 2172  
541 0 0 6 642 1938 0 0 245 /**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */ 2 4 this 3 2169  14 current_thread 1 2172  
542 0 0 6 647 1938 0 0 130 /**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */ 2 4 this 3 2169  14 current_thread 1 2172  
543 0 0 4 648 2072 0 0 291 /**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */ 2 4 this 3 2171  2 dt 1 1938  
544 0 0 4 649 2072 0 0 291 /**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */ 2 4 this 3 2171  10 frame_rate 1 1938  
545 0 0 6 651 1938 0 0 106 /**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */ 1 4 this 3 2169  
546 0 0 4 652 2072 0 0 511 /**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */ 2 4 this 3 2171  6 max_dt 1 1938  
547 0 0 6 654 1938 0 0 265 /**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 1 4 this 3 2169  
548 0 0 4 655 2072 0 0 262 /**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 2 4 this 3 2171  14 degrade_factor 1 1938  
549 0 0 4 657 2072 0 0 393 /**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */ 2 4 this 3 2171  4 time 1 1938  
550 0 0 6 658 1938 0 0 162 /**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */ 1 4 this 3 2169  
551 0 0 6 660 1938 0 0 214 /**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */ 2 4 this 3 2169  14 current_thread 1 2172  
552 0 0 6 661 1938 0 0 105 /**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */ 2 4 this 3 2169  14 current_thread 1 2172  
553 0 0 6 662 1938 0 0 539 /**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */ 2 4 this 3 2169  14 current_thread 1 2172  
554 0 0 4 665 2072 0 0 285 /**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */ 2 4 this 3 2171  14 current_thread 1 2172  
555 0 0 4 666 2072 0 0 417 /**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */ 2 4 this 3 2171  14 current_thread 1 2172  
556 0 0 6 667 1940 0 0 322 /**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */ 2 4 this 3 2171  14 current_thread 1 2172  
557 0 0 7 668 2171 0 0 159 /**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */ 0 
558 0 0 7 669 2084 0 0 0 0 
559 0 0 4 677 2072 0 0 62 /**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */ 1 4 this 3 2174  
560 0 0 6 678 1940 0 0 64 /**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */ 1 4 this 3 2174  
561 0 0 7 679 2084 0 0 0 0 
562 0 0 7 686 2176 1531 0 48 /**
 * Initializes an empty datagram buffer.
 */ 0 
563 0 0 7 686 2176 1531 0 54 /**
 * Initializes the buffer with the given data.
 */ 1 4 data 1 2005  
564 0 0 4 687 2072 0 0 38 /**
 * Clears the internal buffer.
 */ 1 4 this 3 2176  
565 0 0 6 682 1972 0 0 0 1 4 this 3 2176  
566 0 0 6 684 1965 0 0 0 1 4 this 3 2176  
567 0 0 7 696 2177 0 0 10 /**
 *
 */ 0 
568 0 0 6 697 1940 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2177  4 file 1 2178  
569 0 0 6 697 1940 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2177  8 filename 1 2105  
570 0 0 6 697 1940 0 0 230 /**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */ 3 4 this 3 2177  2 in 1 2181  8 filename 1 2105  
571 0 0 6 698 2181 0 0 61 /**
 * Returns the istream represented by the input file.
 */ 1 4 this 3 2177  
572 0 0 4 699 2072 0 0 98 /**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */ 1 4 this 3 2177  
573 0 0 7 702 2183 0 0 10 /**
 *
 */ 0 
574 0 0 6 703 1940 0 0 102 /**
 * Opens the indicated filename for writing.  Returns true if successful,
 * false on failure.
 */ 2 4 this 3 2183  4 file 1 2178  
575 0 0 6 703 1940 0 0 99 /**
 * Opens the indicated filename for writing.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2183  8 filename 1 2105  
576 0 0 6 703 1940 0 0 229 /**
 * Starts writing to the indicated stream.  Returns true on success, false on
 * failure.  The DatagramOutputFile does not take ownership of the stream; you
 * are responsible for closing or deleting it when you are done.
 */ 3 4 this 3 2183  3 out 1 2082  8 filename 1 2105  
577 0 0 4 704 2072 0 0 99 /**
 * Closes the file.  This is also implicitly done when the DatagramOutputFile
 * destructs.
 */ 1 4 this 3 2183  
578 0 0 6 705 1940 0 0 256 /**
 * Writes a sequence of bytes to the beginning of the datagram file.  This may
 * be called any number of times after the file has been opened and before the
 * first datagram is written.  It may not be called once the first datagram is
 * written.
 */ 2 4 this 3 2183  6 header 1 2086  
579 0 0 7 710 2184 1597 0 0 0 
580 0 0 7 710 2184 1597 0 0 1 6 param0 0 2185  
581 0 0 7 710 2184 1597 0 0 1 10 init_value 1 1968  
582 0 0 7 711 2184 1597 0 0 0 
583 0 0 7 712 2184 1597 0 0 0 
584 0 0 7 713 2184 1597 0 0 1 7 on_bits 1 1939  
585 0 0 7 714 2184 1597 0 0 1 5 index 1 1939  
586 0 0 7 715 2184 1597 0 0 2 7 low_bit 1 1939  4 size 1 1939  
587 0 0 6 716 1940 0 0 0 0 
588 0 0 6 717 1939 0 0 0 0 
589 0 0 6 718 1939 0 0 0 1 4 this 3 2185  
590 0 0 6 719 1940 0 0 0 2 4 this 3 2185  5 index 1 1939  
591 0 0 4 720 2072 0 0 0 2 4 this 3 2184  5 index 1 1939  
592 0 0 4 721 2072 0 0 0 2 4 this 3 2184  5 index 1 1939  
593 0 0 4 722 2072 0 0 0 3 4 this 3 2184  5 index 1 1939  5 value 1 1940  
594 0 0 6 723 1940 0 0 0 1 4 this 3 2185  
595 0 0 6 724 1940 0 0 0 1 4 this 3 2185  
596 0 0 6 725 2136 0 0 0 3 4 this 3 2185  7 low_bit 1 1939  4 size 1 1939  
597 0 0 4 726 2072 0 0 0 4 4 this 3 2184  5 value 1 2136  7 low_bit 1 1939  4 size 1 1939  
598 0 0 6 727 1940 0 0 0 3 4 this 3 2185  7 low_bit 1 1939  4 size 1 1939  
599 0 0 6 728 1940 0 0 0 3 4 this 3 2185  7 low_bit 1 1939  4 size 1 1939  
600 0 0 4 729 2072 0 0 0 3 4 this 3 2184  7 low_bit 1 1939  4 size 1 1939  
601 0 0 4 730 2072 0 0 0 3 4 this 3 2184  7 low_bit 1 1939  4 size 1 1939  
602 0 0 4 731 2072 0 0 0 4 4 this 3 2184  5 value 1 1940  7 low_bit 1 1939  4 size 1 1939  
603 0 0 6 732 1939 0 0 0 1 4 this 3 2185  
604 0 0 6 733 1939 0 0 0 1 4 this 3 2185  
605 0 0 6 734 1939 0 0 0 1 4 this 3 2185  
606 0 0 6 735 1939 0 0 0 1 4 this 3 2185  
607 0 0 6 736 1939 0 0 0 1 4 this 3 2185  
608 0 0 6 737 1939 0 0 0 1 4 this 3 2185  
609 0 0 6 738 1939 0 0 0 2 4 this 3 2185  7 low_bit 1 1939  
610 0 0 4 739 2072 0 0 0 1 4 this 3 2184  
611 0 0 6 740 1940 0 0 0 2 4 this 3 2185  5 other 1 2185  
612 0 0 4 741 2072 0 0 0 1 4 this 3 2184  
613 0 0 4 742 2072 0 0 0 2 4 this 3 2185  3 out 1 2082  
614 0 0 4 743 2072 0 0 0 3 4 this 3 2185  3 out 1 2082  12 spaces_every 1 1939  
615 0 0 4 744 2072 0 0 0 3 4 this 3 2185  3 out 1 2082  12 spaces_every 1 1939  
616 0 0 4 745 2072 0 0 0 3 4 this 3 2185  3 out 1 2082  12 indent_level 1 1939  
617 0 0 6 746 1940 0 0 0 2 4 this 3 2185  5 other 1 2185  
618 0 0 6 747 1940 0 0 0 2 4 this 3 2185  5 other 1 2185  
619 0 0 6 748 1940 0 0 0 2 4 this 3 2185  5 other 1 2185  
620 0 0 6 749 1939 0 0 0 2 4 this 3 2185  5 other 1 2185  
621 0 0 7 750 2184 1597 0 0 2 4 this 3 2185  5 other 1 2185  
622 0 0 7 751 2184 1597 0 0 2 4 this 3 2185  5 other 1 2185  
623 0 0 7 752 2184 1597 0 0 2 4 this 3 2185  5 other 1 2185  
624 0 0 7 753 2184 1597 0 0 1 4 this 3 2185  
625 0 0 7 754 2184 1597 0 0 2 4 this 3 2185  5 shift 1 1939  
626 0 0 7 755 2184 1597 0 0 2 4 this 3 2185  5 shift 1 1939  
627 0 0 6 756 2184 0 0 0 2 4 this 3 2184  5 other 1 2185  
628 0 0 6 757 2184 0 0 0 2 4 this 3 2184  5 other 1 2185  
629 0 0 6 758 2184 0 0 0 2 4 this 3 2184  5 other 1 2185  
630 0 0 6 759 2184 0 0 0 2 4 this 3 2184  5 shift 1 1939  
631 0 0 6 760 2184 0 0 0 2 4 this 3 2184  5 shift 1 1939  
632 0 0 6 761 1940 0 0 0 1 4 this 3 2185  
633 0 0 6 762 1968 0 0 0 1 4 this 3 2185  
634 0 0 6 763 1968 0 0 0 1 4 this 3 2185  
635 0 0 7 764 2084 0 0 0 0 
636 0 0 7 768 2187 1653 0 0 0 
637 0 0 7 768 2187 1653 0 0 1 6 param0 0 2188  
638 0 0 7 768 2187 1653 0 0 1 10 init_value 1 1968  
639 0 0 7 769 2187 1653 0 0 0 
640 0 0 7 770 2187 1653 0 0 0 
641 0 0 7 771 2187 1653 0 0 1 7 on_bits 1 1939  
642 0 0 7 772 2187 1653 0 0 1 5 index 1 1939  
643 0 0 7 773 2187 1653 0 0 2 7 low_bit 1 1939  4 size 1 1939  
644 0 0 6 774 1940 0 0 0 0 
645 0 0 6 775 1939 0 0 0 0 
646 0 0 6 776 1939 0 0 0 1 4 this 3 2188  
647 0 0 6 777 1940 0 0 0 2 4 this 3 2188  5 index 1 1939  
648 0 0 4 778 2072 0 0 0 2 4 this 3 2187  5 index 1 1939  
649 0 0 4 779 2072 0 0 0 2 4 this 3 2187  5 index 1 1939  
650 0 0 4 780 2072 0 0 0 3 4 this 3 2187  5 index 1 1939  5 value 1 1940  
651 0 0 6 781 1940 0 0 0 1 4 this 3 2188  
652 0 0 6 782 1940 0 0 0 1 4 this 3 2188  
653 0 0 6 783 2136 0 0 0 3 4 this 3 2188  7 low_bit 1 1939  4 size 1 1939  
654 0 0 4 784 2072 0 0 0 4 4 this 3 2187  5 value 1 2136  7 low_bit 1 1939  4 size 1 1939  
655 0 0 6 785 1940 0 0 0 3 4 this 3 2188  7 low_bit 1 1939  4 size 1 1939  
656 0 0 6 786 1940 0 0 0 3 4 this 3 2188  7 low_bit 1 1939  4 size 1 1939  
657 0 0 4 787 2072 0 0 0 3 4 this 3 2187  7 low_bit 1 1939  4 size 1 1939  
658 0 0 4 788 2072 0 0 0 3 4 this 3 2187  7 low_bit 1 1939  4 size 1 1939  
659 0 0 4 789 2072 0 0 0 4 4 this 3 2187  5 value 1 1940  7 low_bit 1 1939  4 size 1 1939  
660 0 0 6 790 1939 0 0 0 1 4 this 3 2188  
661 0 0 6 791 1939 0 0 0 1 4 this 3 2188  
662 0 0 6 792 1939 0 0 0 1 4 this 3 2188  
663 0 0 6 793 1939 0 0 0 1 4 this 3 2188  
664 0 0 6 794 1939 0 0 0 1 4 this 3 2188  
665 0 0 6 795 1939 0 0 0 1 4 this 3 2188  
666 0 0 6 796 1939 0 0 0 2 4 this 3 2188  7 low_bit 1 1939  
667 0 0 4 797 2072 0 0 0 1 4 this 3 2187  
668 0 0 6 798 1940 0 0 0 2 4 this 3 2188  5 other 1 2188  
669 0 0 4 799 2072 0 0 0 1 4 this 3 2187  
670 0 0 4 800 2072 0 0 0 2 4 this 3 2188  3 out 1 2082  
671 0 0 4 801 2072 0 0 0 3 4 this 3 2188  3 out 1 2082  12 spaces_every 1 1939  
672 0 0 4 802 2072 0 0 0 3 4 this 3 2188  3 out 1 2082  12 spaces_every 1 1939  
673 0 0 4 803 2072 0 0 0 3 4 this 3 2188  3 out 1 2082  12 indent_level 1 1939  
674 0 0 6 804 1940 0 0 0 2 4 this 3 2188  5 other 1 2188  
675 0 0 6 805 1940 0 0 0 2 4 this 3 2188  5 other 1 2188  
676 0 0 6 806 1940 0 0 0 2 4 this 3 2188  5 other 1 2188  
677 0 0 6 807 1939 0 0 0 2 4 this 3 2188  5 other 1 2188  
678 0 0 7 808 2187 1653 0 0 2 4 this 3 2188  5 other 1 2188  
679 0 0 7 809 2187 1653 0 0 2 4 this 3 2188  5 other 1 2188  
680 0 0 7 810 2187 1653 0 0 2 4 this 3 2188  5 other 1 2188  
681 0 0 7 811 2187 1653 0 0 1 4 this 3 2188  
682 0 0 7 812 2187 1653 0 0 2 4 this 3 2188  5 shift 1 1939  
683 0 0 7 813 2187 1653 0 0 2 4 this 3 2188  5 shift 1 1939  
684 0 0 6 814 2187 0 0 0 2 4 this 3 2187  5 other 1 2188  
685 0 0 6 815 2187 0 0 0 2 4 this 3 2187  5 other 1 2188  
686 0 0 6 816 2187 0 0 0 2 4 this 3 2187  5 other 1 2188  
687 0 0 6 817 2187 0 0 0 2 4 this 3 2187  5 shift 1 1939  
688 0 0 6 818 2187 0 0 0 2 4 this 3 2187  5 shift 1 1939  
689 0 0 6 819 1940 0 0 0 1 4 this 3 2188  
690 0 0 6 820 1968 0 0 0 1 4 this 3 2188  
691 0 0 6 821 1968 0 0 0 1 4 this 3 2188  
692 0 0 7 822 2084 0 0 0 0 
693 0 0 7 858 2190 1686 0 0 0 
694 0 0 7 858 2190 1686 0 0 1 6 param0 0 2191  
695 0 0 7 827 2146 1442 0 0 0 
696 0 0 7 828 2146 1442 0 0 0 
697 0 0 7 829 2146 1442 0 0 0 
698 0 0 7 830 2146 1442 0 0 0 
699 0 0 7 831 2146 1442 0 0 0 
700 0 0 7 832 2146 1442 0 0 0 
701 0 0 7 833 2146 1442 0 0 0 
702 0 0 7 834 2146 1442 0 0 0 
703 0 0 7 835 2146 1442 0 0 0 
704 0 0 7 836 2146 1442 0 0 0 
705 0 0 7 837 2146 1442 0 0 0 
706 0 0 7 838 2146 1442 0 0 0 
707 0 0 7 839 2146 1442 0 0 0 
708 0 0 7 840 2146 1442 0 0 0 
709 0 0 7 841 2146 1442 0 0 0 
710 0 0 7 842 2146 1442 0 0 0 
711 0 0 7 843 2146 1442 0 0 0 
712 0 0 7 844 2146 1442 0 0 0 
713 0 0 7 845 2146 1442 0 0 0 
714 0 0 7 846 2146 1442 0 0 0 
715 0 0 7 847 2146 1442 0 0 0 
716 0 0 7 848 2146 1442 0 0 0 
717 0 0 7 849 2146 1442 0 0 0 
718 0 0 7 850 2146 1442 0 0 0 
719 0 0 7 851 2146 1442 0 0 0 
720 0 0 7 852 2146 1442 0 74 // Flight stick buttons, takes zero-based index.  First is always trigger. 0 
721 0 0 7 853 2146 1442 0 169 /**
 * Returns the ButtonHandle associated with the particular numbered joystick
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */ 1 13 button_number 1 1939  
722 0 0 7 854 2146 1442 0 0 0 
723 0 0 7 855 2146 1442 0 0 0 
724 0 0 7 856 2146 1442 0 0 0 
725 0 0 7 857 2146 1442 0 0 0 
726 0 0 7 913 2193 1740 0 0 0 
727 0 0 7 913 2193 1740 0 0 1 6 param0 0 2194  
728 0 0 7 861 2146 1442 0 144 /**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */ 1 16 ascii_equivalent 1 1986  
729 0 0 7 862 2146 1442 0 0 0 
730 0 0 7 863 2146 1442 0 0 0 
731 0 0 7 864 2146 1442 0 0 0 
732 0 0 7 865 2146 1442 0 0 0 
733 0 0 7 866 2146 1442 0 0 0 
734 0 0 7 867 2146 1442 0 0 0 
735 0 0 7 868 2146 1442 0 0 0 
736 0 0 7 869 2146 1442 0 0 0 
737 0 0 7 870 2146 1442 0 0 0 
738 0 0 7 871 2146 1442 0 0 0 
739 0 0 7 872 2146 1442 0 0 0 
740 0 0 7 873 2146 1442 0 0 0 
741 0 0 7 874 2146 1442 0 0 0 
742 0 0 7 875 2146 1442 0 0 0 
743 0 0 7 876 2146 1442 0 0 0 
744 0 0 7 877 2146 1442 0 0 0 
745 0 0 7 878 2146 1442 0 0 0 
746 0 0 7 879 2146 1442 0 59 // PC keyboards don't have these four buttons, but Macs do. 0 
747 0 0 7 880 2146 1442 0 0 0 
748 0 0 7 881 2146 1442 0 0 0 
749 0 0 7 882 2146 1442 0 0 0 
750 0 0 7 883 2146 1442 0 0 0 
751 0 0 7 884 2146 1442 0 0 0 
752 0 0 7 885 2146 1442 0 0 0 
753 0 0 7 886 2146 1442 0 0 0 
754 0 0 7 887 2146 1442 0 0 0 
755 0 0 7 888 2146 1442 0 0 0 
756 0 0 7 889 2146 1442 0 0 0 
757 0 0 7 890 2146 1442 0 0 0 
758 0 0 7 891 2146 1442 0 0 0 
759 0 0 7 892 2146 1442 0 27 // delete is a C++ keyword. 0 
760 0 0 7 893 2146 1442 0 27 // delete is a C++ keyword. 0 
761 0 0 7 894 2146 1442 0 0 0 
762 0 0 7 895 2146 1442 0 0 0 
763 0 0 7 896 2146 1442 0 0 0 
764 0 0 7 897 2146 1442 0 0 0 
765 0 0 7 898 2146 1442 0 0 0 
766 0 0 7 899 2146 1442 0 0 0 
767 0 0 7 900 2146 1442 0 0 0 
768 0 0 7 901 2146 1442 0 0 0 
769 0 0 7 902 2146 1442 0 0 0 
770 0 0 7 903 2146 1442 0 0 0 
771 0 0 7 904 2146 1442 0 0 0 
772 0 0 7 905 2146 1442 0 0 0 
773 0 0 7 906 2146 1442 0 0 0 
774 0 0 7 907 2146 1442 0 0 0 
775 0 0 7 908 2146 1442 0 0 0 
776 0 0 7 909 2146 1442 0 0 0 
777 0 0 7 910 2146 1442 0 0 0 
778 0 0 7 911 2146 1442 0 0 0 
779 0 0 7 912 2146 1442 0 0 0 
780 0 0 7 920 2196 1746 0 10 /**
 *
 */ 0 
781 0 0 7 920 2196 1746 0 10 /**
 *
 */ 1 4 copy 1 2197  
782 0 0 6 922 2196 0 0 0 2 4 this 3 2196  4 copy 1 2197  
783 0 0 6 923 1940 0 0 0 2 4 this 3 2197  5 other 1 2197  
784 0 0 6 924 1940 0 0 0 2 4 this 3 2197  5 other 1 2197  
785 0 0 6 925 1940 0 0 0 2 4 this 3 2197  5 other 1 2197  
786 0 0 7 926 2196 1746 0 0 2 4 this 3 2197  5 other 1 2197  
787 0 0 7 927 2196 1746 0 0 2 4 this 3 2197  5 other 1 2197  
788 0 0 6 928 2196 0 0 0 2 4 this 3 2196  5 other 1 2197  
789 0 0 6 929 2196 0 0 0 2 4 this 3 2196  5 other 1 2197  
790 0 0 4 930 2072 0 0 374 /**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */ 2 4 this 3 2196  5 other 1 2197  
791 0 0 6 931 1940 0 0 232 /**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */ 2 4 this 3 2197  5 other 1 2197  
792 0 0 6 932 1940 0 0 248 /**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */ 2 4 this 3 2196  6 button 1 2146  
793 0 0 6 933 1940 0 0 109 /**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */ 2 4 this 3 2197  6 button 1 2146  
794 0 0 6 934 1940 0 0 313 /**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */ 2 4 this 3 2196  6 button 1 2146  
795 0 0 6 935 1939 0 0 143 /**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */ 1 4 this 3 2197  
796 0 0 7 936 2146 1442 0 185 /**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */ 2 4 this 3 2197  5 index 1 1939  
797 0 0 6 939 1940 0 0 305 /**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2196  6 button 1 2146  
798 0 0 6 940 1940 0 0 306 /**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2196  6 button 1 2146  
799 0 0 4 941 2072 0 0 66 /**
 * Marks all monitored buttons as being in the "up" state.
 */ 1 4 this 3 2196  
800 0 0 6 942 1940 0 0 157 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */ 2 4 this 3 2197  6 button 1 2146  
801 0 0 6 942 1940 0 0 105 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */ 2 4 this 3 2197  5 index 1 1939  
802 0 0 6 943 1940 0 0 109 /**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */ 1 4 this 3 2197  
803 0 0 6 944 2086 0 0 150 /**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */ 1 4 this 3 2197  
804 0 0 4 945 2072 0 0 69 /**
 * Writes a one-line summary of the buttons known to be down.
 */ 2 4 this 3 2197  3 out 1 2082  
805 0 0 4 946 2072 0 0 123 /**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */ 2 4 this 3 2197  3 out 1 2082  
806 0 0 7 959 2199 1782 0 0 0 
807 0 0 7 959 2199 1782 0 0 1 6 param0 0 2200  
808 0 0 7 948 2146 1442 0 166 /**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */ 1 13 button_number 1 1939  
809 0 0 7 949 2146 1442 0 75 /**
 * Returns the ButtonHandle associated with the first mouse button.
 */ 0 
810 0 0 7 950 2146 1442 0 76 /**
 * Returns the ButtonHandle associated with the second mouse button.
 */ 0 
811 0 0 7 951 2146 1442 0 75 /**
 * Returns the ButtonHandle associated with the third mouse button.
 */ 0 
812 0 0 7 952 2146 1442 0 76 /**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */ 0 
813 0 0 7 953 2146 1442 0 75 /**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */ 0 
814 0 0 7 954 2146 1442 0 98 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */ 0 
815 0 0 7 955 2146 1442 0 100 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */ 0 
816 0 0 7 956 2146 1442 0 148 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
817 0 0 7 957 2146 1442 0 149 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
818 0 0 6 958 1940 0 0 117 /**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */ 1 6 button 1 2146  
819 0 0 7 975 2202 1790 0 0 0 
820 0 0 7 975 2202 1790 0 0 1 6 param0 0 2203  
821 0 0 6 963 1938 0 0 10 /**
 *
 */ 1 4 this 3 2203  
822 0 0 6 964 1938 0 0 10 /**
 *
 */ 1 4 this 3 2203  
823 0 0 6 965 1940 0 0 157 /**
 * If this returns false, the pointer is not currently present in the window
 * and the values returned by get_x() and get_y() may not be meaningful.
 */ 1 4 this 3 2203  
824 0 0 6 979 1939 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2205  
825 0 0 4 980 2072 0 0 349 /**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 2205  
826 0 0 6 981 1940 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2205  
827 0 0 6 982 1940 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2205  
828 0 0 6 984 1939 0 0 293 /**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */ 1 4 this 3 2205  
829 0 0 7 985 2084 0 0 0 0 
830 0 0 7 987 2207 1852 0 10 /**
 *
 */ 0 
831 0 0 7 987 2207 1852 0 10 /**
 *
 */ 1 4 from 1 2138  
832 0 0 7 987 2207 1852 0 0 1 6 param0 0 2140  
833 0 0 7 988 2207 1852 0 72 /**
 * Returns a SparseArray with an infinite array of bits, all on.
 */ 0 
834 0 0 7 989 2207 1852 0 56 /**
 * Returns a SparseArray whose bits are all off.
 */ 0 
835 0 0 7 990 2207 1852 0 65 /**
 * Returns a SparseArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1939  
836 0 0 7 991 2207 1852 0 64 /**
 * Returns a SparseArray with only the indicated bit on.
 */ 1 5 index 1 1939  
837 0 0 7 992 2207 1852 0 79 /**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1939  4 size 1 1939  
838 0 0 6 993 1940 0 0 393 /**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */ 0 
839 0 0 6 994 1939 0 0 428 /**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */ 0 
840 0 0 6 995 1939 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2140  
841 0 0 6 996 1940 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2140  5 index 1 1939  
842 0 0 4 997 2072 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2207  5 index 1 1939  
843 0 0 4 998 2072 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2207  5 index 1 1939  
844 0 0 4 999 2072 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2207  5 index 1 1939  5 value 1 1940  
845 0 0 6 1000 1940 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2140  
846 0 0 6 1001 1940 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2140  
847 0 0 6 1002 1940 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2140  
848 0 0 6 1003 1940 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2140  7 low_bit 1 1939  4 size 1 1939  
849 0 0 6 1004 1940 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2140  7 low_bit 1 1939  4 size 1 1939  
850 0 0 4 1005 2072 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2207  7 low_bit 1 1939  4 size 1 1939  
851 0 0 4 1006 2072 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2207  7 low_bit 1 1939  4 size 1 1939  
852 0 0 4 1007 2072 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2207  5 value 1 1940  7 low_bit 1 1939  4 size 1 1939  
853 0 0 6 1008 1939 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2140  
854 0 0 6 1009 1939 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2140  
855 0 0 6 1010 1939 0 0 146 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2140  
856 0 0 6 1011 1939 0 0 146 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2140  
857 0 0 6 1012 1939 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2140  
858 0 0 6 1013 1939 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2140  
859 0 0 6 1014 1939 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2140  7 low_bit 1 1939  
860 0 0 4 1015 2072 0 0 93 /**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2207  
861 0 0 6 1016 1940 0 0 181 /**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2140  5 other 1 2140  
862 0 0 4 1017 2072 0 0 52 /**
 * Sets all the bits in the SparseArray off.
 */ 1 4 this 3 2207  
863 0 0 4 1018 2072 0 0 10 /**
 *
 */ 2 4 this 3 2140  3 out 1 2082  
864 0 0 6 1019 1940 0 0 0 2 4 this 3 2140  5 other 1 2140  
865 0 0 6 1020 1940 0 0 0 2 4 this 3 2140  5 other 1 2140  
866 0 0 6 1021 1940 0 0 0 2 4 this 3 2140  5 other 1 2140  
867 0 0 6 1022 1939 0 0 242 /**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */ 2 4 this 3 2140  5 other 1 2140  
868 0 0 7 1023 2207 1852 0 0 2 4 this 3 2140  5 other 1 2140  
869 0 0 7 1024 2207 1852 0 0 2 4 this 3 2140  5 other 1 2140  
870 0 0 7 1025 2207 1852 0 0 2 4 this 3 2140  5 other 1 2140  
871 0 0 7 1026 2207 1852 0 0 1 4 this 3 2140  
872 0 0 7 1027 2207 1852 0 0 2 4 this 3 2140  5 shift 1 1939  
873 0 0 7 1028 2207 1852 0 0 2 4 this 3 2140  5 shift 1 1939  
874 0 0 6 1029 2207 0 0 0 2 4 this 3 2207  5 other 1 2140  
875 0 0 6 1030 2207 0 0 0 2 4 this 3 2207  5 other 1 2140  
876 0 0 6 1031 2207 0 0 0 2 4 this 3 2207  5 other 1 2140  
877 0 0 6 1032 2207 0 0 0 2 4 this 3 2207  5 shift 1 1939  
878 0 0 6 1033 2207 0 0 0 2 4 this 3 2207  5 shift 1 1939  
879 0 0 6 1034 1940 0 0 330 /**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */ 1 4 this 3 2140  
880 0 0 6 1035 2142 0 0 237 /**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */ 1 4 this 3 2140  
881 0 0 6 1036 1939 0 0 94 /**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2140  1 n 1 2142  
882 0 0 6 1037 1939 0 0 104 /**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2140  1 n 1 2142  
883 0 0 6 1038 1940 0 0 0 1 4 this 3 2140  
884 0 0 6 1039 1968 0 0 0 1 4 this 3 2140  
885 0 0 4 1040 2072 0 0 0 2 4 this 3 2207  5 state 1 1968  
886 0 0 7 1041 2084 0 0 0 0 
887 0 0 7 1044 2084 0 0 52 /**
 * Returns the type of the underlying value.
 */ 1 4 this 3 2208  
888 0 0 4 1045 2072 0 0 0 2 4 this 3 2208  3 out 1 2082  
889 0 0 7 1046 2084 0 0 0 0 
890 0 0 7 1048 2212 1061 0 10 /**
 *
 */ 1 5 value 1 2210  
891 0 0 7 1049 2027 0 0 55 /**
 * Retrieves the value stored in the parameter.
 */ 1 4 this 3 2213  
892 0 0 7 1052 2084 0 0 0 0 
893 0 0 7 1054 2215 1061 0 0 1 5 value 1 2086  
894 0 0 4 1055 2072 0 0 0 2 4 this 3 2215  5 value 1 2086  
895 0 0 6 1056 2086 0 0 0 1 4 this 3 2216  
896 0 0 7 1060 2084 0 0 0 0 
897 0 0 7 1063 2218 1061 0 0 1 5 value 1 2086  
898 0 0 4 1064 2072 0 0 0 2 4 this 3 2218  5 value 1 2086  
899 0 0 6 1065 2086 0 0 0 1 4 this 3 2219  
900 0 0 7 1067 2084 0 0 0 0 
901 0 0 7 1070 2224 1061 0 0 1 5 value 1 2221  
902 0 0 4 1071 2072 0 0 0 2 4 this 3 2224  5 value 1 2221  
903 0 0 6 1072 2221 0 0 0 1 4 this 3 2225  
904 0 0 7 1074 2084 0 0 0 0 
905 0 0 7 1077 2230 1061 0 0 1 5 value 1 2227  
906 0 0 4 1078 2072 0 0 0 2 4 this 3 2230  5 value 1 2227  
907 0 0 6 1079 2227 0 0 0 1 4 this 3 2231  
908 0 0 7 1081 2084 0 0 0 0 
909 0 0 7 1084 2236 1061 0 0 1 5 value 1 2233  
910 0 0 4 1085 2072 0 0 0 2 4 this 3 2236  5 value 1 2233  
911 0 0 6 1086 2233 0 0 0 1 4 this 3 2237  
912 0 0 7 1088 2084 0 0 0 0 
913 0 0 7 1091 2242 1061 0 0 1 5 value 1 2239  
914 0 0 4 1092 2072 0 0 0 2 4 this 3 2242  5 value 1 2239  
915 0 0 6 1093 2239 0 0 0 1 4 this 3 2243  
916 0 0 7 1095 2084 0 0 0 0 
917 0 0 7 1098 2248 1061 0 0 1 5 value 1 2245  
918 0 0 4 1099 2072 0 0 0 2 4 this 3 2248  5 value 1 2245  
919 0 0 6 1100 2245 0 0 0 1 4 this 3 2249  
920 0 0 7 1102 2084 0 0 0 0 
921 0 0 7 1105 2254 1061 0 0 1 5 value 1 2251  
922 0 0 4 1106 2072 0 0 0 2 4 this 3 2254  5 value 1 2251  
923 0 0 6 1107 2251 0 0 0 1 4 this 3 2255  
924 0 0 7 1109 2084 0 0 0 0 
925 0 0 7 1112 2260 1061 0 0 1 5 value 1 2257  
926 0 0 4 1113 2072 0 0 0 2 4 this 3 2260  5 value 1 2257  
927 0 0 6 1114 2257 0 0 0 1 4 this 3 2261  
928 0 0 7 1116 2084 0 0 0 0 
929 0 0 7 1119 2266 1061 0 0 1 5 value 1 2263  
930 0 0 4 1120 2072 0 0 0 2 4 this 3 2266  5 value 1 2263  
931 0 0 6 1121 2263 0 0 0 1 4 this 3 2267  
932 0 0 7 1123 2084 0 0 0 0 
933 0 0 7 1126 2272 1061 0 0 1 5 value 1 2269  
934 0 0 4 1127 2072 0 0 0 2 4 this 3 2272  5 value 1 2269  
935 0 0 6 1128 2269 0 0 0 1 4 this 3 2273  
936 0 0 7 1130 2084 0 0 0 0 
937 0 0 7 1133 2278 1061 0 0 1 5 value 1 2275  
938 0 0 4 1134 2072 0 0 0 2 4 this 3 2278  5 value 1 2275  
939 0 0 6 1135 2275 0 0 0 1 4 this 3 2279  
940 0 0 7 1137 2084 0 0 0 0 
941 0 0 7 1140 2284 1061 0 0 1 5 value 1 2281  
942 0 0 4 1141 2072 0 0 0 2 4 this 3 2284  5 value 1 2281  
943 0 0 6 1142 2281 0 0 0 1 4 this 3 2285  
944 0 0 7 1144 2084 0 0 0 0 
945 0 0 7 1147 2290 1061 0 0 1 5 value 1 2287  
946 0 0 4 1148 2072 0 0 0 2 4 this 3 2290  5 value 1 2287  
947 0 0 6 1149 2287 0 0 0 1 4 this 3 2291  
948 0 0 7 1151 2084 0 0 0 0 
949 0 0 7 1154 2296 1061 0 0 1 5 value 1 2293  
950 0 0 4 1155 2072 0 0 0 2 4 this 3 2296  5 value 1 2293  
951 0 0 6 1156 2293 0 0 0 1 4 this 3 2297  
952 0 0 7 1158 2084 0 0 0 0 
953 0 0 7 1166 2084 0 0 0 0 
954 0 0 7 1169 2299 1922 0 56 /**
 * Create a free id pool in the range [min:max].
 */ 2 3 min 1 2131  3 max 1 2131  
955 0 0 6 1171 2131 0 0 134 /**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */ 1 4 this 3 2299  
956 0 0 4 1172 2072 0 0 518 /**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */ 2 4 this 3 2299  2 id 1 2131  
957 0 0 6 1173 1940 0 0 119 /**
 * Checks the allocated state of an index. Returns true for
 * indices that are currently allocated and in use.
 */ 2 4 this 3 2299  5 index 1 2131  
958 0 0 6 1174 1940 0 0 278 /**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 *
 * Since 1.11.0, returns true if the index has been freed successfully
 * or false if the index has not been allocated yet, instead of
 * triggering an assertion.
 */ 2 4 this 3 2299  5 index 1 2131  
959 0 0 6 1175 2302 0 0 117 /**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */ 1 4 this 3 2300  
960 0 0 4 1176 2072 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2300  3 out 1 2082  
961 0 0 4 1177 2072 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2300  3 out 1 2082  
962 0 0 6 672 2001 0 0 0 1 3 str 1 2086  
963 0 0 6 673 2086 0 0 0 1 2 cs 1 2001  
964 0 0 6 674 2304 0 0 0 0 
965 0 0 6 675 2304 0 0 0 0 
966 0 0 6 915 2306 0 0 602 /**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */ 1 8 filename 1 2105  
967 0 0 6 916 2306 0 0 396 /**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */ 2 4 name 1 2086  4 data 1 2086  
968 0 0 6 917 1940 0 0 0 1 4 page 1 2306  
969 0 0 4 918 2072 0 0 0 1 4 hash 1 2308  
970 0 0 6 1178 1968 0 0 203 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */ 2 10 this_class 1 1968  4 data 1 2005  
971 0 0 6 1179 1968 0 0 398 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */ 3 9 unpickler 1 1968  10 this_class 1 1968  4 data 1 2005  
378
1932 29 ConstPointerToArray< ushort > 0 141313 29 ConstPointerToArray< ushort > 29 ConstPointerToArray< ushort > 0 0 0 1 975 987 0 11 976 977 978 979 980 981 982 983 984 985 986 0 0 1 0 1933 0 0 0 0 0

1933 28 PointerToArrayBase< ushort > 0 26625 28 PointerToArrayBase< ushort > 28 PointerToArrayBase< ushort > 0 0 0 0 974 0 0 0 0 1 0 1934 0 0 0 0 0

1934 49 PointerToBase< ReferenceCountedVector< ushort > > 0 43009 49 PointerToBase< ReferenceCountedVector< ushort > > 49 PointerToBase< ReferenceCountedVector< ushort > > 0 0 0 0 0 0 2 972 973 0 0 1 0 1935 0 0 0 0 0

1935 13 PointerToVoid 0 2048 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1936 24 PointerToArray< ushort > 0 141313 24 PointerToArray< ushort > 24 PointerToArray< ushort > 0 0 0 1 988 1007 0 18 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 0 0 1 0 1933 0 0 0 0 0

1937 13 AnimInterface 0 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 1008 9 2310 2311 2312 2313 2314 2315 2316 2317 2318 17 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 0 0 0 0 0 226
/**
 * This is the fundamental interface for things that have a play/loop/stop
 * type interface for frame-based animation, such as animated characters.
 * This is the base class for AnimControl and other, similar classes.
 */

1938 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1939 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1940 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1941 16 AutoTextureScale 0 532481 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0
0 8 ATS_down 8 ATS_down 0
1 6 ATS_up 6 ATS_up 0
2 7 ATS_pad 7 ATS_pad 0
3 15 ATS_unspecified 15 ATS_unspecified 0
4 0 0

1942 9 UpdateSeq 0 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 1026 1046 1 2319 19 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 0 0 0 0 0 761
/**
 * This is a sequence number that increments monotonically.  It can be used to
 * track cache updates, or serve as a kind of timestamp for any changing
 * properties.
 *
 * A special class is used instead of simply an int, so we can elegantly
 * handle such things as wraparound and special cases.  There are two special
 * cases.  Firstly, a sequence number is 'initial' when it is first created.
 * This sequence is older than any other sequence number.  Secondly, a
 * sequence number may be explicitly set to 'old'.  This is older than any
 * other sequence number except 'initial'.  Finally, we have the explicit
 * number 'fresh', which is newer than any other sequence number.  All other
 * sequences are numeric and are monotonically increasing.
 */

1943 7 Integer 0 2367488 21 AtomicAdjust::Integer 21 AtomicAdjust::Integer 1944 0 1945 0 0 0 0 0 0 0 0 0 0

1944 12 AtomicAdjust 0 1024 12 AtomicAdjust 12 AtomicAdjust 0 0 0 0 0 0 0 0 0 0 0 0 0

1945 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1946 13 TypedWritable 0 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 8 1047 1048 1049 1050 1051 1052 1053 1054 0 0 1 0 1947 0 0 0 0 135
/**
 * Base class for objects that can be written to and read from Bam files.
 *
 * See also TypedObject for detailed instructions.
 */

1947 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1948 27 TypedWritableReferenceCount 0 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 1061 0 2 1059 1060 0 0 2 3 1946 1055 1056 3 1949 1057 1058 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1949 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1950 14 BamCacheRecord 0 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 1066 5 2320 2321 2322 2323 2324 19 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 0 0 2 3 1948 1062 1063 3 1951 1064 1065 0 0 231
/**
 * An instance of this class is written to the front of a Bam or Txo file to
 * make the file a cached instance of some other loadable resource.  This
 * record contains information needed to test the validity of the cache.
 */

1951 14 LinkedListNode 0 1050624 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 468
/**
 * This just stores the pointers to implement a doubly-linked list of some
 * kind of object.  There are occasions when a hand-rolled linked list is more
 * appropriate than an STL container.
 *
 * Typically, each node of the linked list, as well as the root of the list,
 * will inherit from this class.
 *
 * Note that this class is not inherently thread-safe; derived classes are
 * responsible for protecting any calls into it within mutexes, if necessary.
 */

1952 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1953 0 0 0 0 0 0 0 0 0 0

1953 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1954 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1945 0 0 0 0 0 0 0 0 0 0

1955 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 1946 0 0 0 0 0 0 0 0 0 0

1956 8 BamCache 0 26625 8 BamCache 8 BamCache 0 0 0 1 1086 1087 9 2325 2326 2327 2328 2329 2330 2331 2332 2333 26 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 0 0 0 0 0 615
/**
 * This class maintains a cache of Bam and/or Txo objects generated from model
 * files and texture images (as well as possibly other kinds of loadable
 * objects that can be stored in bam file format).
 *
 * This class also maintains a persistent index that lists all of the cached
 * objects (see BamCacheIndex). We go through some considerable effort to make
 * sure this index gets saved correctly to disk, even in the presence of
 * multiple different processes writing to the same index, and without relying
 * too heavily on low-level os-provided file locks (which work poorly with C++
 * iostreams).
 */

1957 8 BamEnums 0 141313 8 BamEnums 8 BamEnums 0 0 0 1 1114 1115 0 0 0 0 0 0 3 1958 1959 1960 104
/**
 * This class exists just to provide scoping for the enums shared by BamReader
 * and BamWriter.
 */

1958 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1957 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0
0 15 BE_littleendian 25 BamEnums::BE_littleendian 0
1 9 BE_native 19 BamEnums::BE_native 0
1 0 365
/**
   * This defines an enumerated type used to represent the endianness of
   * certain numeric values stored in a Bam file.  It really has only two
   * possible values, either BE_bigendian or BE_littleendian; but through a
   * preprocessor trick we also add BE_native, which is the same numerically
   * as whichever value the hardware supports natively.
   */

1959 13 BamObjectCode 0 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1957 0 0 0 0 0 0 0 0 0 5 8 BOC_push 18 BamEnums::BOC_push 107
// Indicates an object definition, and will always be eventually paired
// with a BOC_pop (which does not).
0 7 BOC_pop 17 BamEnums::BOC_pop 0
1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 105
// Includes an object definition but does not push the level; it is
// associated with the current level.
2 10 BOC_remove 20 BamEnums::BOC_remove 65
// Lists object IDs that have been deallocated on the sender end.
3 13 BOC_file_data 23 BamEnums::BOC_file_data 137
// May appear at any level and indicates the following datagram contains
// auxiliary file data that may be referenced by a later object.
4 0 107
/**
   * This is the code written along with each object.  It is used to control
   * object scoping.
   */

1960 14 BamTextureMode 0 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1957 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0
0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 0
1 12 BTM_relative 22 BamEnums::BTM_relative 0
2 12 BTM_basename 22 BamEnums::BTM_basename 0
3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 0
4 0 73
// This enum is used to control how textures are written to a bam stream.

1961 13 LoaderOptions 0 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1116 1126 4 2334 2335 2336 2337 9 1117 1118 1119 1120 1121 1122 1123 1124 1125 0 0 0 0 2 1962 1963 65
/**
 * Specifies parameters that may be passed to the loader.
 */

1962 11 LoaderFlags 0 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1961 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 0
1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 0
2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 0
4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 0
8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 22
// skeleton + channels
12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 20
// disallow BamCache
16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 21
// disallow ModelPool
32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 19
// no_disk + no_ram
48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 23
// fail if not in cache
64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 35
// returned pointer might be shared
128 0 33
// Flags for loading model files.

1963 12 TextureFlags 0 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1961 0 0 0 0 0 0 0 0 0 9 10 TF_preload 25 LoaderOptions::TF_preload 30
// Texture will have RAM image
4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 37
// Texture will have simple RAM image
8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 40
// If texture is Nx1, make a 1-d texture
16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 30
// Consider generating mipmaps
32 12 TF_multiview 27 LoaderOptions::TF_multiview 36
// Load a multiview texture in pages
64 10 TF_integer 25 LoaderOptions::TF_integer 35
// Load as an integer (RGB) texture
128 8 TF_float 23 LoaderOptions::TF_float 43
// Load as a floating-point (depth) texture
256 20 TF_allow_compression 35 LoaderOptions::TF_allow_compression 33
// Consider compressing RAM image
512 13 TF_no_filters 28 LoaderOptions::TF_no_filters 38
// disallow using texture pool filters
1024 0 35
// Flags for loading texture files.

1964 9 BamReader 0 26625 9 BamReader 9 BamReader 0 0 0 1 1127 1128 6 2338 2339 2340 2341 2342 2343 20 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 0 0 1 0 1957 0 0 0 0 1311
/**
 * This is the fundamental interface for extracting binary objects from a Bam
 * file, as generated by a BamWriter.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects
 * within the Bam file; the BamReader automatically manages these (with help
 * from code within each class) and restores the pointers correctly.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramGenerator of some kind, which is simply a
 * linear source of Datagrams.  It is probably from a disk file, but it might
 * conceivably be streamed directly from a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1965 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1966 0 0 0 0 0 0 0 0 0 0

1966 17 DatagramGenerator 0 2048 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1967 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1961 0 0 0 0 0 0 0 0 0 0

1968 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1969 0 0 0 0 0 0 0 0 0 0

1969 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1970 0 0 0 0 0 0 0 0 0 0

1970 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1971 9 BamWriter 0 26625 9 BamWriter 9 BamWriter 0 0 0 1 1149 1150 6 2344 2345 2346 2347 2348 2349 16 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 0 0 1 0 1957 0 0 0 0 1376
/**
 * This is the fundamental interface for writing binary objects to a Bam file,
 * to be extracted later by a BamReader.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects; the
 * BamWriter automatically manages these (with help from code within each
 * class) and writes all referenced objects to the file in such a way that the
 * pointers may be correctly restored later.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramSink of some kind, which simply accepts a
 * linear stream of Datagrams.  It is probably written to a disk file, but it
 * might conceivably be streamed directly to a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1972 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1973 0 0 0 0 0 0 0 0 0 0

1973 12 DatagramSink 0 2048 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1974 23 BitMask< uint16_t, 16 > 0 141313 23 BitMask< uint16_t, 16 > 23 BitMask< uint16_t, 16 > 0 0 0 1 1167 1231 0 63 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 0 0 0 0 0 0

1975 9 BitMask16 0 2105345 9 BitMask16 9 BitMask16 0 0 1974 0 0 0 0 0 0 0 0 0 0

1976 23 BitMask< uint32_t, 32 > 0 141313 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 1 1232 1296 0 63 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 0 0 0 0 0 0

1977 9 BitMask32 0 2105345 9 BitMask32 9 BitMask32 0 0 1976 0 0 0 0 0 0 0 0 0 0

1978 23 BitMask< uint64_t, 64 > 0 141313 23 BitMask< uint64_t, 64 > 23 BitMask< uint64_t, 64 > 0 0 0 1 1297 1361 0 63 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 0 0 0 0 0 0

1979 9 BitMask64 0 2105345 9 BitMask64 9 BitMask64 0 0 1978 0 0 0 0 0 0 0 0 0 0

1980 13 BitMaskNative 0 1 13 BitMaskNative 13 BitMaskNative 0 0 0 0 0 0 0 0 0 0 0 0 0

1981 8 BitArray 0 141313 8 BitArray 8 BitArray 0 0 0 1 1362 1422 0 59 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 0 0 0 0 1 1982 210
/**
 * A dynamic array with an unlimited number of bits.
 *
 * This is similar to a BitMask, except it appears to contain an infinite
 * number of bits.  You can use it very much as you would use a BitMask.
 */

1982 0 0 794624 10 BitArray:: 0 1981 0 0 0 0 0 0 0 0 0 1 17 num_bits_per_word 27 BitArray::num_bits_per_word 0
64 0 0

1983 12 ButtonHandle 0 16918529 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1423 1442 4 2350 2351 2352 2353 17 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1441 0 1 1440 0 0 0 162
/**
 * A ButtonHandle represents a single button from any device, including
 * keyboard buttons and mouse buttons (but see KeyboardButton and
 * MouseButton).
 */

1984 6 string 0 2105344 11 std::string 11 std::string 0 0 1985 0 0 0 0 0 0 0 0 0 0

1985 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1986 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1987 14 ButtonRegistry 0 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 1 1448 1449 0 5 1443 1444 1445 1446 1447 0 0 0 0 0 188
/**
 * The ButtonRegistry class maintains all the assigned ButtonHandles in a
 * given system.  There should be only one ButtonRegistry class during the
 * lifetime of the application.
 */

1988 9 ButtonMap 0 141313 9 ButtonMap 9 ButtonMap 0 0 0 1 1457 1458 0 7 1450 1451 1452 1453 1454 1455 1456 0 0 1 0 1989 0 0 0 0 328
/**
 * This class represents a map containing all of the buttons of a (keyboard)
 * device, though it can also be used as a generic mapping between
 * ButtonHandles.  It maps an underlying 'raw' button to a 'virtual' button,
 * which may optionally be associated with an appropriate platform-specific
 * name for the button.
 */

1989 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1990 14 CallbackObject 0 141313 14 CallbackObject 14 CallbackObject 0 0 0 1 1462 1463 0 3 1459 1460 1461 0 0 1 0 1989 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1991 33 CachedTypedWritableReferenceCount 0 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 1 2354 5 1464 1465 1466 1467 1468 0 0 1 0 1948 0 0 0 0 722
/**
 * This is a special extension to ReferenceCount that includes dual reference
 * counts: the standard reference count number, which includes all references
 * to the object, and a separate number (the cache reference count) that
 * counts the number of references to the object just within its cache alone.
 * When get_ref_count() == get_cache_ref_count(), the object is not referenced
 * outside the cache.
 *
 * The cache refs must be explicitly maintained; there is no PointerTo<> class
 * to maintain the cache reference counts automatically.  The cache reference
 * count is automatically included in the overall reference count: calling
 * cache_ref() and cache_unref() automatically calls ref() and unref().
 */

1992 12 CallbackData 0 141313 12 CallbackData 12 CallbackData 0 0 0 0 1472 0 3 1469 1470 1471 0 0 1 0 1947 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1993 20 PythonCallbackObject 0 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1473 1463 1 2355 6 1474 1475 1476 1477 1478 1479 0 0 1 0 1990 0 0 0 0 158
/**
 * This is a specialization on CallbackObject to allow a callback to directly
 * call an arbitarary Python function.  Powerful!  But use with caution.
 */

1994 7 TimeVal 0 141313 7 TimeVal 7 TimeVal 0 0 0 1 1480 1485 1 2356 2 1481 1482 0 0 0 0 0 0

1995 9 ulong [2] 0 4202496 9 ulong [2] 9 ulong [2] 0 0 1996 2 0 0 0 0 0 0 0 0 0 0

1996 5 ulong 0 2105344 5 ulong 5 ulong 0 0 1997 0 0 0 0 0 0 0 0 0 0

1997 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1998 11 ClockObject 0 75777 11 ClockObject 11 ClockObject 0 0 0 1 1486 0 11 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 28 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 0 0 1 0 1949 0 0 0 1 1999 1000
/**
 * A ClockObject keeps track of elapsed real time and discrete time.  In
 * normal mode, get_frame_time() returns the time as of the last time tick()
 * was called.  This is the "discrete" time, and is usually used to get the
 * time as of, for instance, the beginning of the current frame.
 *
 * In other modes, as set by set_mode() or the clock-mode config variable,
 * get_frame_time() may return other values to simulate different timing
 * effects, for instance to perform non-real-time animation.  See set_mode().
 *
 * In all modes, get_real_time() always returns the elapsed real time in
 * seconds since the ClockObject was constructed, or since it was last reset.
 *
 * You can create your own ClockObject whenever you want to have your own
 * local timer.  There is also a default, global ClockObject intended to
 * represent global time for the application; this is normally set up to tick
 * every frame so that its get_frame_time() will return the time for the
 * current frame.
 */

1999 4 Mode 0 794624 17 ClockObject::Mode 17 ClockObject::Mode 1998 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0
0 15 M_non_real_time 28 ClockObject::M_non_real_time 0
1 8 M_forced 21 ClockObject::M_forced 0
2 9 M_degrade 22 ClockObject::M_degrade 0
3 7 M_slave 20 ClockObject::M_slave 0
4 9 M_limited 22 ClockObject::M_limited 0
5 9 M_integer 22 ClockObject::M_integer 0
6 17 M_integer_limited 30 ClockObject::M_integer_limited 0
7 0 0

2000 11 CollideMask 0 2105345 11 CollideMask 11 CollideMask 0 0 1977 0 0 0 0 0 0 0 0 0 0

2001 10 ColorSpace 0 532481 10 ColorSpace 10 ColorSpace 0 0 0 0 0 0 0 0 0 0 4 14 CS_unspecified 14 CS_unspecified 105
// This value is not a color space, but is used to indicate that a color
// space has not been specified.
0 9 CS_linear 9 CS_linear 389
// CS_linear is not a color space per se, but represents the working color
// space of graphics APIs, which is linearized.  Since the conversion from
// sRGB to linear is defined, one could posit that it has the ITU-R BT.709
// primaries, but this isn't meaningful as modern graphics APIs do not
// perform color management.  All colors in Panda3D are linear unless
// otherwise specified.
1 7 CS_sRGB 7 CS_sRGB 107
// This is the standard, gamma-2.2-corrected sRGB color space, as used by
// the majority of image formats.
2 8 CS_scRGB 8 CS_scRGB 110
// This is a 16-bit encoded linear color space capable of encoding color
// values in the -0.5...7.4999 range.
3 0 0

2002 17 CopyOnWriteObject 0 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1522 0 3 1519 1520 1521 0 0 1 0 1991 0 0 0 0 169
/**
 * This base class provides basic reference counting, but also can be used
 * with a CopyOnWritePointer to provide get_read_pointer() and
 * get_write_pointer().
 */

2003 14 DatagramBuffer 0 141313 14 DatagramBuffer 14 DatagramBuffer 0 0 0 1 1527 1531 1 2368 1 1528 0 0 2 3 1973 1523 1524 3 1966 1525 1526 0 0 355
/**
 * This class can be used to write a series of datagrams into a memory buffer.
 * It acts as both a datagram sink and generator; you can fill it up with
 * datagrams and then read as many datagrams from it.
 *
 * This uses the same format as DatagramInputFile and DatagramOutputFile,
 * meaning that Datagram sizes are always stored little-endian.
 */

2004 18 vector_uchar const 0 8832 18 vector_uchar const 18 vector_uchar const 0 0 2005 0 0 0 0 0 0 0 0 0 0

2005 12 vector_uchar 0 2105344 12 vector_uchar 12 vector_uchar 0 0 2006 0 0 0 0 0 0 0 0 0 0

2006 24 pvector< unsigned char > 0 2048 24 pvector< unsigned char > 24 pvector< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

2007 17 DatagramInputFile 0 75777 17 DatagramInputFile 17 DatagramInputFile 0 0 0 1 1532 0 0 4 1533 1534 1535 1536 0 0 1 0 1966 0 0 0 0 130
/**
 * This class can be used to read a binary file that consists of an arbitrary
 * header followed by a number of datagrams.
 */

2008 18 DatagramOutputFile 0 75777 18 DatagramOutputFile 18 DatagramOutputFile 0 0 0 1 1537 0 1 2369 3 1538 1539 1540 0 0 1 0 1973 0 0 0 0 131
/**
 * This class can be used to write a binary file that consists of an arbitrary
 * header followed by a number of datagrams.
 */

2009 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

2010 30 DoubleBitMask< BitMaskNative > 0 141313 30 DoubleBitMask< BitMaskNative > 30 DoubleBitMask< BitMaskNative > 0 0 0 1 1542 1597 0 54 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 0 0 0 0 0 0

2011 19 DoubleBitMaskNative 0 2105345 19 DoubleBitMaskNative 19 DoubleBitMaskNative 0 0 2010 0 0 0 0 0 0 0 0 0 0

2012 36 DoubleBitMask< DoubleBitMaskNative > 0 141313 36 DoubleBitMask< DoubleBitMaskNative > 36 DoubleBitMask< DoubleBitMaskNative > 0 0 0 1 1598 1653 0 54 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 0 0 0 0 0 0

2013 17 QuadBitMaskNative 0 2105345 17 QuadBitMaskNative 17 QuadBitMaskNative 0 0 2012 0 0 0 0 0 0 0 0 0 0

2014 8 DrawMask 0 2105345 8 DrawMask 8 DrawMask 0 0 1977 0 0 0 0 0 0 0 0 0 0

2015 13 GamepadButton 0 141313 13 GamepadButton 13 GamepadButton 0 0 0 1 1685 1686 0 31 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 0 0 0 0 0 155
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to gamepad buttons.
 */

2016 14 KeyboardButton 0 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 1 1739 1740 0 52 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard keyboard keys.
 */

2017 15 ModifierButtons 0 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1745 1746 1 2370 23 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1 2393 0 0 0 0 135
/**
 * This class monitors the state of a number of individual buttons and tracks
 * whether each button is known to be down or up.
 */

2018 11 MouseButton 0 141313 11 MouseButton 11 MouseButton 0 0 0 1 1781 1782 0 11 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard mouse buttons.
 */

2019 11 PointerType 0 8921089 11 PointerType 11 PointerType 0 0 0 0 0 0 0 0 0 0 5 7 unknown 7 unknown 0
0 5 mouse 5 mouse 0
1 6 finger 6 finger 0
2 6 stylus 6 stylus 0
3 6 eraser 6 eraser 0
4 0 48
/**
 * Contains the types of pointer device.
 */

2020 11 PointerData 0 141313 11 PointerData 11 PointerData 0 0 0 1 1789 1790 6 2371 2372 2373 2374 2375 2376 3 1783 1784 1785 0 0 0 0 0 124
/**
 * Holds the data that might be generated by a 2-d pointer input device, such
 * as the mouse in the GraphicsWindow.
 */

2021 9 MouseData 0 2105345 9 MouseData 9 MouseData 0 0 2020 0 0 0 0 0 0 0 0 0 0

2022 24 NodeCachedReferenceCount 0 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1791 1792 1793 1794 1795 1796 0 0 1 0 1991 0 0 0 1 2023 1495
/**
 * This class further specializes CachedTypedWritableReferenceCount to also
 * add a node_ref_count, for the purposes of counting the number of times the
 * object is referenced by a "node", presumably a PandaNode.
 *
 * This essentially combines the functionality of NodeReferenceCount and
 * CachedTypedWritableReferenceCount, so that a derivative of this object
 * actually has three counters: the standard reference count, the "cache"
 * reference count, and the "node" reference count.  Rather than multiply
 * inheriting from the two reference count classes, we inherit only from
 * CachedTypedWritableReferenceCount and simply duplicate the functionality of
 * NodeReferenceCount, to avoid all of the problems associated with multiple
 * inheritance.
 *
 * The intended design is to use this as a base class for RenderState and
 * TransformState, both of which are held by PandaNodes, and also have caches
 * which are independently maintained.  By keeping track of how many nodes
 * hold a pointer to a particular object, we can classify each object into
 * node-referenced, cache-referenced, or other, which is primarily useful for
 * PStats reporting.
 *
 * As with CachedTypedWritableReferenceCount's cache_ref() and cache_unref(),
 * the new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  In this case, however,
 * there does exist a NodePointerTo<> class to maintain the node_ref counters
 * automatically.
 */

2023 10 Referenced 0 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 2022 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 0
1 7 R_cache 33 NodeCachedReferenceCount::R_cache 0
2 0 0

2024 11 SparseArray 0 141313 11 SparseArray 11 SparseArray 0 0 0 1 1797 1852 0 54 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 0 0 0 0 0 736
/**
 * This class records a set of integers, where each integer is either present
 * or not present in the set.
 *
 * It is similar in principle and in interface to a BitArray (which can be
 * thought of as a set of integers, one integer corresponding to each
 * different bit position), but the SparseArray is implemented as a list of
 * min/max subrange lists, rather than as a bitmask.
 *
 * This makes it particularly efficient for storing sets which consist of
 * large sections of consecutively included or consecutively excluded
 * elements, with arbitrarily large integers, but particularly inefficient for
 * doing boolean operations such as & or |.
 *
 * Also, unlike BitArray, the SparseArray can store negative integers.
 */

2025 14 ParamValueBase 0 75777 14 ParamValueBase 14 ParamValueBase 0 0 0 0 1061 0 3 1853 1854 1855 0 0 1 0 1948 0 0 0 0 141
/**
 * A non-template base class of ParamValue (below), which serves mainly to
 * define the placeholder for the virtual output function.
 */

2026 18 ParamTypedRefCount 0 75777 18 ParamTypedRefCount 18 ParamTypedRefCount 0 0 0 1 1856 1061 1 2377 2 1857 1858 0 0 1 0 2025 0 0 0 0 143
/**
 * A class object for storing specifically objects of type
 * TypedReferenceCount, which is different than TypedWritableReferenceCount.
 */

2027 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1989 0 0 0 0 0 0 0 0 0 0

2028 20 ParamValue< string > 0 75777 25 ParamValue< std::string > 25 ParamValue< std::string > 0 0 0 1 1859 1061 1 2378 3 1860 1861 1862 0 0 1 0 2025 0 0 0 0 0

2029 10 Type const 0 8832 10 Type const 10 Type const 0 0 0 0 0 0 0 0 0 0 0 0 0

2030 11 ParamString 0 2105345 11 ParamString 11 ParamString 0 0 2028 0 0 0 0 0 0 0 0 0 0

2031 21 ParamValue< wstring > 0 75777 26 ParamValue< std::wstring > 26 ParamValue< std::wstring > 0 0 0 1 1863 1061 1 2379 3 1864 1865 1866 0 0 1 0 2025 0 0 0 0 0

2032 12 ParamWstring 0 2105345 12 ParamWstring 12 ParamWstring 0 0 2031 0 0 0 0 0 0 0 0 0 0

2033 24 ParamValue< LVecBase2d > 0 75777 24 ParamValue< LVecBase2d > 24 ParamValue< LVecBase2d > 0 0 0 1 1867 1061 1 2380 3 1868 1869 1870 0 0 1 0 2025 0 0 0 0 0

2034 14 ParamVecBase2d 0 2105345 14 ParamVecBase2d 14 ParamVecBase2d 0 0 2033 0 0 0 0 0 0 0 0 0 0

2035 24 ParamValue< LVecBase2f > 0 75777 24 ParamValue< LVecBase2f > 24 ParamValue< LVecBase2f > 0 0 0 1 1871 1061 1 2381 3 1872 1873 1874 0 0 1 0 2025 0 0 0 0 0

2036 14 ParamVecBase2f 0 2105345 14 ParamVecBase2f 14 ParamVecBase2f 0 0 2035 0 0 0 0 0 0 0 0 0 0

2037 24 ParamValue< LVecBase2i > 0 75777 24 ParamValue< LVecBase2i > 24 ParamValue< LVecBase2i > 0 0 0 1 1875 1061 1 2382 3 1876 1877 1878 0 0 1 0 2025 0 0 0 0 0

2038 14 ParamVecBase2i 0 2105345 14 ParamVecBase2i 14 ParamVecBase2i 0 0 2037 0 0 0 0 0 0 0 0 0 0

2039 24 ParamValue< LVecBase3d > 0 75777 24 ParamValue< LVecBase3d > 24 ParamValue< LVecBase3d > 0 0 0 1 1879 1061 1 2383 3 1880 1881 1882 0 0 1 0 2025 0 0 0 0 0

2040 14 ParamVecBase3d 0 2105345 14 ParamVecBase3d 14 ParamVecBase3d 0 0 2039 0 0 0 0 0 0 0 0 0 0

2041 24 ParamValue< LVecBase3f > 0 75777 24 ParamValue< LVecBase3f > 24 ParamValue< LVecBase3f > 0 0 0 1 1883 1061 1 2384 3 1884 1885 1886 0 0 1 0 2025 0 0 0 0 0

2042 14 ParamVecBase3f 0 2105345 14 ParamVecBase3f 14 ParamVecBase3f 0 0 2041 0 0 0 0 0 0 0 0 0 0

2043 24 ParamValue< LVecBase3i > 0 75777 24 ParamValue< LVecBase3i > 24 ParamValue< LVecBase3i > 0 0 0 1 1887 1061 1 2385 3 1888 1889 1890 0 0 1 0 2025 0 0 0 0 0

2044 14 ParamVecBase3i 0 2105345 14 ParamVecBase3i 14 ParamVecBase3i 0 0 2043 0 0 0 0 0 0 0 0 0 0

2045 24 ParamValue< LVecBase4d > 0 75777 24 ParamValue< LVecBase4d > 24 ParamValue< LVecBase4d > 0 0 0 1 1891 1061 1 2386 3 1892 1893 1894 0 0 1 0 2025 0 0 0 0 0

2046 14 ParamVecBase4d 0 2105345 14 ParamVecBase4d 14 ParamVecBase4d 0 0 2045 0 0 0 0 0 0 0 0 0 0

2047 24 ParamValue< LVecBase4f > 0 75777 24 ParamValue< LVecBase4f > 24 ParamValue< LVecBase4f > 0 0 0 1 1895 1061 1 2387 3 1896 1897 1898 0 0 1 0 2025 0 0 0 0 0

2048 14 ParamVecBase4f 0 2105345 14 ParamVecBase4f 14 ParamVecBase4f 0 0 2047 0 0 0 0 0 0 0 0 0 0

2049 24 ParamValue< LVecBase4i > 0 75777 24 ParamValue< LVecBase4i > 24 ParamValue< LVecBase4i > 0 0 0 1 1899 1061 1 2388 3 1900 1901 1902 0 0 1 0 2025 0 0 0 0 0

2050 14 ParamVecBase4i 0 2105345 14 ParamVecBase4i 14 ParamVecBase4i 0 0 2049 0 0 0 0 0 0 0 0 0 0

2051 23 ParamValue< LMatrix3d > 0 75777 23 ParamValue< LMatrix3d > 23 ParamValue< LMatrix3d > 0 0 0 1 1903 1061 1 2389 3 1904 1905 1906 0 0 1 0 2025 0 0 0 0 0

2052 13 ParamMatrix3d 0 2105345 13 ParamMatrix3d 13 ParamMatrix3d 0 0 2051 0 0 0 0 0 0 0 0 0 0

2053 23 ParamValue< LMatrix3f > 0 75777 23 ParamValue< LMatrix3f > 23 ParamValue< LMatrix3f > 0 0 0 1 1907 1061 1 2390 3 1908 1909 1910 0 0 1 0 2025 0 0 0 0 0

2054 13 ParamMatrix3f 0 2105345 13 ParamMatrix3f 13 ParamMatrix3f 0 0 2053 0 0 0 0 0 0 0 0 0 0

2055 23 ParamValue< LMatrix4d > 0 75777 23 ParamValue< LMatrix4d > 23 ParamValue< LMatrix4d > 0 0 0 1 1911 1061 1 2391 3 1912 1913 1914 0 0 1 0 2025 0 0 0 0 0

2056 13 ParamMatrix4d 0 2105345 13 ParamMatrix4d 13 ParamMatrix4d 0 0 2055 0 0 0 0 0 0 0 0 0 0

2057 23 ParamValue< LMatrix4f > 0 75777 23 ParamValue< LMatrix4f > 23 ParamValue< LMatrix4f > 0 0 0 1 1915 1061 1 2392 3 1916 1917 1918 0 0 1 0 2025 0 0 0 0 0

2058 13 ParamMatrix4f 0 2105345 13 ParamMatrix4f 13 ParamMatrix4f 0 0 2057 0 0 0 0 0 0 0 0 0 0

2059 13 ParamVecBase2 0 2105345 13 ParamVecBase2 13 ParamVecBase2 0 0 2036 0 0 0 0 0 0 0 0 0 0

2060 13 ParamVecBase3 0 2105345 13 ParamVecBase3 13 ParamVecBase3 0 0 2042 0 0 0 0 0 0 0 0 0 0

2061 13 ParamVecBase4 0 2105345 13 ParamVecBase4 13 ParamVecBase4 0 0 2048 0 0 0 0 0 0 0 0 0 0

2062 12 ParamMatrix3 0 2105345 12 ParamMatrix3 12 ParamMatrix3 0 0 2054 0 0 0 0 0 0 0 0 0 0

2063 12 ParamMatrix4 0 2105345 12 ParamMatrix4 12 ParamMatrix4 0 0 2058 0 0 0 0 0 0 0 0 0 0

2064 20 WritableConfigurable 0 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1920 0 1 1919 0 0 1 0 1946 0 0 0 0 379
/**
 * Defined as a fix to allow creating Configurable and Writable objects.
 * Otherwise the compiler gets confused since both TypedWritable and
 * Configurable inherit from TypedObject.
 *
 * An object that has data or parameters that are set less frequently (at
 * least occasionally) than every frame.  We can cache the configuration info
 * by by using the "dirty" flag.
 */

2065 17 UniqueIdAllocator 0 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1921 1922 0 7 1923 1924 1925 1926 1927 1928 1929 0 0 0 0 0 812
/**
 * Manage a set of ID values from min to max inclusive.  The ID numbers that
 * are freed will be allocated (reused) in the same order.  I.e.  the oldest
 * ID numbers will be allocated.
 *
 * This implementation will use 4 bytes per id number, plus a few bytes of
 * management data.  e.g.  10,000 ID numbers will use 40KB.
 *
 * Also be advised that ID -1 and -2 are used internally by the allocator.  If
 * allocate returns IndexEnd (-1) then the allocator is out of free ID
 * numbers.
 *
 * There are other implementations that can better leverage runs of used or
 * unused IDs or use bit arrays for the IDs.  But, it takes extra work to
 * track the age of freed IDs, which is required for what we wanted.  If you
 * would like to kick around other implementation ideas, please contact
 * Schuyler.
 */

2066 10 PortalMask 0 2105345 10 PortalMask 10 PortalMask 0 0 1977 0 0 0 0 0 0 0 0 0 0

2067 37 ConstPointerToArray< ushort > const * 0 8576 37 ConstPointerToArray< ushort > const * 37 ConstPointerToArray< ushort > const * 0 0 2068 0 0 0 0 0 0 0 0 0 0

2068 35 ConstPointerToArray< ushort > const 0 8832 35 ConstPointerToArray< ushort > const 35 ConstPointerToArray< ushort > const 0 0 1932 0 0 0 0 0 0 0 0 0 0

2069 31 ConstPointerToArray< ushort > * 0 8576 31 ConstPointerToArray< ushort > * 31 ConstPointerToArray< ushort > * 0 0 1932 0 0 0 0 0 0 0 0 0 0

2070 32 PointerToArray< ushort > const * 0 8576 32 PointerToArray< ushort > const * 32 PointerToArray< ushort > const * 0 0 2071 0 0 0 0 0 0 0 0 0 0

2071 30 PointerToArray< ushort > const 0 8832 30 PointerToArray< ushort > const 30 PointerToArray< ushort > const 0 0 1936 0 0 0 0 0 0 0 0 0 0

2072 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2073 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2074 6 ushort 0 2105344 6 ushort 6 ushort 0 0 2075 0 0 0 0 0 0 0 0 0 0

2075 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2076 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 2077 0 0 0 0 0 0 0 0 0 0

2077 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 2078 0 0 0 0 0 0 0 0 0 0

2078 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

2079 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 8576 51 PointerToBase< ReferenceCountedVector< ushort > > * 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 0 1934 0 0 0 0 0 0 0 0 0 0

2080 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< ushort > > const * 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 0 2081 0 0 0 0 0 0 0 0 0 0

2081 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 8832 55 PointerToBase< ReferenceCountedVector< ushort > > const 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 0 1934 0 0 0 0 0 0 0 0 0 0

2082 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 2009 0 0 0 0 0 0 0 0 0 0

2083 26 PointerToArray< ushort > * 0 8576 26 PointerToArray< ushort > * 26 PointerToArray< ushort > * 0 0 1936 0 0 0 0 0 0 0 0 0 0

2084 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2085 0 0 0 0 0 0 0 0 0 0

2085 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

2086 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2087 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 1937 0 0 0 0 0 0 0 0 0 0

2088 21 AnimInterface const * 0 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 2089 0 0 0 0 0 0 0 0 0 0

2089 19 AnimInterface const 0 8832 19 AnimInterface const 19 AnimInterface const 0 0 1937 0 0 0 0 0 0 0 0 0 0

2090 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1942 0 0 0 0 0 0 0 0 0 0

2091 17 UpdateSeq const * 0 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 2092 0 0 0 0 0 0 0 0 0 0

2092 15 UpdateSeq const 0 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1942 0 0 0 0 0 0 0 0 0 0

2093 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2094 0 0 0 0 0 0 0 0 0 0

2094 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 0

2095 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 1964 0 0 0 0 0 0 0 0 0 0

2096 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 2097 0 0 0 0 0 0 0 0 0 0

2097 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 1946 0 0 0 0 0 0 0 0 0 0

2098 14 vector_uchar * 0 8576 14 vector_uchar * 14 vector_uchar * 0 0 2005 0 0 0 0 0 0 0 0 0 0

2099 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 1971 0 0 0 0 0 0 0 0 0 0

2100 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1948 0 0 0 0 0 0 0 0 0 0

2101 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1949 0 0 0 0 0 0 0 0 0 0

2102 22 BamCacheRecord const * 0 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 2103 0 0 0 0 0 0 0 0 0 0

2103 20 BamCacheRecord const 0 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1950 0 0 0 0 0 0 0 0 0 0

2104 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1950 0 0 0 0 0 0 0 0 0 0

2105 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1952 0 0 0 0 0 0 0 0 0 0

2106 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 2107 0 0 0 0 0 0 0 0 0 0

2107 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 2108 0 0 0 0 0 0 0 0 0 0

2108 11 VirtualFile 0 2048 11 VirtualFile 11 VirtualFile 0 0 0 0 0 0 0 0 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

2109 10 BamCache * 0 8576 10 BamCache * 10 BamCache * 0 0 1956 0 0 0 0 0 0 0 0 0 0

2110 16 BamCache const * 0 8576 16 BamCache const * 16 BamCache const * 0 0 2111 0 0 0 0 0 0 0 0 0 0

2111 14 BamCache const 0 8832 14 BamCache const 14 BamCache const 0 0 1956 0 0 0 0 0 0 0 0 0 0

2112 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1953 0 0 0 0 0 0 0 0 0 0

2113 10 BamEnums * 0 8576 10 BamEnums * 10 BamEnums * 0 0 1957 0 0 0 0 0 0 0 0 0 0

2114 16 BamEnums const * 0 8576 16 BamEnums const * 16 BamEnums const * 0 0 2115 0 0 0 0 0 0 0 0 0 0

2115 14 BamEnums const 0 8832 14 BamEnums const 14 BamEnums const 0 0 1957 0 0 0 0 0 0 0 0 0 0

2116 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1967 0 0 0 0 0 0 0 0 0 0

2117 15 LoaderOptions * 0 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1961 0 0 0 0 0 0 0 0 0 0

2118 9 AuxData * 0 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 2119 0 0 0 0 0 0 0 0 0 0

2119 7 AuxData 0 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1964 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on the
// bamReader (via set_aux_data() and get_aux_data()) for any particular
// objects during the bam reading process.

2120 17 BamReader const * 0 8576 17 BamReader const * 17 BamReader const * 0 0 2121 0 0 0 0 0 0 0 0 0 0

2121 15 BamReader const 0 8832 15 BamReader const 15 BamReader const 0 0 1964 0 0 0 0 0 0 0 0 0 0

2122 17 BamWriter const * 0 8576 17 BamWriter const * 17 BamWriter const * 0 0 2123 0 0 0 0 0 0 0 0 0 0

2123 15 BamWriter const 0 8832 15 BamWriter const 15 BamWriter const 0 0 1971 0 0 0 0 0 0 0 0 0 0

2124 25 BitMask< uint16_t, 16 > * 0 8576 25 BitMask< uint16_t, 16 > * 25 BitMask< uint16_t, 16 > * 0 0 1974 0 0 0 0 0 0 0 0 0 0

2125 31 BitMask< uint16_t, 16 > const * 0 8576 31 BitMask< uint16_t, 16 > const * 31 BitMask< uint16_t, 16 > const * 0 0 2126 0 0 0 0 0 0 0 0 0 0

2126 29 BitMask< uint16_t, 16 > const 0 8832 29 BitMask< uint16_t, 16 > const 29 BitMask< uint16_t, 16 > const 0 0 1974 0 0 0 0 0 0 0 0 0 0

2127 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 2075 0 0 0 0 0 0 0 0 0 0

2128 25 BitMask< uint32_t, 32 > * 0 8576 25 BitMask< uint32_t, 32 > * 25 BitMask< uint32_t, 32 > * 0 0 1976 0 0 0 0 0 0 0 0 0 0

2129 31 BitMask< uint32_t, 32 > const * 0 8576 31 BitMask< uint32_t, 32 > const * 31 BitMask< uint32_t, 32 > const * 0 0 2130 0 0 0 0 0 0 0 0 0 0

2130 29 BitMask< uint32_t, 32 > const 0 8832 29 BitMask< uint32_t, 32 > const 29 BitMask< uint32_t, 32 > const 0 0 1976 0 0 0 0 0 0 0 0 0 0

2131 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 2132 0 0 0 0 0 0 0 0 0 0

2132 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2133 25 BitMask< uint64_t, 64 > * 0 8576 25 BitMask< uint64_t, 64 > * 25 BitMask< uint64_t, 64 > * 0 0 1978 0 0 0 0 0 0 0 0 0 0

2134 31 BitMask< uint64_t, 64 > const * 0 8576 31 BitMask< uint64_t, 64 > const * 31 BitMask< uint64_t, 64 > const * 0 0 2135 0 0 0 0 0 0 0 0 0 0

2135 29 BitMask< uint64_t, 64 > const 0 8832 29 BitMask< uint64_t, 64 > const 29 BitMask< uint64_t, 64 > const 0 0 1978 0 0 0 0 0 0 0 0 0 0

2136 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 2073 0 0 0 0 0 0 0 0 0 0

2137 10 BitArray * 0 8576 10 BitArray * 10 BitArray * 0 0 1981 0 0 0 0 0 0 0 0 0 0

2138 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 2139 0 0 0 0 0 0 0 0 0 0

2139 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 1981 0 0 0 0 0 0 0 0 0 0

2140 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 2141 0 0 0 0 0 0 0 0 0 0

2141 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 2024 0 0 0 0 0 0 0 0 0 0

2142 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 2073 0 0 0 0 0 0 0 0 0 0

2143 8 WordType 0 2367488 18 BitArray::WordType 18 BitArray::WordType 1981 0 2136 0 0 0 0 0 0 0 0 0 0

2144 8 MaskType 0 2367488 18 BitArray::MaskType 18 BitArray::MaskType 1981 0 1980 0 0 0 0 0 0 0 0 0 0

2145 10 MaskType * 0 8576 20 BitArray::MaskType * 20 BitArray::MaskType * 0 0 2144 0 0 0 0 0 0 0 0 0 0

2146 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1983 0 0 0 0 0 0 0 0 0 0

2147 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 2148 0 0 0 0 0 0 0 0 0 0

2148 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1983 0 0 0 0 0 0 0 0 0 0

2149 22 ButtonRegistry const * 0 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 2150 0 0 0 0 0 0 0 0 0 0

2150 20 ButtonRegistry const 0 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1987 0 0 0 0 0 0 0 0 0 0

2151 16 ButtonRegistry * 0 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1987 0 0 0 0 0 0 0 0 0 0

2152 11 ButtonMap * 0 8576 11 ButtonMap * 11 ButtonMap * 0 0 1988 0 0 0 0 0 0 0 0 0 0

2153 17 ButtonMap const * 0 8576 17 ButtonMap const * 17 ButtonMap const * 0 0 2154 0 0 0 0 0 0 0 0 0 0

2154 15 ButtonMap const 0 8832 15 ButtonMap const 15 ButtonMap const 0 0 1988 0 0 0 0 0 0 0 0 0 0

2155 22 CallbackObject const * 0 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 2156 0 0 0 0 0 0 0 0 0 0

2156 20 CallbackObject const 0 8832 20 CallbackObject const 20 CallbackObject const 0 0 1990 0 0 0 0 0 0 0 0 0 0

2157 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1990 0 0 0 0 0 0 0 0 0 0

2158 41 CachedTypedWritableReferenceCount const * 0 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 2159 0 0 0 0 0 0 0 0 0 0

2159 39 CachedTypedWritableReferenceCount const 0 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1991 0 0 0 0 0 0 0 0 0 0

2160 20 CallbackData const * 0 8576 20 CallbackData const * 20 CallbackData const * 0 0 2161 0 0 0 0 0 0 0 0 0 0

2161 18 CallbackData const 0 8832 18 CallbackData const 18 CallbackData const 0 0 1992 0 0 0 0 0 0 0 0 0 0

2162 14 CallbackData * 0 8576 14 CallbackData * 14 CallbackData * 0 0 1992 0 0 0 0 0 0 0 0 0 0

2163 22 PythonCallbackObject * 0 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1993 0 0 0 0 0 0 0 0 0 0

2164 28 PythonCallbackObject const * 0 8576 28 PythonCallbackObject const * 28 PythonCallbackObject const * 0 0 2165 0 0 0 0 0 0 0 0 0 0

2165 26 PythonCallbackObject const 0 8832 26 PythonCallbackObject const 26 PythonCallbackObject const 0 0 1993 0 0 0 0 0 0 0 0 0 0

2166 9 TimeVal * 0 8576 9 TimeVal * 9 TimeVal * 0 0 1994 0 0 0 0 0 0 0 0 0 0

2167 15 TimeVal const * 0 8576 15 TimeVal const * 15 TimeVal const * 0 0 2168 0 0 0 0 0 0 0 0 0 0

2168 13 TimeVal const 0 8832 13 TimeVal const 13 TimeVal const 0 0 1994 0 0 0 0 0 0 0 0 0 0

2169 19 ClockObject const * 0 8576 19 ClockObject const * 19 ClockObject const * 0 0 2170 0 0 0 0 0 0 0 0 0 0

2170 17 ClockObject const 0 8832 17 ClockObject const 17 ClockObject const 0 0 1998 0 0 0 0 0 0 0 0 0 0

2171 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 1998 0 0 0 0 0 0 0 0 0 0

2172 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 2173 0 0 0 0 0 0 0 0 0 0

2173 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 396
/**
 * A thread; that is, a lightweight process.  This is an abstract base class;
 * to use it, you must subclass from it and redefine thread_main().
 *
 * The thread itself will keep a reference count on the Thread object while it
 * is running; when the thread returns from its root function, the Thread
 * object will automatically be destructed if no other pointers are
 * referencing it.
 */

2174 25 CopyOnWriteObject const * 0 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 2175 0 0 0 0 0 0 0 0 0 0

2175 23 CopyOnWriteObject const 0 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 2002 0 0 0 0 0 0 0 0 0 0

2176 16 DatagramBuffer * 0 8576 16 DatagramBuffer * 16 DatagramBuffer * 0 0 2003 0 0 0 0 0 0 0 0 0 0

2177 19 DatagramInputFile * 0 8576 19 DatagramInputFile * 19 DatagramInputFile * 0 0 2007 0 0 0 0 0 0 0 0 0 0

2178 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 2179 0 0 0 0 0 0 0 0 0 0

2179 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2180 0 0 0 0 0 0 0 0 0 0

2180 13 FileReference 0 2048 13 FileReference 13 FileReference 0 0 0 0 0 0 0 0 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

2181 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 2182 0 0 0 0 0 0 0 0 0 0

2182 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2183 20 DatagramOutputFile * 0 8576 20 DatagramOutputFile * 20 DatagramOutputFile * 0 0 2008 0 0 0 0 0 0 0 0 0 0

2184 32 DoubleBitMask< BitMaskNative > * 0 8576 32 DoubleBitMask< BitMaskNative > * 32 DoubleBitMask< BitMaskNative > * 0 0 2010 0 0 0 0 0 0 0 0 0 0

2185 38 DoubleBitMask< BitMaskNative > const * 0 8576 38 DoubleBitMask< BitMaskNative > const * 38 DoubleBitMask< BitMaskNative > const * 0 0 2186 0 0 0 0 0 0 0 0 0 0

2186 36 DoubleBitMask< BitMaskNative > const 0 8832 36 DoubleBitMask< BitMaskNative > const 36 DoubleBitMask< BitMaskNative > const 0 0 2010 0 0 0 0 0 0 0 0 0 0

2187 38 DoubleBitMask< DoubleBitMaskNative > * 0 8576 38 DoubleBitMask< DoubleBitMaskNative > * 38 DoubleBitMask< DoubleBitMaskNative > * 0 0 2012 0 0 0 0 0 0 0 0 0 0

2188 44 DoubleBitMask< DoubleBitMaskNative > const * 0 8576 44 DoubleBitMask< DoubleBitMaskNative > const * 44 DoubleBitMask< DoubleBitMaskNative > const * 0 0 2189 0 0 0 0 0 0 0 0 0 0

2189 42 DoubleBitMask< DoubleBitMaskNative > const 0 8832 42 DoubleBitMask< DoubleBitMaskNative > const 42 DoubleBitMask< DoubleBitMaskNative > const 0 0 2012 0 0 0 0 0 0 0 0 0 0

2190 15 GamepadButton * 0 8576 15 GamepadButton * 15 GamepadButton * 0 0 2015 0 0 0 0 0 0 0 0 0 0

2191 21 GamepadButton const * 0 8576 21 GamepadButton const * 21 GamepadButton const * 0 0 2192 0 0 0 0 0 0 0 0 0 0

2192 19 GamepadButton const 0 8832 19 GamepadButton const 19 GamepadButton const 0 0 2015 0 0 0 0 0 0 0 0 0 0

2193 16 KeyboardButton * 0 8576 16 KeyboardButton * 16 KeyboardButton * 0 0 2016 0 0 0 0 0 0 0 0 0 0

2194 22 KeyboardButton const * 0 8576 22 KeyboardButton const * 22 KeyboardButton const * 0 0 2195 0 0 0 0 0 0 0 0 0 0

2195 20 KeyboardButton const 0 8832 20 KeyboardButton const 20 KeyboardButton const 0 0 2016 0 0 0 0 0 0 0 0 0 0

2196 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 2017 0 0 0 0 0 0 0 0 0 0

2197 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 2198 0 0 0 0 0 0 0 0 0 0

2198 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 2017 0 0 0 0 0 0 0 0 0 0

2199 13 MouseButton * 0 8576 13 MouseButton * 13 MouseButton * 0 0 2018 0 0 0 0 0 0 0 0 0 0

2200 19 MouseButton const * 0 8576 19 MouseButton const * 19 MouseButton const * 0 0 2201 0 0 0 0 0 0 0 0 0 0

2201 17 MouseButton const 0 8832 17 MouseButton const 17 MouseButton const 0 0 2018 0 0 0 0 0 0 0 0 0 0

2202 13 PointerData * 0 8576 13 PointerData * 13 PointerData * 0 0 2020 0 0 0 0 0 0 0 0 0 0

2203 19 PointerData const * 0 8576 19 PointerData const * 19 PointerData const * 0 0 2204 0 0 0 0 0 0 0 0 0 0

2204 17 PointerData const 0 8832 17 PointerData const 17 PointerData const 0 0 2020 0 0 0 0 0 0 0 0 0 0

2205 32 NodeCachedReferenceCount const * 0 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 2206 0 0 0 0 0 0 0 0 0 0

2206 30 NodeCachedReferenceCount const 0 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 2022 0 0 0 0 0 0 0 0 0 0

2207 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 2024 0 0 0 0 0 0 0 0 0 0

2208 22 ParamValueBase const * 0 8576 22 ParamValueBase const * 22 ParamValueBase const * 0 0 2209 0 0 0 0 0 0 0 0 0 0

2209 20 ParamValueBase const 0 8832 20 ParamValueBase const 20 ParamValueBase const 0 0 2025 0 0 0 0 0 0 0 0 0 0

2210 27 TypedReferenceCount const * 0 8576 27 TypedReferenceCount const * 27 TypedReferenceCount const * 0 0 2211 0 0 0 0 0 0 0 0 0 0

2211 25 TypedReferenceCount const 0 8832 25 TypedReferenceCount const 25 TypedReferenceCount const 0 0 1989 0 0 0 0 0 0 0 0 0 0

2212 20 ParamTypedRefCount * 0 8576 20 ParamTypedRefCount * 20 ParamTypedRefCount * 0 0 2026 0 0 0 0 0 0 0 0 0 0

2213 26 ParamTypedRefCount const * 0 8576 26 ParamTypedRefCount const * 26 ParamTypedRefCount const * 0 0 2214 0 0 0 0 0 0 0 0 0 0

2214 24 ParamTypedRefCount const 0 8832 24 ParamTypedRefCount const 24 ParamTypedRefCount const 0 0 2026 0 0 0 0 0 0 0 0 0 0

2215 22 ParamValue< string > * 0 8576 27 ParamValue< std::string > * 27 ParamValue< std::string > * 0 0 2028 0 0 0 0 0 0 0 0 0 0

2216 28 ParamValue< string > const * 0 8576 33 ParamValue< std::string > const * 33 ParamValue< std::string > const * 0 0 2217 0 0 0 0 0 0 0 0 0 0

2217 26 ParamValue< string > const 0 8832 31 ParamValue< std::string > const 31 ParamValue< std::string > const 0 0 2028 0 0 0 0 0 0 0 0 0 0

2218 23 ParamValue< wstring > * 0 8576 28 ParamValue< std::wstring > * 28 ParamValue< std::wstring > * 0 0 2031 0 0 0 0 0 0 0 0 0 0

2219 29 ParamValue< wstring > const * 0 8576 34 ParamValue< std::wstring > const * 34 ParamValue< std::wstring > const * 0 0 2220 0 0 0 0 0 0 0 0 0 0

2220 27 ParamValue< wstring > const 0 8832 32 ParamValue< std::wstring > const 32 ParamValue< std::wstring > const 0 0 2031 0 0 0 0 0 0 0 0 0 0

2221 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2222 0 0 0 0 0 0 0 0 0 0

2222 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2223 0 0 0 0 0 0 0 0 0 0

2223 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2224 26 ParamValue< LVecBase2d > * 0 8576 26 ParamValue< LVecBase2d > * 26 ParamValue< LVecBase2d > * 0 0 2033 0 0 0 0 0 0 0 0 0 0

2225 32 ParamValue< LVecBase2d > const * 0 8576 32 ParamValue< LVecBase2d > const * 32 ParamValue< LVecBase2d > const * 0 0 2226 0 0 0 0 0 0 0 0 0 0

2226 30 ParamValue< LVecBase2d > const 0 8832 30 ParamValue< LVecBase2d > const 30 ParamValue< LVecBase2d > const 0 0 2033 0 0 0 0 0 0 0 0 0 0

2227 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2228 0 0 0 0 0 0 0 0 0 0

2228 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2229 0 0 0 0 0 0 0 0 0 0

2229 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2230 26 ParamValue< LVecBase2f > * 0 8576 26 ParamValue< LVecBase2f > * 26 ParamValue< LVecBase2f > * 0 0 2035 0 0 0 0 0 0 0 0 0 0

2231 32 ParamValue< LVecBase2f > const * 0 8576 32 ParamValue< LVecBase2f > const * 32 ParamValue< LVecBase2f > const * 0 0 2232 0 0 0 0 0 0 0 0 0 0

2232 30 ParamValue< LVecBase2f > const 0 8832 30 ParamValue< LVecBase2f > const 30 ParamValue< LVecBase2f > const 0 0 2035 0 0 0 0 0 0 0 0 0 0

2233 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 2234 0 0 0 0 0 0 0 0 0 0

2234 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 2235 0 0 0 0 0 0 0 0 0 0

2235 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2236 26 ParamValue< LVecBase2i > * 0 8576 26 ParamValue< LVecBase2i > * 26 ParamValue< LVecBase2i > * 0 0 2037 0 0 0 0 0 0 0 0 0 0

2237 32 ParamValue< LVecBase2i > const * 0 8576 32 ParamValue< LVecBase2i > const * 32 ParamValue< LVecBase2i > const * 0 0 2238 0 0 0 0 0 0 0 0 0 0

2238 30 ParamValue< LVecBase2i > const 0 8832 30 ParamValue< LVecBase2i > const 30 ParamValue< LVecBase2i > const 0 0 2037 0 0 0 0 0 0 0 0 0 0

2239 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2240 0 0 0 0 0 0 0 0 0 0

2240 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2241 0 0 0 0 0 0 0 0 0 0

2241 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2242 26 ParamValue< LVecBase3d > * 0 8576 26 ParamValue< LVecBase3d > * 26 ParamValue< LVecBase3d > * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2243 32 ParamValue< LVecBase3d > const * 0 8576 32 ParamValue< LVecBase3d > const * 32 ParamValue< LVecBase3d > const * 0 0 2244 0 0 0 0 0 0 0 0 0 0

2244 30 ParamValue< LVecBase3d > const 0 8832 30 ParamValue< LVecBase3d > const 30 ParamValue< LVecBase3d > const 0 0 2039 0 0 0 0 0 0 0 0 0 0

2245 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2246 0 0 0 0 0 0 0 0 0 0

2246 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2247 0 0 0 0 0 0 0 0 0 0

2247 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2248 26 ParamValue< LVecBase3f > * 0 8576 26 ParamValue< LVecBase3f > * 26 ParamValue< LVecBase3f > * 0 0 2041 0 0 0 0 0 0 0 0 0 0

2249 32 ParamValue< LVecBase3f > const * 0 8576 32 ParamValue< LVecBase3f > const * 32 ParamValue< LVecBase3f > const * 0 0 2250 0 0 0 0 0 0 0 0 0 0

2250 30 ParamValue< LVecBase3f > const 0 8832 30 ParamValue< LVecBase3f > const 30 ParamValue< LVecBase3f > const 0 0 2041 0 0 0 0 0 0 0 0 0 0

2251 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 2252 0 0 0 0 0 0 0 0 0 0

2252 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 2253 0 0 0 0 0 0 0 0 0 0

2253 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2254 26 ParamValue< LVecBase3i > * 0 8576 26 ParamValue< LVecBase3i > * 26 ParamValue< LVecBase3i > * 0 0 2043 0 0 0 0 0 0 0 0 0 0

2255 32 ParamValue< LVecBase3i > const * 0 8576 32 ParamValue< LVecBase3i > const * 32 ParamValue< LVecBase3i > const * 0 0 2256 0 0 0 0 0 0 0 0 0 0

2256 30 ParamValue< LVecBase3i > const 0 8832 30 ParamValue< LVecBase3i > const 30 ParamValue< LVecBase3i > const 0 0 2043 0 0 0 0 0 0 0 0 0 0

2257 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2258 0 0 0 0 0 0 0 0 0 0

2258 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2259 0 0 0 0 0 0 0 0 0 0

2259 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2260 26 ParamValue< LVecBase4d > * 0 8576 26 ParamValue< LVecBase4d > * 26 ParamValue< LVecBase4d > * 0 0 2045 0 0 0 0 0 0 0 0 0 0

2261 32 ParamValue< LVecBase4d > const * 0 8576 32 ParamValue< LVecBase4d > const * 32 ParamValue< LVecBase4d > const * 0 0 2262 0 0 0 0 0 0 0 0 0 0

2262 30 ParamValue< LVecBase4d > const 0 8832 30 ParamValue< LVecBase4d > const 30 ParamValue< LVecBase4d > const 0 0 2045 0 0 0 0 0 0 0 0 0 0

2263 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2264 0 0 0 0 0 0 0 0 0 0

2264 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2265 0 0 0 0 0 0 0 0 0 0

2265 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2266 26 ParamValue< LVecBase4f > * 0 8576 26 ParamValue< LVecBase4f > * 26 ParamValue< LVecBase4f > * 0 0 2047 0 0 0 0 0 0 0 0 0 0

2267 32 ParamValue< LVecBase4f > const * 0 8576 32 ParamValue< LVecBase4f > const * 32 ParamValue< LVecBase4f > const * 0 0 2268 0 0 0 0 0 0 0 0 0 0

2268 30 ParamValue< LVecBase4f > const 0 8832 30 ParamValue< LVecBase4f > const 30 ParamValue< LVecBase4f > const 0 0 2047 0 0 0 0 0 0 0 0 0 0

2269 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 2270 0 0 0 0 0 0 0 0 0 0

2270 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 2271 0 0 0 0 0 0 0 0 0 0

2271 10 LVecBase4i 0 2048 10 LVecBase4i 10 LVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2272 26 ParamValue< LVecBase4i > * 0 8576 26 ParamValue< LVecBase4i > * 26 ParamValue< LVecBase4i > * 0 0 2049 0 0 0 0 0 0 0 0 0 0

2273 32 ParamValue< LVecBase4i > const * 0 8576 32 ParamValue< LVecBase4i > const * 32 ParamValue< LVecBase4i > const * 0 0 2274 0 0 0 0 0 0 0 0 0 0

2274 30 ParamValue< LVecBase4i > const 0 8832 30 ParamValue< LVecBase4i > const 30 ParamValue< LVecBase4i > const 0 0 2049 0 0 0 0 0 0 0 0 0 0

2275 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2276 0 0 0 0 0 0 0 0 0 0

2276 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2277 0 0 0 0 0 0 0 0 0 0

2277 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2278 25 ParamValue< LMatrix3d > * 0 8576 25 ParamValue< LMatrix3d > * 25 ParamValue< LMatrix3d > * 0 0 2051 0 0 0 0 0 0 0 0 0 0

2279 31 ParamValue< LMatrix3d > const * 0 8576 31 ParamValue< LMatrix3d > const * 31 ParamValue< LMatrix3d > const * 0 0 2280 0 0 0 0 0 0 0 0 0 0

2280 29 ParamValue< LMatrix3d > const 0 8832 29 ParamValue< LMatrix3d > const 29 ParamValue< LMatrix3d > const 0 0 2051 0 0 0 0 0 0 0 0 0 0

2281 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2282 0 0 0 0 0 0 0 0 0 0

2282 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2283 0 0 0 0 0 0 0 0 0 0

2283 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2284 25 ParamValue< LMatrix3f > * 0 8576 25 ParamValue< LMatrix3f > * 25 ParamValue< LMatrix3f > * 0 0 2053 0 0 0 0 0 0 0 0 0 0

2285 31 ParamValue< LMatrix3f > const * 0 8576 31 ParamValue< LMatrix3f > const * 31 ParamValue< LMatrix3f > const * 0 0 2286 0 0 0 0 0 0 0 0 0 0

2286 29 ParamValue< LMatrix3f > const 0 8832 29 ParamValue< LMatrix3f > const 29 ParamValue< LMatrix3f > const 0 0 2053 0 0 0 0 0 0 0 0 0 0

2287 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2288 0 0 0 0 0 0 0 0 0 0

2288 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2289 0 0 0 0 0 0 0 0 0 0

2289 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2290 25 ParamValue< LMatrix4d > * 0 8576 25 ParamValue< LMatrix4d > * 25 ParamValue< LMatrix4d > * 0 0 2055 0 0 0 0 0 0 0 0 0 0

2291 31 ParamValue< LMatrix4d > const * 0 8576 31 ParamValue< LMatrix4d > const * 31 ParamValue< LMatrix4d > const * 0 0 2292 0 0 0 0 0 0 0 0 0 0

2292 29 ParamValue< LMatrix4d > const 0 8832 29 ParamValue< LMatrix4d > const 29 ParamValue< LMatrix4d > const 0 0 2055 0 0 0 0 0 0 0 0 0 0

2293 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2294 0 0 0 0 0 0 0 0 0 0

2294 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2295 0 0 0 0 0 0 0 0 0 0

2295 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2296 25 ParamValue< LMatrix4f > * 0 8576 25 ParamValue< LMatrix4f > * 25 ParamValue< LMatrix4f > * 0 0 2057 0 0 0 0 0 0 0 0 0 0

2297 31 ParamValue< LMatrix4f > const * 0 8576 31 ParamValue< LMatrix4f > const * 31 ParamValue< LMatrix4f > const * 0 0 2298 0 0 0 0 0 0 0 0 0 0

2298 29 ParamValue< LMatrix4f > const 0 8832 29 ParamValue< LMatrix4f > const 29 ParamValue< LMatrix4f > const 0 0 2057 0 0 0 0 0 0 0 0 0 0

2299 19 UniqueIdAllocator * 0 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 2065 0 0 0 0 0 0 0 0 0 0

2300 25 UniqueIdAllocator const * 0 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 2301 0 0 0 0 0 0 0 0 0 0

2301 23 UniqueIdAllocator const 0 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 2065 0 0 0 0 0 0 0 0 0 0

2302 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2303 0 0 0 0 0 0 0 0 0 0

2303 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2304 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2305 0 0 0 0 0 0 0 0 0 0

2305 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

2306 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2307 0 0 0 0 0 0 0 0 0 0

2307 10 ConfigPage 0 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

2308 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2309 0 0 0 0 0 0 0 0 0 0

2309 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 0

0
83
2310 9 play_rate 0 6 1938 1015 1014 0 0 0 0 0 0 24 AnimInterface::play_rate 0

2311 10 frame_rate 0 2 1938 1016 0 0 0 0 0 0 0 25 AnimInterface::frame_rate 0

2312 10 num_frames 0 2 1939 1017 0 0 0 0 0 0 0 25 AnimInterface::num_frames 0

2313 5 frame 0 2 1939 1018 0 0 0 0 0 0 0 20 AnimInterface::frame 0

2314 10 next_frame 0 2 1939 1019 0 0 0 0 0 0 0 25 AnimInterface::next_frame 0

2315 4 frac 0 2 1938 1020 0 0 0 0 0 0 0 19 AnimInterface::frac 0

2316 10 full_frame 0 2 1939 1021 0 0 0 0 0 0 0 25 AnimInterface::full_frame 0

2317 11 full_fframe 0 2 1938 1022 0 0 0 0 0 0 0 26 AnimInterface::full_fframe 0

2318 7 playing 0 2 1940 1023 0 0 0 0 0 0 0 22 AnimInterface::playing 0

2319 3 seq 0 2 1943 1044 0 0 0 0 0 0 0 14 UpdateSeq::seq 0

2320 15 source_pathname 0 2 1952 1069 0 0 0 0 0 0 0 31 BamCacheRecord::source_pathname 0

2321 14 cache_filename 0 2 1952 1070 0 0 0 0 0 0 0 30 BamCacheRecord::cache_filename 0

2322 16 source_timestamp 0 2 1954 1071 0 0 0 0 0 0 0 32 BamCacheRecord::source_timestamp 0

2323 13 recorded_time 0 2 1954 1072 0 0 0 0 0 0 0 29 BamCacheRecord::recorded_time 0

2324 4 data 0 30 1955 1080 1082 1078 1079 0 0 0 0 20 BamCacheRecord::data 0

2325 6 active 0 6 1940 1089 1088 0 0 0 0 0 0 16 BamCache::active 0

2326 12 cache_models 0 6 1940 1091 1090 0 0 0 0 0 0 22 BamCache::cache_models 0

2327 14 cache_textures 0 6 1940 1093 1092 0 0 0 0 0 0 24 BamCache::cache_textures 0

2328 25 cache_compressed_textures 0 6 1940 1095 1094 0 0 0 0 0 0 35 BamCache::cache_compressed_textures 0

2329 22 cache_compiled_shaders 0 6 1940 1097 1096 0 0 0 0 0 0 32 BamCache::cache_compiled_shaders 0

2330 4 root 0 6 1953 1099 1098 0 0 0 0 0 0 14 BamCache::root 0

2331 10 flush_time 0 6 1939 1101 1100 0 0 0 0 0 0 20 BamCache::flush_time 0

2332 16 cache_max_kbytes 0 6 1939 1103 1102 0 0 0 0 0 0 26 BamCache::cache_max_kbytes 0

2333 9 read_only 0 6 1940 1105 1104 0 0 0 0 0 0 19 BamCache::read_only 0

2334 5 flags 0 6 1939 1118 1117 0 0 0 0 0 0 20 LoaderOptions::flags 0

2335 13 texture_flags 0 6 1939 1120 1119 0 0 0 0 0 0 28 LoaderOptions::texture_flags 0

2336 17 texture_num_views 0 6 1939 1122 1121 0 0 0 0 0 0 32 LoaderOptions::texture_num_views 0

2337 18 auto_texture_scale 0 6 1941 1124 1123 0 0 0 0 0 0 33 LoaderOptions::auto_texture_scale 0

2338 6 source 0 6 1965 1130 1129 0 0 0 0 0 0 17 BamReader::source 0

2339 8 filename 0 2 1952 1134 0 0 0 0 0 0 0 19 BamReader::filename 0

2340 14 loader_options 0 6 1967 1135 1136 0 0 0 0 0 0 25 BamReader::loader_options 0

2341 12 file_version 0 2 1968 1147 0 0 0 0 0 0 0 23 BamReader::file_version 0

2342 11 file_endian 0 2 1958 1143 0 0 0 0 0 0 0 22 BamReader::file_endian 0

2343 20 file_stdfloat_double 0 2 1940 1144 0 0 0 0 0 0 0 31 BamReader::file_stdfloat_double 0

2344 6 target 0 6 1972 1152 1151 0 0 0 0 0 0 17 BamWriter::target 0

2345 8 filename 0 2 1952 1154 0 0 0 0 0 0 0 19 BamWriter::filename 0

2346 11 file_endian 0 2 1958 1161 0 0 0 0 0 0 0 22 BamWriter::file_endian 0

2347 20 file_stdfloat_double 0 2 1940 1162 0 0 0 0 0 0 0 31 BamWriter::file_stdfloat_double 0

2348 17 file_texture_mode 0 2 1960 1163 0 0 0 0 0 0 0 28 BamWriter::file_texture_mode 0

2349 9 root_node 0 6 1955 1165 1166 0 0 0 0 0 0 20 BamWriter::root_node 0

2350 5 index 0 2 1939 1437 0 0 0 0 0 0 0 19 ButtonHandle::index 0

2351 4 name 0 2 1984 1432 0 0 0 0 0 0 0 18 ButtonHandle::name 0

2352 16 ascii_equivalent 0 10 1986 1434 0 1433 0 0 0 0 0 30 ButtonHandle::ascii_equivalent 0

2353 5 alias 0 2 1983 1435 0 0 0 0 0 0 0 19 ButtonHandle::alias 0

2354 15 cache_ref_count 0 2 1939 1464 0 0 0 0 0 0 0 50 CachedTypedWritableReferenceCount::cache_ref_count 0

2355 8 function 0 6 1968 1478 1477 0 0 0 0 0 0 30 PythonCallbackObject::function 0

2356 2 tv 0 6 1995 1483 1484 0 0 0 0 0 0 11 TimeVal::tv 0

2357 4 mode 0 6 1999 1488 1487 0 0 0 0 0 0 17 ClockObject::mode 0

2358 10 frame_time 0 6 1938 1489 1494 0 0 0 0 0 0 23 ClockObject::frame_time 0

2359 9 real_time 0 6 1938 1490 1493 0 0 0 0 0 0 22 ClockObject::real_time 0

2360 9 long_time 0 2 1938 1491 0 0 0 0 0 0 0 22 ClockObject::long_time 0

2361 11 frame_count 0 6 1939 1496 1495 0 0 0 0 0 0 24 ClockObject::frame_count 0

2362 2 dt 0 6 1938 1498 1499 0 0 0 0 0 0 15 ClockObject::dt 0

2363 6 max_dt 0 6 1938 1501 1502 0 0 0 0 0 0 19 ClockObject::max_dt 0

2364 14 degrade_factor 0 6 1938 1503 1504 0 0 0 0 0 0 27 ClockObject::degrade_factor 0

2365 27 average_frame_rate_interval 0 6 1938 1506 1505 0 0 0 0 0 0 40 ClockObject::average_frame_rate_interval 0

2366 18 average_frame_rate 0 2 1938 1507 0 0 0 0 0 0 0 31 ClockObject::average_frame_rate 0

2367 18 max_frame_duration 0 2 1938 1508 0 0 0 0 0 0 0 31 ClockObject::max_frame_duration 0

2368 4 data 0 6 2004 1529 1530 0 0 0 0 0 0 20 DatagramBuffer::data 0

2369 6 stream 0 2 2009 1541 0 0 0 0 0 0 0 26 DatagramOutputFile::stream 0

2370 7 buttons 0 66 1983 1761 0 0 0 0 1760 0 0 24 ModifierButtons::buttons 0

2371 1 x 0 2 1938 1783 0 0 0 0 0 0 0 14 PointerData::x 0

2372 1 y 0 2 1938 1784 0 0 0 0 0 0 0 14 PointerData::y 0

2373 4 type 0 2 2019 1786 0 0 0 0 0 0 0 17 PointerData::type 0

2374 2 id 0 2 1939 1787 0 0 0 0 0 0 0 15 PointerData::id 0

2375 9 in_window 0 2 1940 1785 0 0 0 0 0 0 0 22 PointerData::in_window 0

2376 8 pressure 0 2 1938 1788 0 0 0 0 0 0 0 21 PointerData::pressure 0

2377 5 value 0 2 2027 1857 0 0 0 0 0 0 0 25 ParamTypedRefCount::value 0

2378 5 value 0 6 2029 1861 1860 0 0 0 0 0 0 27 ParamValue< string >::value 0

2379 5 value 0 6 2029 1865 1864 0 0 0 0 0 0 28 ParamValue< wstring >::value 0

2380 5 value 0 6 2029 1869 1868 0 0 0 0 0 0 31 ParamValue< LVecBase2d >::value 0

2381 5 value 0 6 2029 1873 1872 0 0 0 0 0 0 31 ParamValue< LVecBase2f >::value 0

2382 5 value 0 6 2029 1877 1876 0 0 0 0 0 0 31 ParamValue< LVecBase2i >::value 0

2383 5 value 0 6 2029 1881 1880 0 0 0 0 0 0 31 ParamValue< LVecBase3d >::value 0

2384 5 value 0 6 2029 1885 1884 0 0 0 0 0 0 31 ParamValue< LVecBase3f >::value 0

2385 5 value 0 6 2029 1889 1888 0 0 0 0 0 0 31 ParamValue< LVecBase3i >::value 0

2386 5 value 0 6 2029 1893 1892 0 0 0 0 0 0 31 ParamValue< LVecBase4d >::value 0

2387 5 value 0 6 2029 1897 1896 0 0 0 0 0 0 31 ParamValue< LVecBase4f >::value 0

2388 5 value 0 6 2029 1901 1900 0 0 0 0 0 0 31 ParamValue< LVecBase4i >::value 0

2389 5 value 0 6 2029 1905 1904 0 0 0 0 0 0 30 ParamValue< LMatrix3d >::value 0

2390 5 value 0 6 2029 1909 1908 0 0 0 0 0 0 30 ParamValue< LMatrix3f >::value 0

2391 5 value 0 6 2029 1913 1912 0 0 0 0 0 0 30 ParamValue< LMatrix4d >::value 0

2392 5 value 0 6 2029 1917 1916 0 0 0 0 0 0 30 ParamValue< LMatrix4f >::value 0

1
2393 11 get_buttons 0 1760 1761 28 ModifierButtons::get_buttons 0

