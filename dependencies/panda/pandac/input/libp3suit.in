1641927188
3 3
9 libp3suit 4 apzU 16 panda3d.toontown 
30
30 8 get_type 0 4 60 17 SuitLeg::get_type 0 1 2 470
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_type
//       Access: Published
//  Description: Returns the type of this leg.  Most legs are of type
//               T_bellicose, which corresponds to just plain walking
//               down the street, but other legs particularly at both
//               ends of the path may represent other modes.
////////////////////////////////////////////////////////////////////
51
inline SuitLeg::Type SuitLeg::get_type(void) const;

31 14 get_start_time 0 4 60 23 SuitLeg::get_start_time 0 1 3 335
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_start_time
//       Access: Published
//  Description: Returns the time (in seconds elapsed since the
//               beginning of the path) at which this leg begins.
////////////////////////////////////////////////////////////////////
50
inline double SuitLeg::get_start_time(void) const;

32 12 get_leg_time 0 4 60 21 SuitLeg::get_leg_time 0 1 4 310
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_leg_time
//       Access: Published
//  Description: Returns the total length of time, in seconds, which
//               this leg represents.
////////////////////////////////////////////////////////////////////
48
inline double SuitLeg::get_leg_time(void) const;

33 11 get_zone_id 0 4 60 20 SuitLeg::get_zone_id 0 1 5 265
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_zone_id
//       Access: Published
//  Description: Returns the Zone ID associated with this leg.
////////////////////////////////////////////////////////////////////
44
inline int SuitLeg::get_zone_id(void) const;

34 16 get_block_number 0 4 60 25 SuitLeg::get_block_number 0 1 6 462
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_block_number
//       Access: Published
//  Description: Returns the block number associated with this leg, if
//               any.  Normally this is only relevant for CogHQ door
//               type legs, in which it represents the particular door
//               index we're going through.
////////////////////////////////////////////////////////////////////
49
inline int SuitLeg::get_block_number(void) const;

35 11 get_point_a 0 4 60 20 SuitLeg::get_point_a 0 1 7 383
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_point_a
//       Access: Published
//  Description: Returns the first DNASuitPoint associated with this
//               leg.  In most cases, the leg represents the path
//               between point A and point B.
////////////////////////////////////////////////////////////////////
44
inline int SuitLeg::get_point_a(void) const;

36 11 get_point_b 0 4 60 20 SuitLeg::get_point_b 0 1 8 384
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_point_b
//       Access: Published
//  Description: Returns the second DNASuitPoint associated with this
//               leg.  In most cases, the leg represents the path
//               between point A and point B.
////////////////////////////////////////////////////////////////////
44
inline int SuitLeg::get_point_b(void) const;

37 9 get_pos_a 0 4 60 18 SuitLeg::get_pos_a 0 1 9 269
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_pos_a
//       Access: Published
//  Description: Returns the point in space associated with point A.
////////////////////////////////////////////////////////////////////
47
inline LPoint3f SuitLeg::get_pos_a(void) const;

38 9 get_pos_b 0 4 60 18 SuitLeg::get_pos_b 0 1 10 269
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_pos_b
//       Access: Published
//  Description: Returns the point in space associated with point B.
////////////////////////////////////////////////////////////////////
47
inline LPoint3f SuitLeg::get_pos_b(void) const;

39 15 get_pos_at_time 0 4 60 24 SuitLeg::get_pos_at_time 0 1 11 370
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_pos_at_time
//       Access: Published
//  Description: Returns the expected position of the suit at the
//               indicated time, in seconds elapsed since the start of
//               this leg.
////////////////////////////////////////////////////////////////////
53
LPoint3f SuitLeg::get_pos_at_time(double time) const;

40 13 get_type_name 0 4 60 22 SuitLeg::get_type_name 0 1 12 394
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_type_name
//       Access: Published, Static
//  Description: Returns the string name associated with the indicated
//               type.  This is also the name that corresponds to a
//               state in DistributedSuit.
////////////////////////////////////////////////////////////////////
62
static std::string SuitLeg::get_type_name(SuitLeg::Type type);

41 6 output 0 4 60 15 SuitLeg::output 0 1 13 214
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
void SuitLeg::output(std::ostream &out) const;

42 7 SuitLeg 0 4 60 16 SuitLeg::SuitLeg 0 1 1 216
////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline SuitLeg::SuitLeg(SuitLeg const &) = default;

43 8 ~SuitLeg 0 4 60 17 SuitLeg::~SuitLeg 0 0 0
24
SuitLeg::~SuitLeg(void);

44 11 SuitLegList 0 4 62 24 SuitLegList::SuitLegList 0 2 14 15 240
//               The last five parameters are the lengths of time, in
//               seconds, we should allow for each of the
//               corresponding transitions.
////////////////////////////////////////////////////////////////////
299
SuitLegList::SuitLegList(DNASuitPath const *path, DNAStorage const &storage, double suit_walk_speed, double from_sky_time, double to_sky_time, double from_suit_building_time, double to_suit_building_time, double to_toon_building_time);
inline SuitLegList::SuitLegList(SuitLegList const &) = default;

45 12 ~SuitLegList 0 4 62 25 SuitLegList::~SuitLegList 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
32
SuitLegList::~SuitLegList(void);

46 12 get_num_legs 0 4 62 25 SuitLegList::get_num_legs 0 1 16 224
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_num_legs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
int SuitLegList::get_num_legs(void) const;

47 7 get_leg 0 4 62 20 SuitLegList::get_leg 0 1 17 219
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_leg
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
SuitLeg const &SuitLegList::get_leg(int n) const;

48 11 operator [] 0 4 62 24 SuitLegList::operator [] 0 1 18 262
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::Indexing Operator
//       Access: Published
//  Description: Returns the nth leg of the list.
////////////////////////////////////////////////////////////////////
60
inline SuitLeg const &SuitLegList::operator [](int n) const;

49 21 get_leg_index_at_time 0 4 62 34 SuitLegList::get_leg_index_at_time 0 1 19 158
//               start is a hint, the index at which to start
//               searching.
////////////////////////////////////////////////////////////////////
69
int SuitLegList::get_leg_index_at_time(double time, int start) const;

50 8 get_type 0 4 62 21 SuitLegList::get_type 0 1 20 474
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_type
//       Access: Published
//  Description: Returns the type of this leg.  Most legs are of type
//               T_bellicose, which corresponds to just plain walking
//               down the street, but other legs particularly at both
//               ends of the path may represent other modes.
////////////////////////////////////////////////////////////////////
56
inline SuitLeg::Type SuitLegList::get_type(int n) const;

51 14 get_start_time 0 4 62 27 SuitLegList::get_start_time 0 1 21 339
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_start_time
//       Access: Published
//  Description: Returns the time (in seconds elapsed since the
//               beginning of the path) at which this leg begins.
////////////////////////////////////////////////////////////////////
55
inline double SuitLegList::get_start_time(int n) const;

52 12 get_leg_time 0 4 62 25 SuitLegList::get_leg_time 0 1 22 314
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_leg_time
//       Access: Published
//  Description: Returns the total length of time, in seconds, which
//               this leg represents.
////////////////////////////////////////////////////////////////////
53
inline double SuitLegList::get_leg_time(int n) const;

53 11 get_zone_id 0 4 62 24 SuitLegList::get_zone_id 0 1 23 594
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_zone_id
//       Access: Published
//  Description: Returns the Zone ID associated with this leg.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_zone_id
//       Access: Private, Static
//  Description: Returns the Zone ID associated with the edge defined
//               by the two suit points.
////////////////////////////////////////////////////////////////////
49
inline int SuitLegList::get_zone_id(int n) const;

54 16 get_block_number 0 4 62 29 SuitLegList::get_block_number 0 1 24 466
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_block_number
//       Access: Published
//  Description: Returns the block number associated with this leg, if
//               any.  Normally this is only relevant for CogHQ door
//               type legs, in which it represents the particular door
//               index we're going through.
////////////////////////////////////////////////////////////////////
54
inline int SuitLegList::get_block_number(int n) const;

55 11 get_point_a 0 4 62 24 SuitLegList::get_point_a 0 1 25 387
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_point_a
//       Access: Published
//  Description: Returns the first DNASuitPoint associated with this
//               leg.  In most cases, the leg represents the path
//               between point A and point B.
////////////////////////////////////////////////////////////////////
49
inline int SuitLegList::get_point_a(int n) const;

56 11 get_point_b 0 4 62 24 SuitLegList::get_point_b 0 1 26 387
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_point_b
//       Access: Published
//  Description: Returns the first DNASuitPoint associated with this
//               leg.  In most cases, the leg represents the path
//               between point A and point B.
////////////////////////////////////////////////////////////////////
49
inline int SuitLegList::get_point_b(int n) const;

57 17 is_point_in_range 0 4 62 30 SuitLegList::is_point_in_range 0 1 27 470
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::is_point_in_range
//       Access: Published
//  Description: Returns true if the indicated point lies on this
//               path, between times begin and end, or false
//               otherwise.  This is useful for ensuring two suits
//               aren't assigned paths too close to each other.
////////////////////////////////////////////////////////////////////
95
bool SuitLegList::is_point_in_range(DNASuitPoint const *point, double begin, double end) const;

58 6 output 0 4 62 19 SuitLegList::output 0 1 28 218
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void SuitLegList::output(std::ostream &out) const;

59 5 write 0 4 62 18 SuitLegList::write 0 1 29 217
////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
void SuitLegList::write(std::ostream &out) const;

29
1 0 0 7 15 65 43 0 0 1 6 param0 0 63  
2 0 0 6 3 61 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_type
//       Access: Published
//  Description: Returns the type of this leg.  Most legs are of type
//               T_bellicose, which corresponds to just plain walking
//               down the street, but other legs particularly at both
//               ends of the path may represent other modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
3 0 0 6 4 66 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_start_time
//       Access: Published
//  Description: Returns the time (in seconds elapsed since the
//               beginning of the path) at which this leg begins.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
4 0 0 6 5 66 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_leg_time
//       Access: Published
//  Description: Returns the total length of time, in seconds, which
//               this leg represents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
5 0 0 6 6 67 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_zone_id
//       Access: Published
//  Description: Returns the Zone ID associated with this leg.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
6 0 0 6 7 67 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_block_number
//       Access: Published
//  Description: Returns the block number associated with this leg, if
//               any.  Normally this is only relevant for CogHQ door
//               type legs, in which it represents the particular door
//               index we're going through.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
7 0 0 6 8 67 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_point_a
//       Access: Published
//  Description: Returns the first DNASuitPoint associated with this
//               leg.  In most cases, the leg represents the path
//               between point A and point B.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
8 0 0 6 9 67 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_point_b
//       Access: Published
//  Description: Returns the second DNASuitPoint associated with this
//               leg.  In most cases, the leg represents the path
//               between point A and point B.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
9 0 0 7 10 69 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_pos_a
//       Access: Published
//  Description: Returns the point in space associated with point A.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
10 0 0 7 11 69 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_pos_b
//       Access: Published
//  Description: Returns the point in space associated with point B.
//////////////////////////////////////////////////////////////////// 1 4 this 3 63  
11 0 0 7 12 69 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_pos_at_time
//       Access: Published
//  Description: Returns the expected position of the suit at the
//               indicated time, in seconds elapsed since the start of
//               this leg.
//////////////////////////////////////////////////////////////////// 2 4 this 3 63  4 time 1 66  
12 0 0 6 13 70 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::get_type_name
//       Access: Published, Static
//  Description: Returns the string name associated with the indicated
//               type.  This is also the name that corresponds to a
//               state in DistributedSuit.
//////////////////////////////////////////////////////////////////// 1 4 type 1 61  
13 0 0 4 14 73 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: SuitLeg::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 63  3 out 1 71  
14 0 0 7 18 80 45 0 240 //               The last five parameters are the lengths of time, in
//               seconds, we should allow for each of the
//               corresponding transitions.
//////////////////////////////////////////////////////////////////// 8 4 path 1 74  7 storage 1 77  15 suit_walk_speed 1 66  13 from_sky_time 1 66  11 to_sky_time 1 66  23 from_suit_building_time 1 66  21 to_suit_building_time 1 66  21 to_toon_building_time 1 66  
15 0 0 7 18 80 45 0 0 1 6 param0 0 81  
16 0 0 6 20 67 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_num_legs
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 81  
17 0 0 6 21 63 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_leg
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
18 0 0 6 22 63 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::Indexing Operator
//       Access: Published
//  Description: Returns the nth leg of the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
19 0 0 6 23 67 0 0 158 //               start is a hint, the index at which to start
//               searching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 81  4 time 1 66  5 start 1 67  
20 0 0 6 24 61 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_type
//       Access: Published
//  Description: Returns the type of this leg.  Most legs are of type
//               T_bellicose, which corresponds to just plain walking
//               down the street, but other legs particularly at both
//               ends of the path may represent other modes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
21 0 0 6 25 66 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_start_time
//       Access: Published
//  Description: Returns the time (in seconds elapsed since the
//               beginning of the path) at which this leg begins.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
22 0 0 6 26 66 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_leg_time
//       Access: Published
//  Description: Returns the total length of time, in seconds, which
//               this leg represents.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
23 0 0 6 27 67 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_zone_id
//       Access: Published
//  Description: Returns the Zone ID associated with this leg.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
24 0 0 6 28 67 0 0 466 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_block_number
//       Access: Published
//  Description: Returns the block number associated with this leg, if
//               any.  Normally this is only relevant for CogHQ door
//               type legs, in which it represents the particular door
//               index we're going through.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
25 0 0 6 29 67 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_point_a
//       Access: Published
//  Description: Returns the first DNASuitPoint associated with this
//               leg.  In most cases, the leg represents the path
//               between point A and point B.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
26 0 0 6 30 67 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::get_point_b
//       Access: Published
//  Description: Returns the first DNASuitPoint associated with this
//               leg.  In most cases, the leg represents the path
//               between point A and point B.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  1 n 1 67  
27 0 0 6 31 86 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::is_point_in_range
//       Access: Published
//  Description: Returns true if the indicated point lies on this
//               path, between times begin and end, or false
//               otherwise.  This is useful for ensuring two suits
//               aren't assigned paths too close to each other.
//////////////////////////////////////////////////////////////////// 4 4 this 3 81  5 point 1 83  5 begin 1 66  3 end 1 66  
28 0 0 4 32 73 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  3 out 1 71  
29 0 0 4 33 73 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: SuitLegList::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  3 out 1 71  
27
60 7 SuitLeg 0 141313 7 SuitLeg 7 SuitLeg 0 0 0 1 42 43 0 12 30 31 32 33 34 35 36 37 38 39 40 41 0 0 0 0 1 61 364
//               This class is defined in C++ instead of in Python
//               because we have to create a long list of SuitLegs
//               every time we encounter a new suit, a process which
//               takes substantial time in Python but is negligible in
//               C++.
////////////////////////////////////////////////////////////////////

61 4 Type 0 794624 13 SuitLeg::Type 13 SuitLeg::Type 60 0 0 0 0 0 0 0 0 0 11 18 T_walk_from_street 27 SuitLeg::T_walk_from_street 0
0 16 T_walk_to_street 25 SuitLeg::T_walk_to_street 0
1 6 T_walk 15 SuitLeg::T_walk 0
2 10 T_from_sky 19 SuitLeg::T_from_sky 0
3 8 T_to_sky 17 SuitLeg::T_to_sky 0
4 20 T_from_suit_building 29 SuitLeg::T_from_suit_building 0
5 18 T_to_suit_building 27 SuitLeg::T_to_suit_building 0
6 18 T_to_toon_building 27 SuitLeg::T_to_toon_building 0
7 12 T_from_coghq 21 SuitLeg::T_from_coghq 0
8 10 T_to_coghq 19 SuitLeg::T_to_coghq 0
9 5 T_off 14 SuitLeg::T_off 0
10 0 117
// Various types of legs.  These leg types also correspond to named
// states in the client-side DistributedSuit fsm.

62 11 SuitLegList 0 26625 11 SuitLegList 11 SuitLegList 0 0 0 1 44 45 0 14 46 47 48 49 50 51 52 53 54 55 56 57 58 59 0 0 0 0 0 289
////////////////////////////////////////////////////////////////////
//       Class : SuitLegList
// Description : This is a list of SuitLegs.  See SuitLeg for a more
//               detailed explanation of its purpose.
////////////////////////////////////////////////////////////////////

63 15 SuitLeg const * 0 8576 15 SuitLeg const * 15 SuitLeg const * 0 0 64 0 0 0 0 0 0 0 0 0 0

64 13 SuitLeg const 0 8832 13 SuitLeg const 13 SuitLeg const 0 0 60 0 0 0 0 0 0 0 0 0 0

65 9 SuitLeg * 0 8576 9 SuitLeg * 9 SuitLeg * 0 0 60 0 0 0 0 0 0 0 0 0 0

66 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

67 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

68 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

69 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 68 0 0 0 0 0 0 0 0 0 0

70 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

71 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 72 0 0 0 0 0 0 0 0 0 0

72 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

73 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

74 19 DNASuitPath const * 0 8576 19 DNASuitPath const * 19 DNASuitPath const * 0 0 75 0 0 0 0 0 0 0 0 0 0

75 17 DNASuitPath const 0 8832 17 DNASuitPath const 17 DNASuitPath const 0 0 76 0 0 0 0 0 0 0 0 0 0

76 11 DNASuitPath 0 2048 11 DNASuitPath 11 DNASuitPath 0 0 0 0 0 0 0 0 0 0 0 0 183
////////////////////////////////////////////////////////////////////
//       Class : DNASuitPath
// Description :
////////////////////////////////////////////////////////////////////

77 18 DNAStorage const * 0 8576 18 DNAStorage const * 18 DNAStorage const * 0 0 78 0 0 0 0 0 0 0 0 0 0

78 16 DNAStorage const 0 8832 16 DNAStorage const 16 DNAStorage const 0 0 79 0 0 0 0 0 0 0 0 0 0

79 10 DNAStorage 0 2048 10 DNAStorage 10 DNAStorage 0 0 0 0 0 0 0 0 0 0 0 0 0

80 13 SuitLegList * 0 8576 13 SuitLegList * 13 SuitLegList * 0 0 62 0 0 0 0 0 0 0 0 0 0

81 19 SuitLegList const * 0 8576 19 SuitLegList const * 19 SuitLegList const * 0 0 82 0 0 0 0 0 0 0 0 0 0

82 17 SuitLegList const 0 8832 17 SuitLegList const 17 SuitLegList const 0 0 62 0 0 0 0 0 0 0 0 0 0

83 20 DNASuitPoint const * 0 8576 20 DNASuitPoint const * 20 DNASuitPoint const * 0 0 84 0 0 0 0 0 0 0 0 0 0

84 18 DNASuitPoint const 0 8832 18 DNASuitPoint const 18 DNASuitPoint const 0 0 85 0 0 0 0 0 0 0 0 0 0

85 12 DNASuitPoint 0 2048 12 DNASuitPoint 12 DNASuitPoint 0 0 0 0 0 0 0 0 0 0 0 0 184
////////////////////////////////////////////////////////////////////
//       Class : DNASuitPoint
// Description :
////////////////////////////////////////////////////////////////////

86 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

0
0
0
